
RocketDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800b340  0800b340  0000c340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b788  0800b788  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b788  0800b788  0000c788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b790  0800b790  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b794  0800b794  0000c794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b798  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e8  2**0
                  CONTENTS
 10 .bss          000003f0  200001e8  200001e8  0000d1e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005d8  200005d8  0000d1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d94d  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d4  00000000  00000000  0001ab65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0001cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c2  00000000  00000000  0001d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220da  00000000  00000000  0001e14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa74  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8939  00000000  00000000  0004fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001185d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004234  00000000  00000000  00118614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0011c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b328 	.word	0x0800b328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b328 	.word	0x0800b328

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b9a0 	b.w	8000f30 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f83c 	bl	8000c74 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff5b 	bl	8000acc <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fcd1 	bl	80005e8 <__aeabi_dmul>
 8000c46:	f7ff ffa7 	bl	8000b98 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc52 	bl	80004f4 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fcc8 	bl	80005e8 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb0a 	bl	8000278 <__aeabi_dsub>
 8000c64:	f7ff ff98 	bl	8000b98 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <__udivmoddi4>:
 8000c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c78:	9d08      	ldr	r5, [sp, #32]
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d14e      	bne.n	8000d1e <__udivmoddi4+0xaa>
 8000c80:	4694      	mov	ip, r2
 8000c82:	458c      	cmp	ip, r1
 8000c84:	4686      	mov	lr, r0
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	d962      	bls.n	8000d52 <__udivmoddi4+0xde>
 8000c8c:	b14a      	cbz	r2, 8000ca2 <__udivmoddi4+0x2e>
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	4091      	lsls	r1, r2
 8000c94:	fa20 f303 	lsr.w	r3, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f f68c 	uxth.w	r6, ip
 8000caa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cba:	fb04 f106 	mul.w	r1, r4, r6
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x64>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cca:	f080 8112 	bcs.w	8000ef2 <__udivmoddi4+0x27e>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 810f 	bls.w	8000ef2 <__udivmoddi4+0x27e>
 8000cd4:	3c02      	subs	r4, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a59      	subs	r1, r3, r1
 8000cda:	fa1f f38e 	uxth.w	r3, lr
 8000cde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cea:	fb00 f606 	mul.w	r6, r0, r6
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x94>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfa:	f080 80fc 	bcs.w	8000ef6 <__udivmoddi4+0x282>
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	f240 80f9 	bls.w	8000ef6 <__udivmoddi4+0x282>
 8000d04:	4463      	add	r3, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	1b9b      	subs	r3, r3, r6
 8000d0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa6>
 8000d12:	40d3      	lsrs	r3, r2
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xba>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb4>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa6>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x150>
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xcc>
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	f0c0 80f0 	bcc.w	8000f20 <__udivmoddi4+0x2ac>
 8000d40:	1a86      	subs	r6, r0, r2
 8000d42:	eb64 0303 	sbc.w	r3, r4, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	2d00      	cmp	r5, #0
 8000d4a:	d0e6      	beq.n	8000d1a <__udivmoddi4+0xa6>
 8000d4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d50:	e7e3      	b.n	8000d1a <__udivmoddi4+0xa6>
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x204>
 8000d58:	eba1 040c 	sub.w	r4, r1, ip
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa1f f78c 	uxth.w	r7, ip
 8000d64:	2101      	movs	r1, #1
 8000d66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb07 f006 	mul.w	r0, r7, r6
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x11c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x11a>
 8000d88:	4298      	cmp	r0, r3
 8000d8a:	f200 80cd 	bhi.w	8000f28 <__udivmoddi4+0x2b4>
 8000d8e:	4626      	mov	r6, r4
 8000d90:	1a1c      	subs	r4, r3, r0
 8000d92:	fa1f f38e 	uxth.w	r3, lr
 8000d96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da2:	fb00 f707 	mul.w	r7, r0, r7
 8000da6:	429f      	cmp	r7, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x148>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x146>
 8000db4:	429f      	cmp	r7, r3
 8000db6:	f200 80b0 	bhi.w	8000f1a <__udivmoddi4+0x2a6>
 8000dba:	4620      	mov	r0, r4
 8000dbc:	1bdb      	subs	r3, r3, r7
 8000dbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x9c>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000dd8:	ea43 030c 	orr.w	r3, r3, ip
 8000ddc:	40f4      	lsrs	r4, r6
 8000dde:	fa00 f801 	lsl.w	r8, r0, r1
 8000de2:	0c38      	lsrs	r0, r7, #16
 8000de4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000de8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dec:	fa1f fc87 	uxth.w	ip, r7
 8000df0:	fb00 441e 	mls	r4, r0, lr, r4
 8000df4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dfc:	45a1      	cmp	r9, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x1a6>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0a:	f080 8084 	bcs.w	8000f16 <__udivmoddi4+0x2a2>
 8000e0e:	45a1      	cmp	r9, r4
 8000e10:	f240 8081 	bls.w	8000f16 <__udivmoddi4+0x2a2>
 8000e14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	eba4 0409 	sub.w	r4, r4, r9
 8000e1e:	fa1f f983 	uxth.w	r9, r3
 8000e22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e26:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x1d2>
 8000e36:	193c      	adds	r4, r7, r4
 8000e38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e3c:	d267      	bcs.n	8000f0e <__udivmoddi4+0x29a>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d965      	bls.n	8000f0e <__udivmoddi4+0x29a>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e4e:	eba4 040c 	sub.w	r4, r4, ip
 8000e52:	429c      	cmp	r4, r3
 8000e54:	46ce      	mov	lr, r9
 8000e56:	469c      	mov	ip, r3
 8000e58:	d351      	bcc.n	8000efe <__udivmoddi4+0x28a>
 8000e5a:	d04e      	beq.n	8000efa <__udivmoddi4+0x286>
 8000e5c:	b155      	cbz	r5, 8000e74 <__udivmoddi4+0x200>
 8000e5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e62:	eb64 040c 	sbc.w	r4, r4, ip
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	40cb      	lsrs	r3, r1
 8000e6c:	431e      	orrs	r6, r3
 8000e6e:	40cc      	lsrs	r4, r1
 8000e70:	e9c5 6400 	strd	r6, r4, [r5]
 8000e74:	2100      	movs	r1, #0
 8000e76:	e750      	b.n	8000d1a <__udivmoddi4+0xa6>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa24 f303 	lsr.w	r3, r4, r3
 8000e88:	4094      	lsls	r4, r2
 8000e8a:	430c      	orrs	r4, r1
 8000e8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e94:	fa1f f78c 	uxth.w	r7, ip
 8000e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea0:	0c23      	lsrs	r3, r4, #16
 8000ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea6:	fb00 f107 	mul.w	r1, r0, r7
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x24c>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eb6:	d22c      	bcs.n	8000f12 <__udivmoddi4+0x29e>
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d92a      	bls.n	8000f12 <__udivmoddi4+0x29e>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ec8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ecc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed0:	fb01 f307 	mul.w	r3, r1, r7
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x276>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee0:	d213      	bcs.n	8000f0a <__udivmoddi4+0x296>
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	d911      	bls.n	8000f0a <__udivmoddi4+0x296>
 8000ee6:	3902      	subs	r1, #2
 8000ee8:	4464      	add	r4, ip
 8000eea:	1ae4      	subs	r4, r4, r3
 8000eec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef0:	e739      	b.n	8000d66 <__udivmoddi4+0xf2>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	e6f0      	b.n	8000cd8 <__udivmoddi4+0x64>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e706      	b.n	8000d08 <__udivmoddi4+0x94>
 8000efa:	45c8      	cmp	r8, r9
 8000efc:	d2ae      	bcs.n	8000e5c <__udivmoddi4+0x1e8>
 8000efe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f06:	3801      	subs	r0, #1
 8000f08:	e7a8      	b.n	8000e5c <__udivmoddi4+0x1e8>
 8000f0a:	4631      	mov	r1, r6
 8000f0c:	e7ed      	b.n	8000eea <__udivmoddi4+0x276>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	e799      	b.n	8000e46 <__udivmoddi4+0x1d2>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e7d4      	b.n	8000ec0 <__udivmoddi4+0x24c>
 8000f16:	46d6      	mov	lr, sl
 8000f18:	e77f      	b.n	8000e1a <__udivmoddi4+0x1a6>
 8000f1a:	4463      	add	r3, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e74d      	b.n	8000dbc <__udivmoddi4+0x148>
 8000f20:	4606      	mov	r6, r0
 8000f22:	4623      	mov	r3, r4
 8000f24:	4608      	mov	r0, r1
 8000f26:	e70f      	b.n	8000d48 <__udivmoddi4+0xd4>
 8000f28:	3e02      	subs	r6, #2
 8000f2a:	4463      	add	r3, ip
 8000f2c:	e730      	b.n	8000d90 <__udivmoddi4+0x11c>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <BMP280Init>:
#include "math.h"
extern I2C_HandleTypeDef hi2c1;


HAL_StatusTypeDef BMP280Init(uint8_t mode, uint8_t oversamole_t, uint8_t oversample_p, uint8_t t_sb)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af04      	add	r7, sp, #16
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	4603      	mov	r3, r0
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	717b      	strb	r3, [r7, #5]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	713b      	strb	r3, [r7, #4]
	uint8_t tempValue = 0, value = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	737b      	strb	r3, [r7, #13]
 8000f56:	2300      	movs	r3, #0
 8000f58:	733b      	strb	r3, [r7, #12]
	uint8_t status1, status2;
	tempValue |= ((oversample_p << oversampling_p_bit) | (oversamole_t << oversampling_t_bit) | (mode << mode_bit));
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b25a      	sxtb	r2, r3
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	737b      	strb	r3, [r7, #13]
	value |= (t_sb << (t_sb_bit));
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	7b3b      	ldrb	r3, [r7, #12]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]
	status1 = HAL_I2C_Mem_Write(&hi2c1,(0x76 << 1) + 0, mem_Addr, 1, &tempValue, 1, 100);
 8000f90:	2364      	movs	r3, #100	@ 0x64
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	f107 030d 	add.w	r3, r7, #13
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	22f4      	movs	r2, #244	@ 0xf4
 8000fa2:	21ec      	movs	r1, #236	@ 0xec
 8000fa4:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <BMP280Init+0xb4>)
 8000fa6:	f001 fd13 	bl	80029d0 <HAL_I2C_Mem_Write>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
	status2 = HAL_I2C_Mem_Write(&hi2c1, dev_addr, mem_addr2, 1, &value, 1,100);
 8000fae:	2364      	movs	r3, #100	@ 0x64
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	22f5      	movs	r2, #245	@ 0xf5
 8000fc0:	21ec      	movs	r1, #236	@ 0xec
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <BMP280Init+0xb4>)
 8000fc4:	f001 fd04 	bl	80029d0 <HAL_I2C_Mem_Write>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73bb      	strb	r3, [r7, #14]
	if( (HAL_OK != status1) && (HAL_OK != status2) )
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <BMP280Init+0xa8>
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <BMP280Init+0xa8>
	{
		return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <BMP280Init+0xaa>
	}
	else
	{
		return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
	}
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200003e8 	.word	0x200003e8

08000fec <BMP280CalculateData>:
void BMP280CalculateData(BMP280_HandleTypedef_t *Handle){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

		uint32_t adc_P = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
		uint32_t adc_T = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
		adc_P = (Handle->rawData[0] << 12U | Handle->rawData[1] << 4U | Handle->rawData[2] >> 4U);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	031a      	lsls	r2, r3, #12
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4313      	orrs	r3, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001014:	3202      	adds	r2, #2
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	0912      	lsrs	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	4313      	orrs	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
		adc_T = (Handle->rawData[3] << 12U | Handle->rawData[4] << 4U | Handle->rawData[5] >> 4U);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	3303      	adds	r3, #3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	031a      	lsls	r2, r3, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	3304      	adds	r3, #4
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4313      	orrs	r3, r2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800103a:	3205      	adds	r2, #5
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	0912      	lsrs	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	4313      	orrs	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]

		Handle->adc_P = adc_P;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	605a      	str	r2, [r3, #4]
		Handle->adc_T = adc_T;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <BMP280CalibData>:
signed short   dig_P7;
signed short   dig_P8;
signed short   dig_P9;


void BMP280CalibData(BMP280_HandleTypedef_t *Handle){
 8001060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001064:	b098      	sub	sp, #96	@ 0x60
 8001066:	af04      	add	r7, sp, #16
 8001068:	6078      	str	r0, [r7, #4]
	 uint32_t adc_T = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 uint32_t adc_P = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	64bb      	str	r3, [r7, #72]	@ 0x48

	uint8_t calibData[24] = {0};
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
	adc_T = Handle->adc_T;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	adc_P = Handle->adc_P;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, 0x88, 1, calibData, 24,100);
 8001092:	2364      	movs	r3, #100	@ 0x64
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2318      	movs	r3, #24
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2288      	movs	r2, #136	@ 0x88
 80010a4:	21ec      	movs	r1, #236	@ 0xec
 80010a6:	48b6      	ldr	r0, [pc, #728]	@ (8001380 <BMP280CalibData+0x320>)
 80010a8:	f001 fd8c 	bl	8002bc4 <HAL_I2C_Mem_Read>
	//0x88

	dig_T1 = ((calibData[1]  << 8)  | calibData[0]) ;
 80010ac:	7a7b      	ldrb	r3, [r7, #9]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001384 <BMP280CalibData+0x324>)
 80010be:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((calibData[3]  << 8)  | calibData[2]) ;
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4bae      	ldr	r3, [pc, #696]	@ (8001388 <BMP280CalibData+0x328>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((calibData[5]  << 8)  | calibData[4]) ;
 80010d2:	7b7b      	ldrb	r3, [r7, #13]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4baa      	ldr	r3, [pc, #680]	@ (800138c <BMP280CalibData+0x32c>)
 80010e2:	801a      	strh	r2, [r3, #0]
	dig_P1 = ((calibData[7]  << 8)  | calibData[6]) ;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001390 <BMP280CalibData+0x330>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((calibData[9]  << 8)  | calibData[8]) ;
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7c3b      	ldrb	r3, [r7, #16]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4ba3      	ldr	r3, [pc, #652]	@ (8001394 <BMP280CalibData+0x334>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((calibData[11] << 8)  | calibData[10]);
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7cbb      	ldrb	r3, [r7, #18]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b9f      	ldr	r3, [pc, #636]	@ (8001398 <BMP280CalibData+0x338>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((calibData[13] << 8)  | calibData[12]);
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7d3b      	ldrb	r3, [r7, #20]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b9c      	ldr	r3, [pc, #624]	@ (800139c <BMP280CalibData+0x33c>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((calibData[15] << 8)  | calibData[14]);
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7dbb      	ldrb	r3, [r7, #22]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b98      	ldr	r3, [pc, #608]	@ (80013a0 <BMP280CalibData+0x340>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((calibData[17] << 8)  | calibData[16]);
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7e3b      	ldrb	r3, [r7, #24]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b95      	ldr	r3, [pc, #596]	@ (80013a4 <BMP280CalibData+0x344>)
 8001150:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((calibData[19] << 8)  | calibData[18]);
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7ebb      	ldrb	r3, [r7, #26]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b91      	ldr	r3, [pc, #580]	@ (80013a8 <BMP280CalibData+0x348>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((calibData[21] << 8)  | calibData[20]);
 8001164:	7f7b      	ldrb	r3, [r7, #29]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7f3b      	ldrb	r3, [r7, #28]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <BMP280CalibData+0x34c>)
 8001174:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((calibData[23] << 8)  | calibData[22]);
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7fbb      	ldrb	r3, [r7, #30]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b8a      	ldr	r3, [pc, #552]	@ (80013b0 <BMP280CalibData+0x350>)
 8001186:	801a      	strh	r2, [r3, #0]

	double var1, var2;
	double T1 = 0;
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double P1 = 0;
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int t_fine = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
	var1  	   = ((((double)adc_T)/16384.0 - ((double)dig_T1)/1024.0)*((double)dig_T2));
 80011a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011a6:	f7ff f9a5 	bl	80004f4 <__aeabi_ui2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b81      	ldr	r3, [pc, #516]	@ (80013b4 <BMP280CalibData+0x354>)
 80011b0:	f7ff fb44 	bl	800083c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	4b71      	ldr	r3, [pc, #452]	@ (8001384 <BMP280CalibData+0x324>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f997 	bl	80004f4 <__aeabi_ui2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b7b      	ldr	r3, [pc, #492]	@ (80013b8 <BMP280CalibData+0x358>)
 80011cc:	f7ff fb36 	bl	800083c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4620      	mov	r0, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	f7ff f84e 	bl	8000278 <__aeabi_dsub>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	4b68      	ldr	r3, [pc, #416]	@ (8001388 <BMP280CalibData+0x328>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f992 	bl	8000514 <__aeabi_i2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f9f6 	bl	80005e8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var2   	   = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) * (((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)) * ((double)dig_T3);
 8001204:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001206:	f7ff f975 	bl	80004f4 <__aeabi_ui2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001212:	f7ff fb13 	bl	800083c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4614      	mov	r4, r2
 800121c:	461d      	mov	r5, r3
 800121e:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <BMP280CalibData+0x324>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f966 	bl	80004f4 <__aeabi_ui2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <BMP280CalibData+0x35c>)
 800122e:	f7ff fb05 	bl	800083c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f81d 	bl	8000278 <__aeabi_dsub>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001248:	f7ff f954 	bl	80004f4 <__aeabi_ui2d>
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001254:	f7ff faf2 	bl	800083c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4690      	mov	r8, r2
 800125e:	4699      	mov	r9, r3
 8001260:	4b48      	ldr	r3, [pc, #288]	@ (8001384 <BMP280CalibData+0x324>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f945 	bl	80004f4 <__aeabi_ui2d>
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b53      	ldr	r3, [pc, #332]	@ (80013bc <BMP280CalibData+0x35c>)
 8001270:	f7ff fae4 	bl	800083c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4640      	mov	r0, r8
 800127a:	4649      	mov	r1, r9
 800127c:	f7fe fffc 	bl	8000278 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff f9ae 	bl	80005e8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <BMP280CalibData+0x32c>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f93a 	bl	8000514 <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4620      	mov	r0, r4
 80012a6:	4629      	mov	r1, r5
 80012a8:	f7ff f99e 	bl	80005e8 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	t_fine 	   = (int)(var1+ var2);
 80012b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012bc:	f7fe ffde 	bl	800027c <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc3e 	bl	8000b48 <__aeabi_d2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
	T1    	   = ((var1 + var2)/5120.0);
 80012d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012d8:	f7fe ffd0 	bl	800027c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <BMP280CalibData+0x360>)
 80012ea:	f7ff faa7 	bl	800083c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	Handle->data_T = T1;
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012fc:	e9c1 2304 	strd	r2, r3, [r1, #16]



	var1 = (((double)t_fine/2.0) - 64000.0);
 8001300:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001302:	f7ff f907 	bl	8000514 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800130e:	f7ff fa95 	bl	800083c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <BMP280CalibData+0x364>)
 8001320:	f7fe ffaa 	bl	8000278 <__aeabi_dsub>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var2 = (var1 * var1 * ((double)dig_P6) / 32768.0);
 800132c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001330:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001334:	f7ff f958 	bl	80005e8 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4614      	mov	r4, r2
 800133e:	461d      	mov	r5, r3
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <BMP280CalibData+0x344>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8e4 	bl	8000514 <__aeabi_i2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff f948 	bl	80005e8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <BMP280CalibData+0x368>)
 8001366:	f7ff fa69 	bl	800083c <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = (var2 + var1 * ((double)dig_P5) * 2.0);
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <BMP280CalibData+0x340>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8cb 	bl	8000514 <__aeabi_i2d>
 800137e:	e025      	b.n	80013cc <BMP280CalibData+0x36c>
 8001380:	200003e8 	.word	0x200003e8
 8001384:	20000204 	.word	0x20000204
 8001388:	20000206 	.word	0x20000206
 800138c:	20000208 	.word	0x20000208
 8001390:	2000020a 	.word	0x2000020a
 8001394:	2000020c 	.word	0x2000020c
 8001398:	2000020e 	.word	0x2000020e
 800139c:	20000210 	.word	0x20000210
 80013a0:	20000212 	.word	0x20000212
 80013a4:	20000214 	.word	0x20000214
 80013a8:	20000216 	.word	0x20000216
 80013ac:	20000218 	.word	0x20000218
 80013b0:	2000021a 	.word	0x2000021a
 80013b4:	40d00000 	.word	0x40d00000
 80013b8:	40900000 	.word	0x40900000
 80013bc:	40c00000 	.word	0x40c00000
 80013c0:	40b40000 	.word	0x40b40000
 80013c4:	40ef4000 	.word	0x40ef4000
 80013c8:	40e00000 	.word	0x40e00000
 80013cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80013d0:	f7ff f90a 	bl	80005e8 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f7fe ff4c 	bl	800027c <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ec:	f7fe ff46 	bl	800027c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = (var2/4.0) + (((double)dig_P4) * 65536.0);
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4ba8      	ldr	r3, [pc, #672]	@ (80016a0 <BMP280CalibData+0x640>)
 80013fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001402:	f7ff fa1b 	bl	800083c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4ba5      	ldr	r3, [pc, #660]	@ (80016a4 <BMP280CalibData+0x644>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f87d 	bl	8000514 <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4ba2      	ldr	r3, [pc, #648]	@ (80016a8 <BMP280CalibData+0x648>)
 8001420:	f7ff f8e2 	bl	80005e8 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe ff26 	bl	800027c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var1 = ((((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1)/524288.0);
 8001438:	4b9c      	ldr	r3, [pc, #624]	@ (80016ac <BMP280CalibData+0x64c>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f868 	bl	8000514 <__aeabi_i2d>
 8001444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001448:	f7ff f8ce 	bl	80005e8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001458:	f7ff f8c6 	bl	80005e8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b91      	ldr	r3, [pc, #580]	@ (80016b0 <BMP280CalibData+0x650>)
 800146a:	f7ff f9e7 	bl	800083c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4614      	mov	r4, r2
 8001474:	461d      	mov	r5, r3
 8001476:	4b8f      	ldr	r3, [pc, #572]	@ (80016b4 <BMP280CalibData+0x654>)
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f849 	bl	8000514 <__aeabi_i2d>
 8001482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001486:	f7ff f8af 	bl	80005e8 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7fe fef3 	bl	800027c <__adddf3>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b83      	ldr	r3, [pc, #524]	@ (80016b0 <BMP280CalibData+0x650>)
 80014a4:	f7ff f9ca 	bl	800083c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var1 = (1.0 + var1/32768.0) * ((double)dig_P1);
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b80      	ldr	r3, [pc, #512]	@ (80016b8 <BMP280CalibData+0x658>)
 80014b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014ba:	f7ff f9bf 	bl	800083c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <BMP280CalibData+0x65c>)
 80014cc:	f7fe fed6 	bl	800027c <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	461d      	mov	r5, r3
 80014d8:	4b79      	ldr	r3, [pc, #484]	@ (80016c0 <BMP280CalibData+0x660>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f809 	bl	80004f4 <__aeabi_ui2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7ff f87d 	bl	80005e8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	P1   = (1048576.0 - (double)adc_P);
 80014f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80014f8:	f7fe fffc 	bl	80004f4 <__aeabi_ui2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	f04f 0000 	mov.w	r0, #0
 8001504:	496f      	ldr	r1, [pc, #444]	@ (80016c4 <BMP280CalibData+0x664>)
 8001506:	f7fe feb7 	bl	8000278 <__aeabi_dsub>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	P1   = ((P1 - (var2/4096)) * 6250.0/var1);
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b6c      	ldr	r3, [pc, #432]	@ (80016c8 <BMP280CalibData+0x668>)
 8001518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800151c:	f7ff f98e 	bl	800083c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001528:	f7fe fea6 	bl	8000278 <__aeabi_dsub>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	a352      	add	r3, pc, #328	@ (adr r3, 8001680 <BMP280CalibData+0x620>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f855 	bl	80005e8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800154a:	f7ff f977 	bl	800083c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	var1 = (((double)dig_P9) * P1 * P1/2147483648.0);
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <BMP280CalibData+0x66c>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffd9 	bl	8000514 <__aeabi_i2d>
 8001562:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001566:	f7ff f83f 	bl	80005e8 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001576:	f7ff f837 	bl	80005e8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b52      	ldr	r3, [pc, #328]	@ (80016d0 <BMP280CalibData+0x670>)
 8001588:	f7ff f958 	bl	800083c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var2 = (P1 * ((double)dig_P8)/32768.0);
 8001594:	4b4f      	ldr	r3, [pc, #316]	@ (80016d4 <BMP280CalibData+0x674>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffba 	bl	8000514 <__aeabi_i2d>
 80015a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015a4:	f7ff f820 	bl	80005e8 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b40      	ldr	r3, [pc, #256]	@ (80016b8 <BMP280CalibData+0x658>)
 80015b6:	f7ff f941 	bl	800083c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c7 2308 	strd	r2, r3, [r7, #32]
	P1   = (P1 + (var1 + var2 + ((double)dig_P7)) / 16.0);
 80015c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80015ca:	f7fe fe57 	bl	800027c <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <BMP280CalibData+0x678>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff99 	bl	8000514 <__aeabi_i2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fe47 	bl	800027c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <BMP280CalibData+0x67c>)
 80015fc:	f7ff f91e 	bl	800083c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001608:	f7fe fe38 	bl	800027c <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	Handle->data_P = P1;
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800161a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Handle->altitude = (double)(44330 * (1 - pow(Handle->data_P / 101325.0 , (float)1.0/5.255)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001624:	a318      	add	r3, pc, #96	@ (adr r3, 8001688 <BMP280CalibData+0x628>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f907 	bl	800083c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b17 	vmov	d7, r2, r3
 8001636:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001690 <BMP280CalibData+0x630>
 800163a:	eeb0 0a47 	vmov.f32	s0, s14
 800163e:	eef0 0a67 	vmov.f32	s1, s15
 8001642:	f008 ff13 	bl	800a46c <pow>
 8001646:	ec53 2b10 	vmov	r2, r3, d0
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	491b      	ldr	r1, [pc, #108]	@ (80016bc <BMP280CalibData+0x65c>)
 8001650:	f7fe fe12 	bl	8000278 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001698 <BMP280CalibData+0x638>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe ffc1 	bl	80005e8 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8001670:	bf00      	nop
 8001672:	3750      	adds	r7, #80	@ 0x50
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	40b86a00 	.word	0x40b86a00
 8001688:	00000000 	.word	0x00000000
 800168c:	40f8bcd0 	.word	0x40f8bcd0
 8001690:	ccd9456c 	.word	0xccd9456c
 8001694:	3fc85b95 	.word	0x3fc85b95
 8001698:	00000000 	.word	0x00000000
 800169c:	40e5a540 	.word	0x40e5a540
 80016a0:	40100000 	.word	0x40100000
 80016a4:	20000210 	.word	0x20000210
 80016a8:	40f00000 	.word	0x40f00000
 80016ac:	2000020e 	.word	0x2000020e
 80016b0:	41200000 	.word	0x41200000
 80016b4:	2000020c 	.word	0x2000020c
 80016b8:	40e00000 	.word	0x40e00000
 80016bc:	3ff00000 	.word	0x3ff00000
 80016c0:	2000020a 	.word	0x2000020a
 80016c4:	41300000 	.word	0x41300000
 80016c8:	40b00000 	.word	0x40b00000
 80016cc:	2000021a 	.word	0x2000021a
 80016d0:	41e00000 	.word	0x41e00000
 80016d4:	20000218 	.word	0x20000218
 80016d8:	20000216 	.word	0x20000216
 80016dc:	40300000 	.word	0x40300000

080016e0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

void USART2_IRQHandler();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <HAL_UART_RxCpltCallback+0x20>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_UART_RxCpltCallback+0x16>
	{
		p();
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_UART_RxCpltCallback+0x24>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4798      	blx	r3
	}

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000043c 	.word	0x2000043c
 8001704:	200003e4 	.word	0x200003e4

08001708 <HAL_I2C_MemRxCpltCallback>:

void I2C1_EV_IRQHandler();

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_I2C_MemRxCpltCallback+0x16>
	{
		p();
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <HAL_I2C_MemRxCpltCallback+0x24>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4798      	blx	r3
	}
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200003e8 	.word	0x200003e8
 800172c:	200003e4 	.word	0x200003e4

08001730 <bmp>:
/**************BMP**********************/
void bmp(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	p = mpu;
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <bmp+0x24>)
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <bmp+0x28>)
 8001738:	601a      	str	r2, [r3, #0]
	state = 'M';
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <bmp+0x2c>)
 800173c:	224d      	movs	r2, #77	@ 0x4d
 800173e:	701a      	strb	r2, [r3, #0]
	BMP280CalculateData(&Handle);
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <bmp+0x30>)
 8001742:	f7ff fc53 	bl	8000fec <BMP280CalculateData>
	BMP280CalibData(&Handle);
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <bmp+0x30>)
 8001748:	f7ff fc8a 	bl	8001060 <BMP280CalibData>
	helper();
 800174c:	f000 f866 	bl	800181c <helper>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200003e4 	.word	0x200003e4
 8001758:	08001765 	.word	0x08001765
 800175c:	20000000 	.word	0x20000000
 8001760:	20000220 	.word	0x20000220

08001764 <mpu>:
/**************MPU**********************/
void mpu(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	p = gps;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <mpu+0x20>)
 800176a:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <mpu+0x24>)
 800176c:	601a      	str	r2, [r3, #0]
	state = 'G';
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <mpu+0x28>)
 8001770:	2247      	movs	r2, #71	@ 0x47
 8001772:	701a      	strb	r2, [r3, #0]
	MPUGenerateData(&MPUHandle, data);
 8001774:	4906      	ldr	r1, [pc, #24]	@ (8001790 <mpu+0x2c>)
 8001776:	4807      	ldr	r0, [pc, #28]	@ (8001794 <mpu+0x30>)
 8001778:	f005 ffd6 	bl	8007728 <MPUGenerateData>
	helper();
 800177c:	f000 f84e 	bl	800181c <helper>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200003e4 	.word	0x200003e4
 8001788:	08001799 	.word	0x08001799
 800178c:	20000000 	.word	0x20000000
 8001790:	200003d4 	.word	0x200003d4
 8001794:	20000248 	.word	0x20000248

08001798 <gps>:

void gps(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

	if(rx_data != "\n" && (rx_index < sizeof(rxBuffer)))
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <gps+0x64>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <gps+0x68>)
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d010      	beq.n	80017ca <gps+0x32>
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <gps+0x6c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <gps+0x32>
	{
		rxBuffer[rx_index++] = rx_data;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <gps+0x6c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	b2d1      	uxtb	r1, r2
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <gps+0x6c>)
 80017bc:	7011      	strb	r1, [r2, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <gps+0x64>)
 80017c2:	7819      	ldrb	r1, [r3, #0]
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <gps+0x70>)
 80017c6:	5499      	strb	r1, [r3, r2]
 80017c8:	e013      	b.n	80017f2 <gps+0x5a>

	}
	else
	{
		lwgps_process(&gh, rxBuffer, rx_index+1);
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <gps+0x6c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	461a      	mov	r2, r3
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <gps+0x70>)
 80017d4:	480d      	ldr	r0, [pc, #52]	@ (800180c <gps+0x74>)
 80017d6:	f005 fe19 	bl	800740c <lwgps_process>
		rx_index = 0;
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <gps+0x6c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <gps+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]

		p = bmp;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <gps+0x78>)
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <gps+0x7c>)
 80017ea:	601a      	str	r2, [r3, #0]
		state = 'B';
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <gps+0x80>)
 80017ee:	2242      	movs	r2, #66	@ 0x42
 80017f0:	701a      	strb	r2, [r3, #0]

	}

	helper();
 80017f2:	f000 f813 	bl	800181c <helper>

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200003c8 	.word	0x200003c8
 8001800:	0800b340 	.word	0x0800b340
 8001804:	200003c9 	.word	0x200003c9
 8001808:	20000348 	.word	0x20000348
 800180c:	20000298 	.word	0x20000298
 8001810:	200003e4 	.word	0x200003e4
 8001814:	08001731 	.word	0x08001731
 8001818:	20000000 	.word	0x20000000

0800181c <helper>:

void helper(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af02      	add	r7, sp, #8
	if(state == 'B')
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <helper+0x5c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b42      	cmp	r3, #66	@ 0x42
 8001828:	d10a      	bne.n	8001840 <helper+0x24>
	{
		HAL_I2C_Mem_Read_IT(&hi2c1, dev_addr, 0xF7,  1, rawData, 6);
 800182a:	2306      	movs	r3, #6
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <helper+0x60>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	22f7      	movs	r2, #247	@ 0xf7
 8001836:	21ec      	movs	r1, #236	@ 0xec
 8001838:	4811      	ldr	r0, [pc, #68]	@ (8001880 <helper+0x64>)
 800183a:	f001 fbf5 	bl	8003028 <HAL_I2C_Mem_Read_IT>
	}
	else if(state == 'G')
	{
		HAL_UART_Receive_IT(&huart2,&rx_data,1);
	}
}
 800183e:	e017      	b.n	8001870 <helper+0x54>
	else if(state == 'M')
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <helper+0x5c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b4d      	cmp	r3, #77	@ 0x4d
 8001846:	d10a      	bne.n	800185e <helper+0x42>
		HAL_I2C_Mem_Read_IT(&hi2c1, (dev_addr_AD0), 0x3B, 1, data, 14);
 8001848:	230e      	movs	r3, #14
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <helper+0x68>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	223b      	movs	r2, #59	@ 0x3b
 8001854:	21d0      	movs	r1, #208	@ 0xd0
 8001856:	480a      	ldr	r0, [pc, #40]	@ (8001880 <helper+0x64>)
 8001858:	f001 fbe6 	bl	8003028 <HAL_I2C_Mem_Read_IT>
}
 800185c:	e008      	b.n	8001870 <helper+0x54>
	else if(state == 'G')
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <helper+0x5c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b47      	cmp	r3, #71	@ 0x47
 8001864:	d104      	bne.n	8001870 <helper+0x54>
		HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8001866:	2201      	movs	r2, #1
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <helper+0x6c>)
 800186a:	4808      	ldr	r0, [pc, #32]	@ (800188c <helper+0x70>)
 800186c:	f004 f9fc 	bl	8005c68 <HAL_UART_Receive_IT>
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000000 	.word	0x20000000
 800187c:	200003cc 	.word	0x200003cc
 8001880:	200003e8 	.word	0x200003e8
 8001884:	200003d4 	.word	0x200003d4
 8001888:	200003c8 	.word	0x200003c8
 800188c:	2000043c 	.word	0x2000043c

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001894:	f000 fb82 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001898:	f000 f83e 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189c:	f000 f8fe 	bl	8001a9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80018a0:	f000 f8a4 	bl	80019ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80018a4:	f000 f8d0 	bl	8001a48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  while(BMP280Init(normal, oversampling_t_2, oversampling_p_8, t_sb_1000));			//BMP initialize
 80018a8:	bf00      	nop
 80018aa:	2305      	movs	r3, #5
 80018ac:	2204      	movs	r2, #4
 80018ae:	2102      	movs	r1, #2
 80018b0:	2003      	movs	r0, #3
 80018b2:	f7ff fb3f 	bl	8000f34 <BMP280Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f6      	bne.n	80018aa <main+0x1a>
  while(MPU_Initialize());															//MPU initialize
 80018bc:	bf00      	nop
 80018be:	f000 f923 	bl	8001b08 <MPU_Initialize>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1fa      	bne.n	80018be <main+0x2e>
  lwgps_init(&gh);																	//GPS initialize
 80018c8:	480e      	ldr	r0, [pc, #56]	@ (8001904 <main+0x74>)
 80018ca:	f005 fd91 	bl	80073f0 <lwgps_init>
  Handle.rawData = rawData;															//for BMP sensor
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <main+0x78>)
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <main+0x7c>)
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

  p = bmp;																		//function pointer
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <main+0x80>)
 80018d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001914 <main+0x84>)
 80018d8:	601a      	str	r2, [r3, #0]

  HAL_NVIC_SetPriority(	USART2_IRQn, 0, 2);
 80018da:	2202      	movs	r2, #2
 80018dc:	2100      	movs	r1, #0
 80018de:	2026      	movs	r0, #38	@ 0x26
 80018e0:	f000 fca9 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018e4:	2026      	movs	r0, #38	@ 0x26
 80018e6:	f000 fcc2 	bl	800226e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2100      	movs	r1, #0
 80018ee:	201f      	movs	r0, #31
 80018f0:	f000 fca1 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018f4:	201f      	movs	r0, #31
 80018f6:	f000 fcba 	bl	800226e <HAL_NVIC_EnableIRQ>

  helper();																			//to receive data
 80018fa:	f7ff ff8f 	bl	800181c <helper>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018fe:	bf00      	nop
 8001900:	e7fd      	b.n	80018fe <main+0x6e>
 8001902:	bf00      	nop
 8001904:	20000298 	.word	0x20000298
 8001908:	20000220 	.word	0x20000220
 800190c:	200003cc 	.word	0x200003cc
 8001910:	200003e4 	.word	0x200003e4
 8001914:	08001731 	.word	0x08001731

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	2230      	movs	r2, #48	@ 0x30
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f006 febb 	bl	80086a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <SystemClock_Config+0xcc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a27      	ldr	r2, [pc, #156]	@ (80019e4 <SystemClock_Config+0xcc>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <SystemClock_Config+0xd0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <SystemClock_Config+0xd0>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001974:	2301      	movs	r3, #1
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001988:	2308      	movs	r3, #8
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800198c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001992:	2302      	movs	r3, #2
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001996:	2307      	movs	r3, #7
 8001998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fc7a 	bl	8005298 <HAL_RCC_OscConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019aa:	f000 f8d1 	bl	8001b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	230f      	movs	r3, #15
 80019b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2105      	movs	r1, #5
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fedb 	bl	8005788 <HAL_RCC_ClockConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019d8:	f000 f8ba 	bl	8001b50 <Error_Handler>
  }
}
 80019dc:	bf00      	nop
 80019de:	3750      	adds	r7, #80	@ 0x50
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000

080019ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <MX_I2C1_Init+0x54>)
 80019f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <MX_I2C1_Init+0x58>)
 80019fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a2a:	f000 fe77 	bl	800271c <HAL_I2C_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a34:	f000 f88c 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200003e8 	.word	0x200003e8
 8001a40:	40005400 	.word	0x40005400
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f004 f8a2 	bl	8005bc8 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f861 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000043c 	.word	0x2000043c
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_GPIO_Init+0x68>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800

08001b08 <MPU_Initialize>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef MPU_Initialize(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b096      	sub	sp, #88	@ 0x58
 8001b0c:	af00      	add	r7, sp, #0
	uint8_t status;
	MPUHandleTypedef_t MPUHandle = {0};
 8001b0e:	463b      	mov	r3, r7
 8001b10:	2250      	movs	r2, #80	@ 0x50
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f006 fdc4 	bl	80086a2 <memset>

	MPUHandle.Sleep = Awake;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	MPUHandle.AFS_SEL_Acc = AFS_SEL_4;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	MPUHandle.FS_SEL_Gyro = FS_SEL_1000;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

	status = MPUInitialize(&MPUHandle);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 fd5e 	bl	80075f0 <MPUInitialize>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if(HAL_OK == status){
 8001b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <MPU_Initialize+0x3e>
		return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <MPU_Initialize+0x40>
	}
	else{
		return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
	}
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3758      	adds	r7, #88	@ 0x58
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <Error_Handler+0x8>

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b9a:	2007      	movs	r0, #7
 8001b9c:	f000 fb40 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_I2C_MspInit+0xa4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d13b      	bne.n	8001c46 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bea:	23c0      	movs	r3, #192	@ 0xc0
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <HAL_I2C_MspInit+0xac>)
 8001c06:	f000 fbed 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_I2C_MspInit+0xa8>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201f      	movs	r0, #31
 8001c2c:	f000 fb03 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c30:	201f      	movs	r0, #31
 8001c32:	f000 fb1c 	bl	800226e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2020      	movs	r0, #32
 8001c3c:	f000 fafb 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c40:	2020      	movs	r0, #32
 8001c42:	f000 fb14 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_UART_MspInit+0x94>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d133      	bne.n	8001ce6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_UART_MspInit+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001cd2:	f000 fb87 	bl	80023e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2026      	movs	r0, #38	@ 0x26
 8001cdc:	f000 faab 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce0:	2026      	movs	r0, #38	@ 0x26
 8001ce2:	f000 fac4 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f000 f975 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <I2C1_EV_IRQHandler+0x10>)
 8001d62:	f001 fa1b 	bl	800319c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003e8 	.word	0x200003e8

08001d70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <I2C1_ER_IRQHandler+0x10>)
 8001d76:	f001 fb64 	bl	8003442 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200003e8 	.word	0x200003e8

08001d84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <USART2_IRQHandler+0x10>)
 8001d8a:	f003 ff93 	bl	8005cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000043c 	.word	0x2000043c

08001d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_kill>:

int _kill(int pid, int sig)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db2:	f006 fcd7 	bl	8008764 <__errno>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2216      	movs	r2, #22
 8001dba:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_exit>:

void _exit (int status)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ffe7 	bl	8001da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <_exit+0x12>

08001dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e00a      	b.n	8001e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df0:	f3af 8000 	nop.w
 8001df4:	4601      	mov	r1, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf0      	blt.n	8001df0 <_read+0x12>
  }

  return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e009      	b.n	8001e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbf1      	blt.n	8001e2a <_write+0x12>
  }
  return len;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_close>:

int _close(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f006 fc3c 	bl	8008764 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20020000 	.word	0x20020000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	20000484 	.word	0x20000484
 8001f20:	200005d8 	.word	0x200005d8

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f4c:	f7ff ffea 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f52:	490d      	ldr	r1, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f68:	4c0a      	ldr	r4, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f76:	f006 fbfb 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7a:	f7ff fc89 	bl	8001890 <main>
  bx  lr    
 8001f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001f8c:	0800b798 	.word	0x0800b798
  ldr r2, =_sbss
 8001f90:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001f94:	200005d8 	.word	0x200005d8

08001f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <HAL_Init+0x40>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_Init+0x40>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x40>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f92b 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fdc4 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f943 	bl	800228a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f90b 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000004 	.word	0x20000004
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c
 8002064:	20000488 	.word	0x20000488

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000488 	.word	0x20000488

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	@ (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff feda 	bl	8002068 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2280      	movs	r2, #128	@ 0x80
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e052      	b.n	800237a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0216 	bic.w	r2, r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <HAL_DMA_Abort+0x62>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0208 	bic.w	r2, r2, #8
 8002312:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002324:	e013      	b.n	800234e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002326:	f7ff fe9f 	bl	8002068 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b05      	cmp	r3, #5
 8002332:	d90c      	bls.n	800234e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e015      	b.n	800237a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e4      	bne.n	8002326 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	223f      	movs	r2, #63	@ 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d004      	beq.n	80023a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2280      	movs	r2, #128	@ 0x80
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e00c      	b.n	80023ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d4:	b2db      	uxtb	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e16b      	b.n	80026d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 815a 	bne.w	80026d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80b4 	beq.w	80026d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b60      	ldr	r3, [pc, #384]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	4a5f      	ldr	r2, [pc, #380]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002578:	6453      	str	r3, [r2, #68]	@ 0x44
 800257a:	4b5d      	ldr	r3, [pc, #372]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_GPIO_Init+0x310>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_GPIO_Init+0x314>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a51      	ldr	r2, [pc, #324]	@ (80026fc <HAL_GPIO_Init+0x318>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x31c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002704 <HAL_GPIO_Init+0x320>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x21a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002708 <HAL_GPIO_Init+0x324>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x216>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_GPIO_Init+0x328>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x212>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_GPIO_Init+0x32c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002714 <HAL_GPIO_Init+0x330>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x20a>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x228>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_GPIO_Init+0x310>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_GPIO_Init+0x334>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a32      	ldr	r2, [pc, #200]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <HAL_GPIO_Init+0x334>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae90 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021c00 	.word	0x40021c00
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e12b      	b.n	8002986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fa32 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f003 f9fa 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a81      	ldr	r2, [pc, #516]	@ (8002990 <HAL_I2C_Init+0x274>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a80      	ldr	r2, [pc, #512]	@ (8002994 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <HAL_I2C_Init+0x27c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e7      	b.n	8002986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a78      	ldr	r2, [pc, #480]	@ (800299c <HAL_I2C_Init+0x280>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_I2C_Init+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a69      	ldr	r2, [pc, #420]	@ (80029a0 <HAL_I2C_Init+0x284>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	495c      	ldr	r1, [pc, #368]	@ (8002990 <HAL_I2C_Init+0x274>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d819      	bhi.n	8002858 <HAL_I2C_Init+0x13c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002838:	400b      	ands	r3, r1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_I2C_Init+0x138>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	e051      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002854:	2304      	movs	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x168>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x18e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x196>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b80      	cmp	r3, #128	@ 0x80
 80029b8:	d103      	bne.n	80029c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ea:	f7ff fb3d 	bl	8002068 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 80d9 	bne.w	8002bb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2319      	movs	r3, #25
 8002a04:	2201      	movs	r2, #1
 8002a06:	496d      	ldr	r1, [pc, #436]	@ (8002bbc <HAL_I2C_Mem_Write+0x1ec>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f002 f9c1 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0cc      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Write+0x56>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0c5      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	@ 0x21
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f001 ff50 	bl	8004944 <I2C_RequestMemoryWrite>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d052      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e081      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f002 fa86 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d11b      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x180>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1aa      	bne.n	8002aae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f002 fa79 	bl	8005054 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d107      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e016      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	00100002 	.word	0x00100002
 8002bc0:	ffff0000 	.word	0xffff0000

08002bc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	@ 0x30
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	813b      	strh	r3, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bde:	f7ff fa43 	bl	8002068 <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	f040 8214 	bne.w	800301a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2319      	movs	r3, #25
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	497b      	ldr	r1, [pc, #492]	@ (8002de8 <HAL_I2C_Mem_Read+0x224>)
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f002 f8c7 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e207      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_Mem_Read+0x56>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e200      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d007      	beq.n	8002c40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2222      	movs	r2, #34	@ 0x22
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2240      	movs	r2, #64	@ 0x40
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dec <HAL_I2C_Mem_Read+0x228>)
 8002c80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c82:	88f8      	ldrh	r0, [r7, #6]
 8002c84:	893a      	ldrh	r2, [r7, #8]
 8002c86:	8979      	ldrh	r1, [r7, #10]
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4603      	mov	r3, r0
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f001 feec 	bl	8004a70 <I2C_RequestMemoryRead>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1bc      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d113      	bne.n	8002cd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e190      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11b      	bne.n	8002d12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e170      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d11b      	bne.n	8002d52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	e150      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d68:	e144      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	f200 80f1 	bhi.w	8002f56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d123      	bne.n	8002dc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f002 f9e1 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e145      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dc2:	e117      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d14e      	bne.n	8002e6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4906      	ldr	r1, [pc, #24]	@ (8002df0 <HAL_I2C_Mem_Read+0x22c>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 ffda 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e11a      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
 8002de6:	bf00      	nop
 8002de8:	00100002 	.word	0x00100002
 8002dec:	ffff0000 	.word	0xffff0000
 8002df0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e68:	e0c4      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2200      	movs	r2, #0
 8002e72:	496c      	ldr	r1, [pc, #432]	@ (8003024 <HAL_I2C_Mem_Read+0x460>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f001 ff8b 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0cb      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4955      	ldr	r1, [pc, #340]	@ (8003024 <HAL_I2C_Mem_Read+0x460>)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f001 ff5d 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e09d      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f54:	e04e      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f002 f8f4 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e058      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d124      	bne.n	8002ff4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f aeb6 	bne.w	8002d6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	@ 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	00010004 	.word	0x00010004

08003028 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 8096 	bne.w	8003180 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003054:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <HAL_I2C_Mem_Read_IT+0x168>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	4a4e      	ldr	r2, [pc, #312]	@ (8003194 <HAL_I2C_Mem_Read_IT+0x16c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0a1a      	lsrs	r2, r3, #8
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009a      	lsls	r2, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3b01      	subs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d112      	bne.n	80030a0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	e070      	b.n	8003182 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d0df      	beq.n	800306e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_I2C_Mem_Read_IT+0x94>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e062      	b.n	8003182 <HAL_I2C_Mem_Read_IT+0x15a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d007      	beq.n	80030e2 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2222      	movs	r2, #34	@ 0x22
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_I2C_Mem_Read_IT+0x170>)
 8003122:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003124:	897a      	ldrh	r2, [r7, #10]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800312a:	893a      	ldrh	r2, [r7, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800314a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800317a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000004 	.word	0x20000004
 8003194:	14f8b589 	.word	0x14f8b589
 8003198:	ffff0000 	.word	0xffff0000

0800319c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d003      	beq.n	80031d4 <HAL_I2C_EV_IRQHandler+0x38>
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	f040 80b1 	bne.w	8003336 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_I2C_EV_IRQHandler+0x6e>
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80031f4:	d003      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x62>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_EV_IRQHandler+0x66>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x68>
 8003202:	2300      	movs	r3, #0
 8003204:	2b01      	cmp	r3, #1
 8003206:	f000 8114 	beq.w	8003432 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x90>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f002 f81e 	bl	8005260 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fd70 	bl	8003d0a <I2C_Master_SB>
 800322a:	e083      	b.n	8003334 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0xac>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fde8 	bl	8003e16 <I2C_Master_ADD10>
 8003246:	e075      	b.n	8003334 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0xc8>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fe04 	bl	8003e6a <I2C_Master_ADDR>
 8003262:	e067      	b.n	8003334 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327c:	f000 80db 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9cc 	bl	800363c <I2C_MasterTransmit_TXE>
 80032a4:	e046      	b.n	8003334 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80c2 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80bc 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b21      	cmp	r3, #33	@ 0x21
 80032c2:	d103      	bne.n	80032cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa55 	bl	8003774 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	e0b4      	b.n	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	f040 80b1 	bne.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fac3 	bl	8003860 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032da:	e0ac      	b.n	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ea:	f000 80a4 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x178>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x178>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d103      	bne.n	8003314 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb3f 	bl	8003990 <I2C_MasterReceive_RXNE>
 8003312:	e00f      	b.n	8003334 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 808b 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8085 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fbf7 	bl	8003b20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003332:	e080      	b.n	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
 8003334:	e07f      	b.n	8003436 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e007      	b.n	8003358 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d011      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 ffc2 	bl	8004308 <I2C_Slave_ADDR>
 8003384:	e05a      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x206>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fffc 	bl	8004398 <I2C_Slave_STOPF>
 80033a0:	e04c      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033a2:	7bbb      	ldrb	r3, [r7, #14]
 80033a4:	2b21      	cmp	r3, #33	@ 0x21
 80033a6:	d002      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x212>
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	2b29      	cmp	r3, #41	@ 0x29
 80033ac:	d120      	bne.n	80033f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_EV_IRQHandler+0x238>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_I2C_EV_IRQHandler+0x238>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fedd 	bl	800418c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d2:	e032      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02d      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x29e>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d028      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 ff0c 	bl	8004206 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ee:	e024      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x27a>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x27a>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 ff1a 	bl	8004248 <I2C_SlaveReceive_RXNE>
 8003414:	e012      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 ff4a 	bl	80042c4 <I2C_SlaveReceive_BTF>
 8003430:	e004      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003432:	bf00      	nop
 8003434:	e002      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b08a      	sub	sp, #40	@ 0x28
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003464:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <HAL_I2C_ER_IRQHandler+0x4a>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800348a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <HAL_I2C_ER_IRQHandler+0x70>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80034b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03e      	beq.n	800353a <HAL_I2C_ER_IRQHandler+0xf8>
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d039      	beq.n	800353a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80034c6:	7efb      	ldrb	r3, [r7, #27]
 80034c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034e0:	7ebb      	ldrb	r3, [r7, #26]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d112      	bne.n	800350c <HAL_I2C_ER_IRQHandler+0xca>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <HAL_I2C_ER_IRQHandler+0xca>
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	2b21      	cmp	r3, #33	@ 0x21
 80034f0:	d008      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b29      	cmp	r3, #41	@ 0x29
 80034f6:	d005      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0xc2>
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b28      	cmp	r3, #40	@ 0x28
 80034fc:	d106      	bne.n	800350c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b21      	cmp	r3, #33	@ 0x21
 8003502:	d103      	bne.n	800350c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 f877 	bl	80045f8 <I2C_Slave_AF>
 800350a:	e016      	b.n	800353a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003514:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800351e:	7efb      	ldrb	r3, [r7, #27]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d002      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0xe8>
 8003524:	7efb      	ldrb	r3, [r7, #27]
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d107      	bne.n	800353a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003538:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x11e>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	f043 0308 	orr.w	r3, r3, #8
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800355e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f001 f8b4 	bl	80046e0 <I2C_ITError>
  }
}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003652:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d150      	bne.n	8003704 <I2C_MasterTransmit_TXE+0xc8>
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b21      	cmp	r3, #33	@ 0x21
 8003666:	d14d      	bne.n	8003704 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d01d      	beq.n	80036aa <I2C_MasterTransmit_TXE+0x6e>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b20      	cmp	r3, #32
 8003672:	d01a      	beq.n	80036aa <I2C_MasterTransmit_TXE+0x6e>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800367a:	d016      	beq.n	80036aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800368a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2211      	movs	r2, #17
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff6c 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036a8:	e060      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d107      	bne.n	80036f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff87 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f2:	e03b      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff3f 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003702:	e033      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b21      	cmp	r3, #33	@ 0x21
 8003708:	d005      	beq.n	8003716 <I2C_MasterTransmit_TXE+0xda>
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	2b40      	cmp	r3, #64	@ 0x40
 800370e:	d12d      	bne.n	800376c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b22      	cmp	r3, #34	@ 0x22
 8003714:	d12a      	bne.n	800376c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003730:	e01c      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b40      	cmp	r3, #64	@ 0x40
 800373c:	d103      	bne.n	8003746 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f88e 	bl	8003860 <I2C_MemoryTransmit_TXE_BTF>
}
 8003744:	e012      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800376a:	e7ff      	b.n	800376c <I2C_MasterTransmit_TXE+0x130>
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b21      	cmp	r3, #33	@ 0x21
 800378c:	d164      	bne.n	8003858 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037bc:	e04c      	b.n	8003858 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d01d      	beq.n	8003800 <I2C_MasterTransmit_BTF+0x8c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d01a      	beq.n	8003800 <I2C_MasterTransmit_BTF+0x8c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037d0:	d016      	beq.n	8003800 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2211      	movs	r2, #17
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fec1 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
}
 80037fe:	e02b      	b.n	8003858 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800380e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d107      	bne.n	800384a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fedc 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
}
 8003848:	e006      	b.n	8003858 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fe94 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11d      	bne.n	80038b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10b      	bne.n	8003898 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003884:	b2da      	uxtb	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003896:	e077      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389c:	b29b      	uxth	r3, r3
 800389e:	121b      	asrs	r3, r3, #8
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038b2:	e069      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10b      	bne.n	80038d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038d2:	e059      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d152      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b22      	cmp	r3, #34	@ 0x22
 80038e0:	d10d      	bne.n	80038fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038fc:	e044      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b21      	cmp	r3, #33	@ 0x21
 800390c:	d112      	bne.n	8003934 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003932:	e029      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d124      	bne.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b21      	cmp	r3, #33	@ 0x21
 8003942:	d121      	bne.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003952:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003962:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe40 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
}
 8003980:	e002      	b.n	8003988 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f80e 	bl	80029a4 <I2C_Flush_DR>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b22      	cmp	r3, #34	@ 0x22
 80039a2:	f040 80b9 	bne.w	8003b18 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d921      	bls.n	80039fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	f040 8096 	bne.w	8003b18 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80039fc:	e08c      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d07f      	beq.n	8003b06 <I2C_MasterReceive_RXNE+0x176>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <I2C_MasterReceive_RXNE+0x82>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d179      	bne.n	8003b06 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f001 fb66 	bl	80050e4 <I2C_WaitOnSTOPRequestThroughIT>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d14c      	bne.n	8003ab8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	d10a      	bne.n	8003a8e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fe3e 	bl	8001708 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a8c:	e044      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d002      	beq.n	8003aa2 <I2C_MasterReceive_RXNE+0x112>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d103      	bne.n	8003aaa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aa8:	e002      	b.n	8003ab0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2212      	movs	r2, #18
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fd6f 	bl	8003594 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ab6:	e02f      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ac6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fd88 	bl	8003614 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b04:	e008      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b14:	605a      	str	r2, [r3, #4]
}
 8003b16:	e7ff      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x188>
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b6e:	e0c8      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d129      	bne.n	8003bce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00a      	beq.n	8003ba6 <I2C_MasterReceive_BTF+0x86>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d007      	beq.n	8003ba6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bcc:	e099      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	f040 8081 	bne.w	8003cdc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <I2C_MasterReceive_BTF+0xc6>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d108      	bne.n	8003bf8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e019      	b.n	8003c2c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d002      	beq.n	8003c04 <I2C_MasterReceive_BTF+0xe4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d108      	bne.n	8003c16 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e00a      	b.n	8003c2c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d007      	beq.n	8003c2c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b40      	cmp	r3, #64	@ 0x40
 8003c9a:	d10a      	bne.n	8003cb2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd fd2c 	bl	8001708 <HAL_I2C_MemRxCpltCallback>
}
 8003cb0:	e027      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d002      	beq.n	8003cc6 <I2C_MasterReceive_BTF+0x1a6>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d103      	bne.n	8003cce <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ccc:	e002      	b.n	8003cd4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2212      	movs	r2, #18
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fc5d 	bl	8003594 <HAL_I2C_MasterRxCpltCallback>
}
 8003cda:	e012      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d117      	bne.n	8003d4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d38:	e067      	b.n	8003e0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
}
 8003d4c:	e05d      	b.n	8003e0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d56:	d133      	bne.n	8003dc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b21      	cmp	r3, #33	@ 0x21
 8003d62:	d109      	bne.n	8003d78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e008      	b.n	8003d8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <I2C_Master_SB+0x92>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d032      	beq.n	8003e0a <I2C_Master_SB+0x100>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02d      	beq.n	8003e0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
}
 8003dbe:	e024      	b.n	8003e0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10e      	bne.n	8003de6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	11db      	asrs	r3, r3, #7
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0306 	and.w	r3, r3, #6
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f063 030f 	orn	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]
}
 8003de4:	e011      	b.n	8003e0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10d      	bne.n	8003e0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	11db      	asrs	r3, r3, #7
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 0306 	and.w	r3, r3, #6
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f063 030e 	orn	r3, r3, #14
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <I2C_Master_ADD10+0x26>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00c      	beq.n	8003e5e <I2C_Master_ADD10+0x48>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e5c:	605a      	str	r2, [r3, #4]
  }
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b091      	sub	sp, #68	@ 0x44
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b22      	cmp	r3, #34	@ 0x22
 8003e92:	f040 8169 	bne.w	8004168 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <I2C_Master_ADDR+0x54>
 8003e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ea2:	2b40      	cmp	r3, #64	@ 0x40
 8003ea4:	d10b      	bne.n	8003ebe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	e160      	b.n	8004180 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <I2C_Master_ADDR+0x98>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ece:	d118      	bne.n	8003f02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f00:	e13e      	b.n	8004180 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d113      	bne.n	8003f34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e115      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 808a 	bne.w	8004054 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f46:	d137      	bne.n	8003fb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f66:	d113      	bne.n	8003f90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	e0e7      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e0d3      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d02e      	beq.n	800401c <I2C_Master_ADDR+0x1b2>
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d02b      	beq.n	800401c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc6:	2b12      	cmp	r3, #18
 8003fc8:	d102      	bne.n	8003fd0 <I2C_Master_ADDR+0x166>
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d125      	bne.n	800401c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00e      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d00b      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d008      	beq.n	8003ff4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e007      	b.n	8004004 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004002:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	e0a1      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800402a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e085      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d14d      	bne.n	80040fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	2b04      	cmp	r3, #4
 8004062:	d016      	beq.n	8004092 <I2C_Master_ADDR+0x228>
 8004064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004066:	2b02      	cmp	r3, #2
 8004068:	d013      	beq.n	8004092 <I2C_Master_ADDR+0x228>
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	2b10      	cmp	r3, #16
 800406e:	d010      	beq.n	8004092 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e007      	b.n	80040a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b0:	d117      	bne.n	80040e2 <I2C_Master_ADDR+0x278>
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040b8:	d00b      	beq.n	80040d2 <I2C_Master_ADDR+0x268>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d008      	beq.n	80040d2 <I2C_Master_ADDR+0x268>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d005      	beq.n	80040d2 <I2C_Master_ADDR+0x268>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d002      	beq.n	80040d2 <I2C_Master_ADDR+0x268>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d107      	bne.n	80040e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	e032      	b.n	8004160 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004108:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d117      	bne.n	800414a <I2C_Master_ADDR+0x2e0>
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004120:	d00b      	beq.n	800413a <I2C_Master_ADDR+0x2d0>
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	2b01      	cmp	r3, #1
 8004126:	d008      	beq.n	800413a <I2C_Master_ADDR+0x2d0>
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	2b08      	cmp	r3, #8
 800412c:	d005      	beq.n	800413a <I2C_Master_ADDR+0x2d0>
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	2b10      	cmp	r3, #16
 8004132:	d002      	beq.n	800413a <I2C_Master_ADDR+0x2d0>
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	2b20      	cmp	r3, #32
 8004138:	d107      	bne.n	800414a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004148:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004166:	e00b      	b.n	8004180 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	e7ff      	b.n	8004180 <I2C_Master_ADDR+0x316>
 8004180:	bf00      	nop
 8004182:	3744      	adds	r7, #68	@ 0x44
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02b      	beq.n	80041fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d114      	bne.n	80041fe <I2C_SlaveTransmit_TXE+0x72>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b29      	cmp	r3, #41	@ 0x29
 80041d8:	d111      	bne.n	80041fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2221      	movs	r2, #33	@ 0x21
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2228      	movs	r2, #40	@ 0x28
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f9d5 	bl	80035a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004256:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02c      	beq.n	80042bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d114      	bne.n	80042bc <I2C_SlaveReceive_RXNE+0x74>
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b2a      	cmp	r3, #42	@ 0x2a
 8004296:	d111      	bne.n	80042bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2222      	movs	r2, #34	@ 0x22
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2228      	movs	r2, #40	@ 0x28
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff f980 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004322:	2b28      	cmp	r3, #40	@ 0x28
 8004324:	d125      	bne.n	8004372 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004334:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	81bb      	strh	r3, [r7, #12]
 8004354:	e002      	b.n	800435c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004364:	89ba      	ldrh	r2, [r7, #12]
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff f930 	bl	80035d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004370:	e00e      	b.n	8004390 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f4:	d172      	bne.n	80044dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b22      	cmp	r3, #34	@ 0x22
 80043fa:	d002      	beq.n	8004402 <I2C_Slave_STOPF+0x6a>
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004400:	d135      	bne.n	800446e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004434:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd ffc3 	bl	80023c6 <HAL_DMA_GetState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d049      	beq.n	80044da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	4a69      	ldr	r2, [pc, #420]	@ (80045f0 <I2C_Slave_STOPF+0x258>)
 800444c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd ff95 	bl	8002382 <HAL_DMA_Abort_IT>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d03d      	beq.n	80044da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004468:	4610      	mov	r0, r2
 800446a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800446c:	e035      	b.n	80044da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd ff8d 	bl	80023c6 <HAL_DMA_GetState>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d014      	beq.n	80044dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b6:	4a4e      	ldr	r2, [pc, #312]	@ (80045f0 <I2C_Slave_STOPF+0x258>)
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd ff5f 	bl	8002382 <HAL_DMA_Abort_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
 80044d8:	e000      	b.n	80044dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03e      	beq.n	8004564 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d112      	bne.n	800451a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d112      	bne.n	800454e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	f043 0204 	orr.w	r2, r3, #4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8b7 	bl	80046e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004572:	e039      	b.n	80045e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b2a      	cmp	r3, #42	@ 0x2a
 8004578:	d109      	bne.n	800458e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2228      	movs	r2, #40	@ 0x28
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff f817 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b28      	cmp	r3, #40	@ 0x28
 8004598:	d111      	bne.n	80045be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a15      	ldr	r2, [pc, #84]	@ (80045f4 <I2C_Slave_STOPF+0x25c>)
 800459e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff f818 	bl	80035ec <HAL_I2C_ListenCpltCallback>
}
 80045bc:	e014      	b.n	80045e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	2b22      	cmp	r3, #34	@ 0x22
 80045c4:	d002      	beq.n	80045cc <I2C_Slave_STOPF+0x234>
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b22      	cmp	r3, #34	@ 0x22
 80045ca:	d10d      	bne.n	80045e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fe ffea 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	08004c41 	.word	0x08004c41
 80045f4:	ffff0000 	.word	0xffff0000

080045f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004606:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d002      	beq.n	800461a <I2C_Slave_AF+0x22>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b20      	cmp	r3, #32
 8004618:	d129      	bne.n	800466e <I2C_Slave_AF+0x76>
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b28      	cmp	r3, #40	@ 0x28
 800461e:	d126      	bne.n	800466e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <I2C_Slave_AF+0xe4>)
 8004624:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004634:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800463e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe ffc0 	bl	80035ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800466c:	e031      	b.n	80046d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b21      	cmp	r3, #33	@ 0x21
 8004672:	d129      	bne.n	80046c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <I2C_Slave_AF+0xe4>)
 8004678:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2221      	movs	r2, #33	@ 0x21
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800469e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe f972 	bl	80029a4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fe ff71 	bl	80035a8 <HAL_I2C_SlaveTxCpltCallback>
}
 80046c6:	e004      	b.n	80046d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d0:	615a      	str	r2, [r3, #20]
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	ffff0000 	.word	0xffff0000

080046e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046f8:	7bbb      	ldrb	r3, [r7, #14]
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d002      	beq.n	8004704 <I2C_ITError+0x24>
 80046fe:	7bbb      	ldrb	r3, [r7, #14]
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d10a      	bne.n	800471a <I2C_ITError+0x3a>
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b22      	cmp	r3, #34	@ 0x22
 8004708:	d107      	bne.n	800471a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004718:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004720:	2b28      	cmp	r3, #40	@ 0x28
 8004722:	d107      	bne.n	8004734 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2228      	movs	r2, #40	@ 0x28
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004732:	e015      	b.n	8004760 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004742:	d00a      	beq.n	800475a <I2C_ITError+0x7a>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b60      	cmp	r3, #96	@ 0x60
 8004748:	d007      	beq.n	800475a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d162      	bne.n	8004836 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d020      	beq.n	80047d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004792:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <I2C_ITError+0x25c>)
 8004794:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fdf1 	bl	8002382 <HAL_DMA_Abort_IT>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8089 	beq.w	80048ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047ca:	4610      	mov	r0, r2
 80047cc:	4798      	blx	r3
 80047ce:	e074      	b.n	80048ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	4a59      	ldr	r2, [pc, #356]	@ (800493c <I2C_ITError+0x25c>)
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fdd0 	bl	8002382 <HAL_DMA_Abort_IT>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d068      	beq.n	80048ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d10b      	bne.n	800480e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
 8004834:	e041      	b.n	80048ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b60      	cmp	r3, #96	@ 0x60
 8004840:	d125      	bne.n	800488e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d10b      	bne.n	8004876 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fe fece 	bl	8003628 <HAL_I2C_AbortCpltCallback>
 800488c:	e015      	b.n	80048ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d10b      	bne.n	80048b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fe fead 	bl	8003614 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10e      	bne.n	80048e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d113      	bne.n	8004934 <I2C_ITError+0x254>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b28      	cmp	r3, #40	@ 0x28
 8004910:	d110      	bne.n	8004934 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <I2C_ITError+0x260>)
 8004916:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fe fe5c 	bl	80035ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08004c41 	.word	0x08004c41
 8004940:	ffff0000 	.word	0xffff0000

08004944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4603      	mov	r3, r0
 8004954:	817b      	strh	r3, [r7, #10]
 8004956:	460b      	mov	r3, r1
 8004958:	813b      	strh	r3, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800496c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	2200      	movs	r2, #0
 8004976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa08 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004994:	d103      	bne.n	800499e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e05f      	b.n	8004a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	492d      	ldr	r1, [pc, #180]	@ (8004a6c <I2C_RequestMemoryWrite+0x128>)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fa63 	bl	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e04c      	b.n	8004a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e0:	6a39      	ldr	r1, [r7, #32]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 faee 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d107      	bne.n	8004a06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e02b      	b.n	8004a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]
 8004a1a:	e021      	b.n	8004a60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a1c:	893b      	ldrh	r3, [r7, #8]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	6a39      	ldr	r1, [r7, #32]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fac8 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d107      	bne.n	8004a52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e005      	b.n	8004a62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a56:	893b      	ldrh	r3, [r7, #8]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	00010002 	.word	0x00010002

08004a70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	817b      	strh	r3, [r7, #10]
 8004a82:	460b      	mov	r3, r1
 8004a84:	813b      	strh	r3, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f96a 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad0:	d103      	bne.n	8004ada <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0aa      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	4952      	ldr	r1, [pc, #328]	@ (8004c3c <I2C_RequestMemoryRead+0x1cc>)
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f9c5 	bl	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e097      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	6a39      	ldr	r1, [r7, #32]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa50 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d107      	bne.n	8004b42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e076      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]
 8004b56:	e021      	b.n	8004b9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b58:	893b      	ldrh	r3, [r7, #8]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b68:	6a39      	ldr	r1, [r7, #32]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa2a 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d107      	bne.n	8004b8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e050      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b92:	893b      	ldrh	r3, [r7, #8]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	6a39      	ldr	r1, [r7, #32]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fa0f 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d107      	bne.n	8004bc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e035      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8d3 	bl	8004d90 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfe:	d103      	bne.n	8004c08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e013      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	6a3a      	ldr	r2, [r7, #32]
 8004c20:	4906      	ldr	r1, [pc, #24]	@ (8004c3c <I2C_RequestMemoryRead+0x1cc>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f92e 	bl	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	00010002 	.word	0x00010002

08004c40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d88 <I2C_DMAAbort+0x148>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	4a4a      	ldr	r2, [pc, #296]	@ (8004d8c <I2C_DMAAbort+0x14c>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0a1a      	lsrs	r2, r3, #8
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00da      	lsls	r2, r3, #3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c86:	e00a      	b.n	8004c9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9c:	d0ea      	beq.n	8004c74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004caa:	2200      	movs	r2, #0
 8004cac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	2200      	movs	r2, #0
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ccc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b60      	cmp	r3, #96	@ 0x60
 8004d0e:	d10e      	bne.n	8004d2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7fe fc7e 	bl	8003628 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d2c:	e027      	b.n	8004d7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d34:	2b28      	cmp	r3, #40	@ 0x28
 8004d36:	d117      	bne.n	8004d68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2228      	movs	r2, #40	@ 0x28
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d66:	e007      	b.n	8004d78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7fe fc4b 	bl	8003614 <HAL_I2C_ErrorCallback>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	14f8b589 	.word	0x14f8b589

08004d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da0:	e048      	b.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d044      	beq.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004daa:	f7fd f95d 	bl	8002068 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d139      	bne.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10d      	bne.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	e00c      	b.n	8004e00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	43da      	mvns	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d116      	bne.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e023      	b.n	8004e7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10d      	bne.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	e00c      	b.n	8004e74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	43da      	mvns	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d093      	beq.n	8004da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e92:	e071      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	d123      	bne.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e067      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d041      	beq.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fd f8b8 	bl	8002068 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d136      	bne.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10c      	bne.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	e00b      	b.n	8004f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e021      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10c      	bne.n	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e00b      	b.n	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	2300      	moveq	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f47f af6d 	bne.w	8004e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd0:	e034      	b.n	800503c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f915 	bl	8005202 <I2C_IsAcknowledgeFailed>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e034      	b.n	800504c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d028      	beq.n	800503c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fd f83d 	bl	8002068 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11d      	bne.n	800503c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d016      	beq.n	800503c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e007      	b.n	800504c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d1c3      	bne.n	8004fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005060:	e034      	b.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8cd 	bl	8005202 <I2C_IsAcknowledgeFailed>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e034      	b.n	80050dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d028      	beq.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fc fff5 	bl	8002068 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11d      	bne.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d016      	beq.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e007      	b.n	80050dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d1c3      	bne.n	8005062 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	4a13      	ldr	r2, [pc, #76]	@ (8005144 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	0a1a      	lsrs	r2, r3, #8
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b01      	subs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e008      	b.n	8005134 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800512c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005130:	d0e9      	beq.n	8005106 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	20000004 	.word	0x20000004
 8005144:	14f8b589 	.word	0x14f8b589

08005148 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005154:	e049      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d119      	bne.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0210 	mvn.w	r2, #16
 800516c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e030      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005198:	f7fc ff66 	bl	8002068 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d016      	beq.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e007      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d1ae      	bne.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005218:	d11b      	bne.n	8005252 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005222:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005270:	d103      	bne.n	800527a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005278:	e007      	b.n	800528a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005282:	d102      	bne.n	800528a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2208      	movs	r2, #8
 8005288:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e267      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d075      	beq.n	80053a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052b6:	4b88      	ldr	r3, [pc, #544]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b85      	ldr	r3, [pc, #532]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d112      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ce:	4b82      	ldr	r3, [pc, #520]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052da:	d10b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	4b7e      	ldr	r3, [pc, #504]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05b      	beq.n	80053a0 <HAL_RCC_OscConfig+0x108>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d157      	bne.n	80053a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e242      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fc:	d106      	bne.n	800530c <HAL_RCC_OscConfig+0x74>
 80052fe:	4b76      	ldr	r3, [pc, #472]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a75      	ldr	r2, [pc, #468]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e01d      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x98>
 8005316:	4b70      	ldr	r3, [pc, #448]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6f      	ldr	r2, [pc, #444]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 800531c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b6d      	ldr	r3, [pc, #436]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6c      	ldr	r2, [pc, #432]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 8005330:	4b69      	ldr	r3, [pc, #420]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a68      	ldr	r2, [pc, #416]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b66      	ldr	r3, [pc, #408]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a65      	ldr	r2, [pc, #404]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fc fe8a 	bl	8002068 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fc fe86 	bl	8002068 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	@ 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e207      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b5b      	ldr	r3, [pc, #364]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0xc0>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fc fe76 	bl	8002068 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fc fe72 	bl	8002068 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	@ 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1f3      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005392:	4b51      	ldr	r3, [pc, #324]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0xe8>
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d063      	beq.n	8005476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ae:	4b4a      	ldr	r3, [pc, #296]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b47      	ldr	r3, [pc, #284]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d11c      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c6:	4b44      	ldr	r3, [pc, #272]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	4b41      	ldr	r3, [pc, #260]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e1c7      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ea:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4937      	ldr	r1, [pc, #220]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	e03a      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005408:	4b34      	ldr	r3, [pc, #208]	@ (80054dc <HAL_RCC_OscConfig+0x244>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fc fe2b 	bl	8002068 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005416:	f7fc fe27 	bl	8002068 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e1a8      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005428:	4b2b      	ldr	r3, [pc, #172]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005434:	4b28      	ldr	r3, [pc, #160]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4925      	ldr	r1, [pc, #148]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]
 8005448:	e015      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544a:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <HAL_RCC_OscConfig+0x244>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fc fe0a 	bl	8002068 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005458:	f7fc fe06 	bl	8002068 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e187      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546a:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d036      	beq.n	80054f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548a:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <HAL_RCC_OscConfig+0x248>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fc fdea 	bl	8002068 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005498:	f7fc fde6 	bl	8002068 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e167      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCC_OscConfig+0x240>)
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x200>
 80054b6:	e01b      	b.n	80054f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b8:	4b09      	ldr	r3, [pc, #36]	@ (80054e0 <HAL_RCC_OscConfig+0x248>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054be:	f7fc fdd3 	bl	8002068 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	e00e      	b.n	80054e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c6:	f7fc fdcf 	bl	8002068 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d907      	bls.n	80054e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e150      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	42470000 	.word	0x42470000
 80054e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e4:	4b88      	ldr	r3, [pc, #544]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80054e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8097 	beq.w	800562c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005502:	4b81      	ldr	r3, [pc, #516]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	4b7d      	ldr	r3, [pc, #500]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	4a7c      	ldr	r2, [pc, #496]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551c:	6413      	str	r3, [r2, #64]	@ 0x40
 800551e:	4b7a      	ldr	r3, [pc, #488]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552e:	4b77      	ldr	r3, [pc, #476]	@ (800570c <HAL_RCC_OscConfig+0x474>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d118      	bne.n	800556c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553a:	4b74      	ldr	r3, [pc, #464]	@ (800570c <HAL_RCC_OscConfig+0x474>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a73      	ldr	r2, [pc, #460]	@ (800570c <HAL_RCC_OscConfig+0x474>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005546:	f7fc fd8f 	bl	8002068 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554e:	f7fc fd8b 	bl	8002068 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e10c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	4b6a      	ldr	r3, [pc, #424]	@ (800570c <HAL_RCC_OscConfig+0x474>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x2ea>
 8005574:	4b64      	ldr	r3, [pc, #400]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	4a63      	ldr	r2, [pc, #396]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005580:	e01c      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b05      	cmp	r3, #5
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x30c>
 800558a:	4b5f      	ldr	r3, [pc, #380]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	4a5e      	ldr	r2, [pc, #376]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	6713      	str	r3, [r2, #112]	@ 0x70
 8005596:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559a:	4a5b      	ldr	r2, [pc, #364]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 80055a4:	4b58      	ldr	r3, [pc, #352]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a8:	4a57      	ldr	r2, [pc, #348]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b0:	4b55      	ldr	r3, [pc, #340]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b4:	4a54      	ldr	r2, [pc, #336]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f023 0304 	bic.w	r3, r3, #4
 80055ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc fd50 	bl	8002068 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fc fd4c 	bl	8002068 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0cb      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	4b49      	ldr	r3, [pc, #292]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ee      	beq.n	80055cc <HAL_RCC_OscConfig+0x334>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fc fd3a 	bl	8002068 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fc fd36 	bl	8002068 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0b5      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	4b3e      	ldr	r3, [pc, #248]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ee      	bne.n	80055f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d105      	bne.n	800562c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005620:	4b39      	ldr	r3, [pc, #228]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	4a38      	ldr	r2, [pc, #224]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800562a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a1 	beq.w	8005778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005636:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b08      	cmp	r3, #8
 8005640:	d05c      	beq.n	80056fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d141      	bne.n	80056ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b31      	ldr	r3, [pc, #196]	@ (8005710 <HAL_RCC_OscConfig+0x478>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fc fd0a 	bl	8002068 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005658:	f7fc fd06 	bl	8002068 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e087      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	4b27      	ldr	r3, [pc, #156]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	3b01      	subs	r3, #1
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	491b      	ldr	r1, [pc, #108]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <HAL_RCC_OscConfig+0x478>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a6:	f7fc fcdf 	bl	8002068 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fc fcdb 	bl	8002068 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e05c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c0:	4b11      	ldr	r3, [pc, #68]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x416>
 80056cc:	e054      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	4b10      	ldr	r3, [pc, #64]	@ (8005710 <HAL_RCC_OscConfig+0x478>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fc fcc8 	bl	8002068 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fc fcc4 	bl	8002068 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e045      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_RCC_OscConfig+0x470>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x444>
 80056fa:	e03d      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e038      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 8005708:	40023800 	.word	0x40023800
 800570c:	40007000 	.word	0x40007000
 8005710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005714:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <HAL_RCC_OscConfig+0x4ec>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d028      	beq.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d121      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d11a      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800574a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	4293      	cmp	r3, r2
 800574e:	d111      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	3b01      	subs	r3, #1
 800575e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0cc      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b68      	ldr	r3, [pc, #416]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d90c      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b65      	ldr	r3, [pc, #404]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	4b63      	ldr	r3, [pc, #396]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0b8      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057dc:	4b59      	ldr	r3, [pc, #356]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a58      	ldr	r2, [pc, #352]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f4:	4b53      	ldr	r3, [pc, #332]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a52      	ldr	r2, [pc, #328]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005800:	4b50      	ldr	r3, [pc, #320]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	494d      	ldr	r1, [pc, #308]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d044      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005826:	4b47      	ldr	r3, [pc, #284]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d119      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d003      	beq.n	8005846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005842:	2b03      	cmp	r3, #3
 8005844:	d107      	bne.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005846:	4b3f      	ldr	r3, [pc, #252]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e06f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	4b3b      	ldr	r3, [pc, #236]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e067      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005866:	4b37      	ldr	r3, [pc, #220]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 0203 	bic.w	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4934      	ldr	r1, [pc, #208]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005878:	f7fc fbf6 	bl	8002068 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	e00a      	b.n	8005896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005880:	f7fc fbf2 	bl	8002068 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e04f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005896:	4b2b      	ldr	r3, [pc, #172]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 020c 	and.w	r2, r3, #12
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d1eb      	bne.n	8005880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a8:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d20c      	bcs.n	80058d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b22      	ldr	r3, [pc, #136]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b20      	ldr	r3, [pc, #128]	@ (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e032      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058dc:	4b19      	ldr	r3, [pc, #100]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4916      	ldr	r1, [pc, #88]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058fa:	4b12      	ldr	r3, [pc, #72]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	490e      	ldr	r1, [pc, #56]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800590e:	f000 f821 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005912:	4602      	mov	r2, r0
 8005914:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	490a      	ldr	r1, [pc, #40]	@ (8005948 <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	5ccb      	ldrb	r3, [r1, r3]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a09      	ldr	r2, [pc, #36]	@ (800594c <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <HAL_RCC_ClockConfig+0x1c8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fc fb56 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00
 8005944:	40023800 	.word	0x40023800
 8005948:	0800b384 	.word	0x0800b384
 800594c:	20000004 	.word	0x20000004
 8005950:	20000008 	.word	0x20000008

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b094      	sub	sp, #80	@ 0x50
 800595a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005960:	2300      	movs	r3, #0
 8005962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005964:	2300      	movs	r3, #0
 8005966:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800596c:	4b79      	ldr	r3, [pc, #484]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	2b08      	cmp	r3, #8
 8005976:	d00d      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x40>
 8005978:	2b08      	cmp	r3, #8
 800597a:	f200 80e1 	bhi.w	8005b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 8005982:	2b04      	cmp	r3, #4
 8005984:	d003      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x3a>
 8005986:	e0db      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b73      	ldr	r3, [pc, #460]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800598a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800598c:	e0db      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800598e:	4b73      	ldr	r3, [pc, #460]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005992:	e0d8      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005994:	4b6f      	ldr	r3, [pc, #444]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800599c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d063      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	2200      	movs	r2, #0
 80059b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059c6:	4622      	mov	r2, r4
 80059c8:	462b      	mov	r3, r5
 80059ca:	f04f 0000 	mov.w	r0, #0
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	0159      	lsls	r1, r3, #5
 80059d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d8:	0150      	lsls	r0, r2, #5
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4621      	mov	r1, r4
 80059e0:	1a51      	subs	r1, r2, r1
 80059e2:	6139      	str	r1, [r7, #16]
 80059e4:	4629      	mov	r1, r5
 80059e6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f8:	4659      	mov	r1, fp
 80059fa:	018b      	lsls	r3, r1, #6
 80059fc:	4651      	mov	r1, sl
 80059fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a02:	4651      	mov	r1, sl
 8005a04:	018a      	lsls	r2, r1, #6
 8005a06:	4651      	mov	r1, sl
 8005a08:	ebb2 0801 	subs.w	r8, r2, r1
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a26:	4690      	mov	r8, r2
 8005a28:	4699      	mov	r9, r3
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	eb18 0303 	adds.w	r3, r8, r3
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	462b      	mov	r3, r5
 8005a34:	eb49 0303 	adc.w	r3, r9, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a46:	4629      	mov	r1, r5
 8005a48:	024b      	lsls	r3, r1, #9
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a50:	4621      	mov	r1, r4
 8005a52:	024a      	lsls	r2, r1, #9
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a64:	f7fb f8b8 	bl	8000bd8 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a70:	e058      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a72:	4b38      	ldr	r3, [pc, #224]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	099b      	lsrs	r3, r3, #6
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	f04f 0000 	mov.w	r0, #0
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a9e:	0150      	lsls	r0, r2, #5
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aaa:	4649      	mov	r1, r9
 8005aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	00eb      	lsls	r3, r5, #3
 8005ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ada:	00e2      	lsls	r2, r4, #3
 8005adc:	4614      	mov	r4, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	18e3      	adds	r3, r4, r3
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	eb45 0303 	adc.w	r3, r5, r3
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005afa:	4629      	mov	r1, r5
 8005afc:	028b      	lsls	r3, r1, #10
 8005afe:	4621      	mov	r1, r4
 8005b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b04:	4621      	mov	r1, r4
 8005b06:	028a      	lsls	r2, r1, #10
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0e:	2200      	movs	r2, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b18:	f7fb f85e 	bl	8000bd8 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4613      	mov	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b24:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	3301      	adds	r3, #1
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3750      	adds	r7, #80	@ 0x50
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	007a1200 	.word	0x007a1200

08005b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b64:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000004 	.word	0x20000004

08005b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b7c:	f7ff fff0 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	0a9b      	lsrs	r3, r3, #10
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	4903      	ldr	r1, [pc, #12]	@ (8005b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8e:	5ccb      	ldrb	r3, [r1, r3]
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	0800b394 	.word	0x0800b394

08005ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ba4:	f7ff ffdc 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0b5b      	lsrs	r3, r3, #13
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4903      	ldr	r1, [pc, #12]	@ (8005bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	0800b394 	.word	0x0800b394

08005bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e042      	b.n	8005c60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc f834 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2224      	movs	r2, #36	@ 0x24
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcdb 	bl	80065c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d112      	bne.n	8005ca8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_UART_Receive_IT+0x26>
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00b      	b.n	8005caa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 faba 	bl	8006218 <UART_Start_Receive_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e000      	b.n	8005caa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b0ba      	sub	sp, #232	@ 0xe8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb99 	bl	800644a <UART_Receive_IT>
      return;
 8005d18:	e25b      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80de 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
 8005d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80d1 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
 8005d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
 8005d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	f043 0204 	orr.w	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d011      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0208 	orr.w	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 81f2 	beq.w	80061c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fb24 	bl	800644a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_UART_IRQHandler+0x17a>
 8005e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d04f      	beq.n	8005ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa2c 	bl	800628c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b40      	cmp	r3, #64	@ 0x40
 8005e40:	d141      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006094 <HAL_UART_IRQHandler+0x3e0>)
 8005e9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fc fa6d 	bl	8002382 <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	e00e      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f994 	bl	80061ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00a      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f990 	bl	80061ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e006      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f98c 	bl	80061ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005eda:	e175      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	bf00      	nop
    return;
 8005ede:	e173      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 814f 	bne.w	8006188 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8148 	beq.w	8006188 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8141 	beq.w	8006188 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b40      	cmp	r3, #64	@ 0x40
 8005f28:	f040 80b6 	bne.w	8006098 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8145 	beq.w	80061cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f080 813e 	bcs.w	80061cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f62:	f000 8088 	beq.w	8006076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e1      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006012:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006014:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006058:	65ba      	str	r2, [r7, #88]	@ 0x58
 800605a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800605e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e3      	bne.n	8006034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	4618      	mov	r0, r3
 8006072:	f7fc f916 	bl	80022a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006084:	b29b      	uxth	r3, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8b7 	bl	8006200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006092:	e09b      	b.n	80061cc <HAL_UART_IRQHandler+0x518>
 8006094:	08006353 	.word	0x08006353
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 808e 	beq.w	80061d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8089 	beq.w	80061d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80060e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80060e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e3      	bne.n	80060be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	623b      	str	r3, [r7, #32]
   return(result);
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800611a:	633a      	str	r2, [r7, #48]	@ 0x30
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e3      	bne.n	80060f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	60fb      	str	r3, [r7, #12]
   return(result);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0310 	bic.w	r3, r3, #16
 8006152:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006160:	61fa      	str	r2, [r7, #28]
 8006162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	617b      	str	r3, [r7, #20]
   return(result);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800617a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f83d 	bl	8006200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006186:	e023      	b.n	80061d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <HAL_UART_IRQHandler+0x4f4>
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8ea 	bl	800637a <UART_Transmit_IT>
    return;
 80061a6:	e014      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_UART_IRQHandler+0x51e>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f92a 	bl	800641a <UART_EndTransmit_IT>
    return;
 80061c6:	e004      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80061c8:	bf00      	nop
 80061ca:	e002      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80061cc:	bf00      	nop
 80061ce:	e000      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80061d0:	bf00      	nop
  }
}
 80061d2:	37e8      	adds	r7, #232	@ 0xe8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2222      	movs	r2, #34	@ 0x22
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800625c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0220 	orr.w	r2, r2, #32
 800627c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b095      	sub	sp, #84	@ 0x54
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	2b01      	cmp	r3, #1
 8006302:	d119      	bne.n	8006338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	60bb      	str	r3, [r7, #8]
   return(result);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0310 	bic.w	r3, r3, #16
 800631a:	647b      	str	r3, [r7, #68]	@ 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006324:	61ba      	str	r2, [r7, #24]
 8006326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	613b      	str	r3, [r7, #16]
   return(result);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006346:	bf00      	nop
 8006348:	3754      	adds	r7, #84	@ 0x54
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff3d 	bl	80061ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b21      	cmp	r3, #33	@ 0x21
 800638c:	d13e      	bne.n	800640c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006396:	d114      	bne.n	80063c2 <UART_Transmit_IT+0x48>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d110      	bne.n	80063c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]
 80063c0:	e008      	b.n	80063d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6211      	str	r1, [r2, #32]
 80063cc:	781a      	ldrb	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4619      	mov	r1, r3
 80063e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10f      	bne.n	8006408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fecc 	bl	80061d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08c      	sub	sp, #48	@ 0x30
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b22      	cmp	r3, #34	@ 0x22
 800645c:	f040 80ae 	bne.w	80065bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006468:	d117      	bne.n	800649a <UART_Receive_IT+0x50>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d113      	bne.n	800649a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	b29a      	uxth	r2, r3
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28
 8006498:	e026      	b.n	80064e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ac:	d007      	beq.n	80064be <UART_Receive_IT+0x74>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <UART_Receive_IT+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e008      	b.n	80064de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d15d      	bne.n	80065b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0220 	bic.w	r2, r2, #32
 800650a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800651a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	2b01      	cmp	r3, #1
 8006540:	d135      	bne.n	80065ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	613b      	str	r3, [r7, #16]
   return(result);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006568:	623a      	str	r2, [r7, #32]
 800656a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	61bb      	str	r3, [r7, #24]
   return(result);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b10      	cmp	r3, #16
 8006588:	d10a      	bne.n	80065a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fe2a 	bl	8006200 <HAL_UARTEx_RxEventCallback>
 80065ac:	e002      	b.n	80065b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fb f896 	bl	80016e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e002      	b.n	80065be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	@ 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065cc:	b0c0      	sub	sp, #256	@ 0x100
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	68d9      	ldr	r1, [r3, #12]
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	ea40 0301 	orr.w	r3, r0, r1
 80065f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	431a      	orrs	r2, r3
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006620:	f021 010c 	bic.w	r1, r1, #12
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800662e:	430b      	orrs	r3, r1
 8006630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	6999      	ldr	r1, [r3, #24]
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	ea40 0301 	orr.w	r3, r0, r1
 800664e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b8f      	ldr	r3, [pc, #572]	@ (8006894 <UART_SetConfig+0x2cc>)
 8006658:	429a      	cmp	r2, r3
 800665a:	d005      	beq.n	8006668 <UART_SetConfig+0xa0>
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b8d      	ldr	r3, [pc, #564]	@ (8006898 <UART_SetConfig+0x2d0>)
 8006664:	429a      	cmp	r2, r3
 8006666:	d104      	bne.n	8006672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7ff fa9a 	bl	8005ba0 <HAL_RCC_GetPCLK2Freq>
 800666c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006670:	e003      	b.n	800667a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006672:	f7ff fa81 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006684:	f040 810c 	bne.w	80068a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668c:	2200      	movs	r2, #0
 800668e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800669a:	4622      	mov	r2, r4
 800669c:	462b      	mov	r3, r5
 800669e:	1891      	adds	r1, r2, r2
 80066a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066a2:	415b      	adcs	r3, r3
 80066a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066aa:	4621      	mov	r1, r4
 80066ac:	eb12 0801 	adds.w	r8, r2, r1
 80066b0:	4629      	mov	r1, r5
 80066b2:	eb43 0901 	adc.w	r9, r3, r1
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ca:	4690      	mov	r8, r2
 80066cc:	4699      	mov	r9, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	eb18 0303 	adds.w	r3, r8, r3
 80066d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066d8:	462b      	mov	r3, r5
 80066da:	eb49 0303 	adc.w	r3, r9, r3
 80066de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066f6:	460b      	mov	r3, r1
 80066f8:	18db      	adds	r3, r3, r3
 80066fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066fc:	4613      	mov	r3, r2
 80066fe:	eb42 0303 	adc.w	r3, r2, r3
 8006702:	657b      	str	r3, [r7, #84]	@ 0x54
 8006704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800670c:	f7fa fa64 	bl	8000bd8 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4b61      	ldr	r3, [pc, #388]	@ (800689c <UART_SetConfig+0x2d4>)
 8006716:	fba3 2302 	umull	r2, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	011c      	lsls	r4, r3, #4
 800671e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006722:	2200      	movs	r2, #0
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800672c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	1891      	adds	r1, r2, r2
 8006736:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006738:	415b      	adcs	r3, r3
 800673a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800673c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006740:	4641      	mov	r1, r8
 8006742:	eb12 0a01 	adds.w	sl, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb43 0b01 	adc.w	fp, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800675c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006760:	4692      	mov	sl, r2
 8006762:	469b      	mov	fp, r3
 8006764:	4643      	mov	r3, r8
 8006766:	eb1a 0303 	adds.w	r3, sl, r3
 800676a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800676e:	464b      	mov	r3, r9
 8006770:	eb4b 0303 	adc.w	r3, fp, r3
 8006774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800678c:	460b      	mov	r3, r1
 800678e:	18db      	adds	r3, r3, r3
 8006790:	643b      	str	r3, [r7, #64]	@ 0x40
 8006792:	4613      	mov	r3, r2
 8006794:	eb42 0303 	adc.w	r3, r2, r3
 8006798:	647b      	str	r3, [r7, #68]	@ 0x44
 800679a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800679e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067a2:	f7fa fa19 	bl	8000bd8 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <UART_SetConfig+0x2d4>)
 80067ae:	fba3 2301 	umull	r2, r3, r3, r1
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	2264      	movs	r2, #100	@ 0x64
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	1acb      	subs	r3, r1, r3
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067c2:	4b36      	ldr	r3, [pc, #216]	@ (800689c <UART_SetConfig+0x2d4>)
 80067c4:	fba3 2302 	umull	r2, r3, r3, r2
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067d0:	441c      	add	r4, r3
 80067d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067e4:	4642      	mov	r2, r8
 80067e6:	464b      	mov	r3, r9
 80067e8:	1891      	adds	r1, r2, r2
 80067ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067ec:	415b      	adcs	r3, r3
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067f4:	4641      	mov	r1, r8
 80067f6:	1851      	adds	r1, r2, r1
 80067f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80067fa:	4649      	mov	r1, r9
 80067fc:	414b      	adcs	r3, r1
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800680c:	4659      	mov	r1, fp
 800680e:	00cb      	lsls	r3, r1, #3
 8006810:	4651      	mov	r1, sl
 8006812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006816:	4651      	mov	r1, sl
 8006818:	00ca      	lsls	r2, r1, #3
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	4603      	mov	r3, r0
 8006820:	4642      	mov	r2, r8
 8006822:	189b      	adds	r3, r3, r2
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006828:	464b      	mov	r3, r9
 800682a:	460a      	mov	r2, r1
 800682c:	eb42 0303 	adc.w	r3, r2, r3
 8006830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006848:	460b      	mov	r3, r1
 800684a:	18db      	adds	r3, r3, r3
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684e:	4613      	mov	r3, r2
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800685a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800685e:	f7fa f9bb 	bl	8000bd8 <__aeabi_uldivmod>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <UART_SetConfig+0x2d4>)
 8006868:	fba3 1302 	umull	r1, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	2164      	movs	r1, #100	@ 0x64
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	3332      	adds	r3, #50	@ 0x32
 800687a:	4a08      	ldr	r2, [pc, #32]	@ (800689c <UART_SetConfig+0x2d4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	f003 0207 	and.w	r2, r3, #7
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4422      	add	r2, r4
 800688e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006890:	e106      	b.n	8006aa0 <UART_SetConfig+0x4d8>
 8006892:	bf00      	nop
 8006894:	40011000 	.word	0x40011000
 8006898:	40011400 	.word	0x40011400
 800689c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068b2:	4642      	mov	r2, r8
 80068b4:	464b      	mov	r3, r9
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	6239      	str	r1, [r7, #32]
 80068ba:	415b      	adcs	r3, r3
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068c2:	4641      	mov	r1, r8
 80068c4:	1854      	adds	r4, r2, r1
 80068c6:	4649      	mov	r1, r9
 80068c8:	eb43 0501 	adc.w	r5, r3, r1
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	00eb      	lsls	r3, r5, #3
 80068d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068da:	00e2      	lsls	r2, r4, #3
 80068dc:	4614      	mov	r4, r2
 80068de:	461d      	mov	r5, r3
 80068e0:	4643      	mov	r3, r8
 80068e2:	18e3      	adds	r3, r4, r3
 80068e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068e8:	464b      	mov	r3, r9
 80068ea:	eb45 0303 	adc.w	r3, r5, r3
 80068ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800690e:	4629      	mov	r1, r5
 8006910:	008b      	lsls	r3, r1, #2
 8006912:	4621      	mov	r1, r4
 8006914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006918:	4621      	mov	r1, r4
 800691a:	008a      	lsls	r2, r1, #2
 800691c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006920:	f7fa f95a 	bl	8000bd8 <__aeabi_uldivmod>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4b60      	ldr	r3, [pc, #384]	@ (8006aac <UART_SetConfig+0x4e4>)
 800692a:	fba3 2302 	umull	r2, r3, r3, r2
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	011c      	lsls	r4, r3, #4
 8006932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800693c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006944:	4642      	mov	r2, r8
 8006946:	464b      	mov	r3, r9
 8006948:	1891      	adds	r1, r2, r2
 800694a:	61b9      	str	r1, [r7, #24]
 800694c:	415b      	adcs	r3, r3
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006954:	4641      	mov	r1, r8
 8006956:	1851      	adds	r1, r2, r1
 8006958:	6139      	str	r1, [r7, #16]
 800695a:	4649      	mov	r1, r9
 800695c:	414b      	adcs	r3, r1
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800696c:	4659      	mov	r1, fp
 800696e:	00cb      	lsls	r3, r1, #3
 8006970:	4651      	mov	r1, sl
 8006972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006976:	4651      	mov	r1, sl
 8006978:	00ca      	lsls	r2, r1, #3
 800697a:	4610      	mov	r0, r2
 800697c:	4619      	mov	r1, r3
 800697e:	4603      	mov	r3, r0
 8006980:	4642      	mov	r2, r8
 8006982:	189b      	adds	r3, r3, r2
 8006984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006988:	464b      	mov	r3, r9
 800698a:	460a      	mov	r2, r1
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800699e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069ac:	4649      	mov	r1, r9
 80069ae:	008b      	lsls	r3, r1, #2
 80069b0:	4641      	mov	r1, r8
 80069b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b6:	4641      	mov	r1, r8
 80069b8:	008a      	lsls	r2, r1, #2
 80069ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069be:	f7fa f90b 	bl	8000bd8 <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <UART_SetConfig+0x4e4>)
 80069ca:	fba3 2301 	umull	r2, r3, r3, r1
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	2264      	movs	r2, #100	@ 0x64
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	1acb      	subs	r3, r1, r3
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	3332      	adds	r3, #50	@ 0x32
 80069dc:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <UART_SetConfig+0x4e4>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069e8:	441c      	add	r4, r3
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80069f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	1891      	adds	r1, r2, r2
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	415b      	adcs	r3, r3
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a08:	4641      	mov	r1, r8
 8006a0a:	1851      	adds	r1, r2, r1
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	4649      	mov	r1, r9
 8006a10:	414b      	adcs	r3, r1
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a20:	4659      	mov	r1, fp
 8006a22:	00cb      	lsls	r3, r1, #3
 8006a24:	4651      	mov	r1, sl
 8006a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2a:	4651      	mov	r1, sl
 8006a2c:	00ca      	lsls	r2, r1, #3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	4619      	mov	r1, r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	4642      	mov	r2, r8
 8006a36:	189b      	adds	r3, r3, r2
 8006a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	eb42 0303 	adc.w	r3, r2, r3
 8006a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	008b      	lsls	r3, r1, #2
 8006a60:	4641      	mov	r1, r8
 8006a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a66:	4641      	mov	r1, r8
 8006a68:	008a      	lsls	r2, r1, #2
 8006a6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a6e:	f7fa f8b3 	bl	8000bd8 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <UART_SetConfig+0x4e4>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	@ 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	3332      	adds	r3, #50	@ 0x32
 8006a8a:	4a08      	ldr	r2, [pc, #32]	@ (8006aac <UART_SetConfig+0x4e4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 020f 	and.w	r2, r3, #15
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4422      	add	r2, r4
 8006a9e:	609a      	str	r2, [r3, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aac:	51eb851f 	.word	0x51eb851f

08006ab0 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d106      	bne.n	8006ad2 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3371      	adds	r3, #113	@ 0x71
 8006ac8:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8006aca:	e002      	b.n	8006ad2 <prv_parse_number+0x22>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <prv_parse_number+0x30>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d0f5      	beq.n	8006acc <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ae6:	d104      	bne.n	8006af2 <prv_parse_number+0x42>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	3301      	adds	r3, #1
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <prv_parse_number+0x44>
 8006af2:	2300      	movs	r3, #0
 8006af4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8006af6:	e00d      	b.n	8006b14 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	461a      	mov	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	3b30      	subs	r3, #48	@ 0x30
 8006b0a:	4413      	add	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <prv_parse_number+0x7a>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b20:	d903      	bls.n	8006b2a <prv_parse_number+0x7a>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b39      	cmp	r3, #57	@ 0x39
 8006b28:	d9e6      	bls.n	8006af8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <prv_parse_number+0x86>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	425b      	negs	r3, r3
 8006b34:	e000      	b.n	8006b38 <prv_parse_number+0x88>
 8006b36:	68fb      	ldr	r3, [r7, #12]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3371      	adds	r3, #113	@ 0x71
 8006b58:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8006b5a:	e002      	b.n	8006b62 <prv_parse_float_number+0x1e>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <prv_parse_float_number+0x2c>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d0f5      	beq.n	8006b5c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8006b70:	2100      	movs	r1, #0
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f001 fc84 	bl	8008480 <strtod>
 8006b78:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8006b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b80:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b84:	eeb0 0a47 	vmov.f32	s0, s14
 8006b88:	eef0 0a67 	vmov.f32	s1, s15
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ffd0 	bl	8006b44 <prv_parse_float_number>
 8006ba4:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8006ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bac:	f7f9 ffcc 	bl	8000b48 <__aeabi_d2iz>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <prv_parse_lat_long+0x94>)
 8006bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8006bb8:	1152      	asrs	r2, r2, #5
 8006bba:	17db      	asrs	r3, r3, #31
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7f9 fca8 	bl	8000514 <__aeabi_i2d>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	4b16      	ldr	r3, [pc, #88]	@ (8006c2c <prv_parse_lat_long+0x98>)
 8006bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bd6:	f7f9 fd07 	bl	80005e8 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006be2:	f7f9 fb49 	bl	8000278 <__aeabi_dsub>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c30 <prv_parse_lat_long+0x9c>)
 8006bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bf8:	f7f9 fe20 	bl	800083c <__aeabi_ddiv>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c04:	f7f9 fb3a 	bl	800027c <__adddf3>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8006c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c14:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c18:	eeb0 0a47 	vmov.f32	s0, s14
 8006c1c:	eef0 0a67 	vmov.f32	s1, s15
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	51eb851f 	.word	0x51eb851f
 8006c2c:	40590000 	.word	0x40590000
 8006c30:	404e0000 	.word	0x404e0000

08006c34 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8006c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8006c44:	2900      	cmp	r1, #0
 8006c46:	d169      	bne.n	8006d1c <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3371      	adds	r3, #113	@ 0x71
 8006c4c:	2206      	movs	r2, #6
 8006c4e:	49ba      	ldr	r1, [pc, #744]	@ (8006f38 <prv_parse_term+0x304>)
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fd2e 	bl	80086b2 <strncmp>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <prv_parse_term+0x3c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3371      	adds	r3, #113	@ 0x71
 8006c60:	2206      	movs	r2, #6
 8006c62:	49b6      	ldr	r1, [pc, #728]	@ (8006f3c <prv_parse_term+0x308>)
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fd24 	bl	80086b2 <strncmp>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8006c78:	e04e      	b.n	8006d18 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3371      	adds	r3, #113	@ 0x71
 8006c7e:	2206      	movs	r2, #6
 8006c80:	49af      	ldr	r1, [pc, #700]	@ (8006f40 <prv_parse_term+0x30c>)
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 fd15 	bl	80086b2 <strncmp>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <prv_parse_term+0x6e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3371      	adds	r3, #113	@ 0x71
 8006c92:	2206      	movs	r2, #6
 8006c94:	49ab      	ldr	r1, [pc, #684]	@ (8006f44 <prv_parse_term+0x310>)
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fd0b 	bl	80086b2 <strncmp>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8006caa:	e035      	b.n	8006d18 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3371      	adds	r3, #113	@ 0x71
 8006cb0:	2206      	movs	r2, #6
 8006cb2:	49a5      	ldr	r1, [pc, #660]	@ (8006f48 <prv_parse_term+0x314>)
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fcfc 	bl	80086b2 <strncmp>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <prv_parse_term+0xa0>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3371      	adds	r3, #113	@ 0x71
 8006cc4:	2206      	movs	r2, #6
 8006cc6:	49a1      	ldr	r1, [pc, #644]	@ (8006f4c <prv_parse_term+0x318>)
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 fcf2 	bl	80086b2 <strncmp>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8006cdc:	e01c      	b.n	8006d18 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3371      	adds	r3, #113	@ 0x71
 8006ce2:	2206      	movs	r2, #6
 8006ce4:	499a      	ldr	r1, [pc, #616]	@ (8006f50 <prv_parse_term+0x31c>)
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fce3 	bl	80086b2 <strncmp>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <prv_parse_term+0xd2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3371      	adds	r3, #113	@ 0x71
 8006cf6:	2206      	movs	r2, #6
 8006cf8:	4996      	ldr	r1, [pc, #600]	@ (8006f54 <prv_parse_term+0x320>)
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fcd9 	bl	80086b2 <strncmp>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8006d0e:	e003      	b.n	8006d18 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e231      	b.n	8007180 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8006d22:	2900      	cmp	r1, #0
 8006d24:	f000 822b 	beq.w	800717e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8006d2e:	2901      	cmp	r1, #1
 8006d30:	f040 80c9 	bne.w	8006ec6 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2b0a      	cmp	r3, #10
 8006d3e:	f200 8213 	bhi.w	8007168 <prv_parse_term+0x534>
 8006d42:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <prv_parse_term+0x114>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006def 	.word	0x08006def
 8006d50:	08006e05 	.word	0x08006e05
 8006d54:	08006e2f 	.word	0x08006e2f
 8006d58:	08006e45 	.word	0x08006e45
 8006d5c:	08006e6f 	.word	0x08006e6f
 8006d60:	08006e83 	.word	0x08006e83
 8006d64:	08007169 	.word	0x08007169
 8006d68:	08006e97 	.word	0x08006e97
 8006d6c:	08007169 	.word	0x08007169
 8006d70:	08006eaf 	.word	0x08006eaf
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8006d7a:	3b30      	subs	r3, #48	@ 0x30
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	0092      	lsls	r2, r2, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8006d8e:	4413      	add	r3, r2
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	3b30      	subs	r3, #48	@ 0x30
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8006da2:	3b30      	subs	r3, #48	@ 0x30
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	0092      	lsls	r2, r2, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8006db6:	4413      	add	r3, r2
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	3b30      	subs	r3, #48	@ 0x30
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8006dca:	3b30      	subs	r3, #48	@ 0x30
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8006dde:	4413      	add	r3, r2
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	3b30      	subs	r3, #48	@ 0x30
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8006dec:	e1c7      	b.n	800717e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fed0 	bl	8006b94 <prv_parse_lat_long>
 8006df4:	eeb0 7a40 	vmov.f32	s14, s0
 8006df8:	eef0 7a60 	vmov.f32	s15, s1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8006e02:	e1bc      	b.n	800717e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8006e0a:	2b53      	cmp	r3, #83	@ 0x53
 8006e0c:	d005      	beq.n	8006e1a <prv_parse_term+0x1e6>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8006e14:	2b73      	cmp	r3, #115	@ 0x73
 8006e16:	f040 81a9 	bne.w	800716c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8006e20:	4690      	mov	r8, r2
 8006e22:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8006e2c:	e19e      	b.n	800716c <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff feb0 	bl	8006b94 <prv_parse_lat_long>
 8006e34:	eeb0 7a40 	vmov.f32	s14, s0
 8006e38:	eef0 7a60 	vmov.f32	s15, s1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8006e42:	e19c      	b.n	800717e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8006e4a:	2b57      	cmp	r3, #87	@ 0x57
 8006e4c:	d005      	beq.n	8006e5a <prv_parse_term+0x226>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8006e54:	2b77      	cmp	r3, #119	@ 0x77
 8006e56:	f040 818b 	bne.w	8007170 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8006e60:	4614      	mov	r4, r2
 8006e62:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8006e6c:	e180      	b.n	8007170 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fe1d 	bl	8006ab0 <prv_parse_number>
 8006e76:	4603      	mov	r3, r0
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8006e80:	e17d      	b.n	800717e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8006e82:	2100      	movs	r1, #0
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fe13 	bl	8006ab0 <prv_parse_number>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8006e94:	e173      	b.n	800717e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8006e96:	2100      	movs	r1, #0
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fe53 	bl	8006b44 <prv_parse_float_number>
 8006e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8006ea2:	eef0 7a60 	vmov.f32	s15, s1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8006eac:	e167      	b.n	800717e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fe47 	bl	8006b44 <prv_parse_float_number>
 8006eb6:	eeb0 7a40 	vmov.f32	s14, s0
 8006eba:	eef0 7a60 	vmov.f32	s15, s1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8006ec4:	e15b      	b.n	800717e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8006ecc:	2902      	cmp	r1, #2
 8006ece:	f040 8083 	bne.w	8006fd8 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006ed8:	3b02      	subs	r3, #2
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	d860      	bhi.n	8006fa0 <prv_parse_term+0x36c>
 8006ede:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <prv_parse_term+0x2b0>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f25 	.word	0x08006f25
 8006ee8:	08006fa1 	.word	0x08006fa1
 8006eec:	08006fa1 	.word	0x08006fa1
 8006ef0:	08006fa1 	.word	0x08006fa1
 8006ef4:	08006fa1 	.word	0x08006fa1
 8006ef8:	08006fa1 	.word	0x08006fa1
 8006efc:	08006fa1 	.word	0x08006fa1
 8006f00:	08006fa1 	.word	0x08006fa1
 8006f04:	08006fa1 	.word	0x08006fa1
 8006f08:	08006fa1 	.word	0x08006fa1
 8006f0c:	08006fa1 	.word	0x08006fa1
 8006f10:	08006fa1 	.word	0x08006fa1
 8006f14:	08006fa1 	.word	0x08006fa1
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006f89 	.word	0x08006f89
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fdc2 	bl	8006ab0 <prv_parse_number>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 8006f36:	e122      	b.n	800717e <prv_parse_term+0x54a>
 8006f38:	0800b344 	.word	0x0800b344
 8006f3c:	0800b34c 	.word	0x0800b34c
 8006f40:	0800b354 	.word	0x0800b354
 8006f44:	0800b35c 	.word	0x0800b35c
 8006f48:	0800b364 	.word	0x0800b364
 8006f4c:	0800b36c 	.word	0x0800b36c
 8006f50:	0800b374 	.word	0x0800b374
 8006f54:	0800b37c 	.word	0x0800b37c
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fdf2 	bl	8006b44 <prv_parse_float_number>
 8006f60:	eeb0 7a40 	vmov.f32	s14, s0
 8006f64:	eef0 7a60 	vmov.f32	s15, s1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8006f6e:	e106      	b.n	800717e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fde6 	bl	8006b44 <prv_parse_float_number>
 8006f78:	eeb0 7a40 	vmov.f32	s14, s0
 8006f7c:	eef0 7a60 	vmov.f32	s15, s1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8006f86:	e0fa      	b.n	800717e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fdda 	bl	8006b44 <prv_parse_float_number>
 8006f90:	eeb0 7a40 	vmov.f32	s14, s0
 8006f94:	eef0 7a60 	vmov.f32	s15, s1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8006f9e:	e0ee      	b.n	800717e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	f240 80e4 	bls.w	8007174 <prv_parse_term+0x540>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006fb2:	2b0e      	cmp	r3, #14
 8006fb4:	f200 80de 	bhi.w	8007174 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fd78 	bl	8006ab0 <prv_parse_number>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006fc8:	3b03      	subs	r3, #3
 8006fca:	b2d1      	uxtb	r1, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	460a      	mov	r2, r1
 8006fd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 8006fd6:	e0cd      	b.n	8007174 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8006fde:	2903      	cmp	r1, #3
 8006fe0:	d11b      	bne.n	800701a <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d002      	beq.n	8006ff2 <prv_parse_term+0x3be>
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d00a      	beq.n	8007006 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8006ff0:	e0c5      	b.n	800717e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fd5b 	bl	8006ab0 <prv_parse_number>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8007004:	e0bb      	b.n	800717e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fd51 	bl	8006ab0 <prv_parse_number>
 800700e:	4603      	mov	r3, r0
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8007018:	e0b1      	b.n	800717e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8007020:	2904      	cmp	r1, #4
 8007022:	f040 80ac 	bne.w	800717e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 800702c:	3902      	subs	r1, #2
 800702e:	2909      	cmp	r1, #9
 8007030:	f200 80a2 	bhi.w	8007178 <prv_parse_term+0x544>
 8007034:	a001      	add	r0, pc, #4	@ (adr r0, 800703c <prv_parse_term+0x408>)
 8007036:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007065 	.word	0x08007065
 8007040:	08007179 	.word	0x08007179
 8007044:	08007179 	.word	0x08007179
 8007048:	08007179 	.word	0x08007179
 800704c:	08007179 	.word	0x08007179
 8007050:	0800707f 	.word	0x0800707f
 8007054:	08007097 	.word	0x08007097
 8007058:	080070af 	.word	0x080070af
 800705c:	08007129 	.word	0x08007129
 8007060:	08007141 	.word	0x08007141
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800706a:	2b41      	cmp	r3, #65	@ 0x41
 800706c:	bf0c      	ite	eq
 800706e:	2301      	moveq	r3, #1
 8007070:	2300      	movne	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800707c:	e07f      	b.n	800717e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fd5f 	bl	8006b44 <prv_parse_float_number>
 8007086:	eeb0 7a40 	vmov.f32	s14, s0
 800708a:	eef0 7a60 	vmov.f32	s15, s1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8007094:	e073      	b.n	800717e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fd53 	bl	8006b44 <prv_parse_float_number>
 800709e:	eeb0 7a40 	vmov.f32	s14, s0
 80070a2:	eef0 7a60 	vmov.f32	s15, s1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80070ac:	e067      	b.n	800717e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80070b4:	3b30      	subs	r3, #48	@ 0x30
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	0092      	lsls	r2, r2, #2
 80070bc:	4413      	add	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80070c8:	4413      	add	r3, r2
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	3b30      	subs	r3, #48	@ 0x30
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80070dc:	3b30      	subs	r3, #48	@ 0x30
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80070f0:	4413      	add	r3, r2
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	3b30      	subs	r3, #48	@ 0x30
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8007104:	3b30      	subs	r3, #48	@ 0x30
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	0092      	lsls	r2, r2, #2
 800710c:	4413      	add	r3, r2
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8007118:	4413      	add	r3, r2
 800711a:	b2db      	uxtb	r3, r3
 800711c:	3b30      	subs	r3, #48	@ 0x30
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 8007126:	e02a      	b.n	800717e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8007128:	2100      	movs	r1, #0
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fd0a 	bl	8006b44 <prv_parse_float_number>
 8007130:	eeb0 7a40 	vmov.f32	s14, s0
 8007134:	eef0 7a60 	vmov.f32	s15, s1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 800713e:	e01e      	b.n	800717e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8007146:	2957      	cmp	r1, #87	@ 0x57
 8007148:	d004      	beq.n	8007154 <prv_parse_term+0x520>
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8007150:	2977      	cmp	r1, #119	@ 0x77
 8007152:	d113      	bne.n	800717c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 800715a:	4602      	mov	r2, r0
 800715c:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 8007166:	e009      	b.n	800717c <prv_parse_term+0x548>
                break;
 8007168:	bf00      	nop
 800716a:	e008      	b.n	800717e <prv_parse_term+0x54a>
                break;
 800716c:	bf00      	nop
 800716e:	e006      	b.n	800717e <prv_parse_term+0x54a>
                break;
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <prv_parse_term+0x54a>
                break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <prv_parse_term+0x54a>
            default:
                break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <prv_parse_term+0x54a>
                break;
 800717c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800717e:	2301      	movs	r3, #1
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800718a:	bf00      	nop

0800718c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800719a:	2b2f      	cmp	r3, #47	@ 0x2f
 800719c:	d90d      	bls.n	80071ba <prv_check_crc+0x2e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071a4:	2b39      	cmp	r3, #57	@ 0x39
 80071a6:	d808      	bhi.n	80071ba <prv_check_crc+0x2e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071ae:	3b30      	subs	r3, #48	@ 0x30
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	b25a      	sxtb	r2, r3
 80071b8:	e026      	b.n	8007208 <prv_check_crc+0x7c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071c0:	2b60      	cmp	r3, #96	@ 0x60
 80071c2:	d90d      	bls.n	80071e0 <prv_check_crc+0x54>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071ca:	2b7a      	cmp	r3, #122	@ 0x7a
 80071cc:	d808      	bhi.n	80071e0 <prv_check_crc+0x54>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071d4:	3b57      	subs	r3, #87	@ 0x57
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	b25b      	sxtb	r3, r3
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	b25a      	sxtb	r2, r3
 80071de:	e013      	b.n	8007208 <prv_check_crc+0x7c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d90d      	bls.n	8007206 <prv_check_crc+0x7a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071f0:	2b5a      	cmp	r3, #90	@ 0x5a
 80071f2:	d808      	bhi.n	8007206 <prv_check_crc+0x7a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80071fa:	3b37      	subs	r3, #55	@ 0x37
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	b25a      	sxtb	r2, r3
 8007204:	e000      	b.n	8007208 <prv_check_crc+0x7c>
 8007206:	2200      	movs	r2, #0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800720e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007210:	d90c      	bls.n	800722c <prv_check_crc+0xa0>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007218:	2b39      	cmp	r3, #57	@ 0x39
 800721a:	d807      	bhi.n	800722c <prv_check_crc+0xa0>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007222:	b25b      	sxtb	r3, r3
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	b25b      	sxtb	r3, r3
 800722a:	e028      	b.n	800727e <prv_check_crc+0xf2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007232:	2b60      	cmp	r3, #96	@ 0x60
 8007234:	d90e      	bls.n	8007254 <prv_check_crc+0xc8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800723c:	2b7a      	cmp	r3, #122	@ 0x7a
 800723e:	d809      	bhi.n	8007254 <prv_check_crc+0xc8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007246:	3b57      	subs	r3, #87	@ 0x57
 8007248:	b2db      	uxtb	r3, r3
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	b25b      	sxtb	r3, r3
 8007252:	e014      	b.n	800727e <prv_check_crc+0xf2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800725a:	2b40      	cmp	r3, #64	@ 0x40
 800725c:	d90e      	bls.n	800727c <prv_check_crc+0xf0>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8007264:	2b5a      	cmp	r3, #90	@ 0x5a
 8007266:	d809      	bhi.n	800727c <prv_check_crc+0xf0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800726e:	3b37      	subs	r3, #55	@ 0x37
 8007270:	b2db      	uxtb	r3, r3
 8007272:	b25b      	sxtb	r3, r3
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	b25b      	sxtb	r3, r3
 800727a:	e000      	b.n	800727e <prv_check_crc+0xf2>
 800727c:	2300      	movs	r3, #0
 800727e:	4313      	orrs	r3, r2
 8007280:	b25b      	sxtb	r3, r3
 8007282:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	429a      	cmp	r2, r3
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d136      	bne.n	8007322 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007320:	e061      	b.n	80073e6 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8007328:	2b02      	cmp	r3, #2
 800732a:	d121      	bne.n	8007370 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	33a1      	adds	r3, #161	@ 0xa1
 8007366:	220c      	movs	r2, #12
 8007368:	4619      	mov	r1, r3
 800736a:	f001 fa28 	bl	80087be <memcpy>
 800736e:	e03a      	b.n	80073e6 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8007376:	2b03      	cmp	r3, #3
 8007378:	d106      	bne.n	8007388 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007386:	e02e      	b.n	80073e6 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800738e:	2b04      	cmp	r3, #4
 8007390:	d129      	bne.n	80073e6 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80073e6:	2301      	movs	r3, #1
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80073f8:	22b0      	movs	r2, #176	@ 0xb0
 80073fa:	2100      	movs	r1, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f950 	bl	80086a2 <memset>
    return 1;
 8007402:	2301      	movs	r3, #1
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800741c:	e0ad      	b.n	800757a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b24      	cmp	r3, #36	@ 0x24
 8007424:	d128      	bne.n	8007478 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3370      	adds	r3, #112	@ 0x70
 800742a:	2240      	movs	r2, #64	@ 0x40
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f937 	bl	80086a2 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800743a:	2b0b      	cmp	r3, #11
 800743c:	f200 8097 	bhi.w	800756e <lwgps_process+0x162>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007446:	4619      	mov	r1, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	440b      	add	r3, r1
 8007450:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800745a:	3301      	adds	r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800746a:	461a      	mov	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8007476:	e07a      	b.n	800756e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b2c      	cmp	r3, #44	@ 0x2c
 800747e:	d11d      	bne.n	80074bc <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fbd7 	bl	8006c34 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4053      	eors	r3, r2
 8007492:	b2da      	uxtb	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80074b0:	3301      	adds	r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80074ba:	e058      	b.n	800756e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c2:	d117      	bne.n	80074f4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fbb5 	bl	8006c34 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80074e8:	3301      	adds	r3, #1
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80074f2:	e03c      	b.n	800756e <lwgps_process+0x162>
        } else if (*d == '\r') {
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b0d      	cmp	r3, #13
 80074fa:	d109      	bne.n	8007510 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fe45 	bl	800718c <prv_check_crc>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d032      	beq.n	800756e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff feca 	bl	80072a2 <prv_copy_from_tmp_memory>
 800750e:	e02e      	b.n	800756e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	4053      	eors	r3, r2
 8007526:	b2da      	uxtb	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007534:	2b0b      	cmp	r3, #11
 8007536:	d81a      	bhi.n	800756e <lwgps_process+0x162>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800753e:	4619      	mov	r1, r3
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	440b      	add	r3, r1
 8007548:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007552:	3301      	adds	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8007562:	461a      	mov	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	3301      	adds	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f47f af4e 	bne.w	800741e <lwgps_process+0x12>
        }
    }
    return 1;
 8007582:	2301      	movs	r3, #1
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <MPU_sleep_Mode>:
#include <stdio.h>
#include <math.h>
extern I2C_HandleTypeDef hi2c1;


HAL_StatusTypeDef MPU_sleep_Mode(StateOfDevice_t StateOfDevice){
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af04      	add	r7, sp, #16
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	73bb      	strb	r3, [r7, #14]
	if(StateOfDevice == Awake){
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <MPU_sleep_Mode+0x24>
		CLEAR_BIT(addr, 1 << sleepMode_bit);
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	73bb      	strb	r3, [r7, #14]
 80075ae:	e004      	b.n	80075ba <MPU_sleep_Mode+0x2e>
	}
	else{
		SET_BIT(addr, 1 << sleepMode_bit);
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	73bb      	strb	r3, [r7, #14]
	}
	status = HAL_I2C_Mem_Write(&hi2c1, dev_addr_AD0 ,(107 << 1) + 0, 1, &addr, 1, 100);
 80075ba:	2364      	movs	r3, #100	@ 0x64
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	2301      	movs	r3, #1
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	f107 030e 	add.w	r3, r7, #14
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	2301      	movs	r3, #1
 80075ca:	22d6      	movs	r2, #214	@ 0xd6
 80075cc:	21d0      	movs	r1, #208	@ 0xd0
 80075ce:	4807      	ldr	r0, [pc, #28]	@ (80075ec <MPU_sleep_Mode+0x60>)
 80075d0:	f7fb f9fe 	bl	80029d0 <HAL_I2C_Mem_Write>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK != status){
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <MPU_sleep_Mode+0x56>
		return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <MPU_sleep_Mode+0x58>
	}
	else{
		return HAL_OK;
 80075e2:	2300      	movs	r3, #0
	}
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	200003e8 	.word	0x200003e8

080075f0 <MPUInitialize>:

HAL_StatusTypeDef MPUInitialize(MPUHandleTypedef_t *MPUHandle){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status1, status2, status3;
	uint8_t addr_gyro = 0, addr_acc = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	733b      	strb	r3, [r7, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	72fb      	strb	r3, [r7, #11]

	status1 = MPU_sleep_Mode(MPUHandle->Sleep);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff ffc0 	bl	800758c <MPU_sleep_Mode>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK == status1){
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f040 8081 	bne.w	800771a <MPUInitialize+0x12a>
		SET_BIT(addr_gyro, MPUHandle->AFS_SEL_Acc  << configBit);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	b25a      	sxtb	r2, r3
 8007622:	7b3b      	ldrb	r3, [r7, #12]
 8007624:	b25b      	sxtb	r3, r3
 8007626:	4313      	orrs	r3, r2
 8007628:	b25b      	sxtb	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	733b      	strb	r3, [r7, #12]
		SET_BIT(addr_acc , MPUHandle->FS_SEL_Gyro  << configBit);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	b25a      	sxtb	r2, r3
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	b25b      	sxtb	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	b25b      	sxtb	r3, r3
 8007640:	b2db      	uxtb	r3, r3
 8007642:	72fb      	strb	r3, [r7, #11]
		status2 = HAL_I2C_Mem_Write(&hi2c1, dev_addr_AD0, FS_SEL_GyroAddr, 1, &addr_gyro, 1, 100);
 8007644:	2364      	movs	r3, #100	@ 0x64
 8007646:	9302      	str	r3, [sp, #8]
 8007648:	2301      	movs	r3, #1
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	f107 030c 	add.w	r3, r7, #12
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2301      	movs	r3, #1
 8007654:	221b      	movs	r2, #27
 8007656:	21d0      	movs	r1, #208	@ 0xd0
 8007658:	4832      	ldr	r0, [pc, #200]	@ (8007724 <MPUInitialize+0x134>)
 800765a:	f7fb f9b9 	bl	80029d0 <HAL_I2C_Mem_Write>
 800765e:	4603      	mov	r3, r0
 8007660:	73bb      	strb	r3, [r7, #14]
		status3 = HAL_I2C_Mem_Write(&hi2c1, dev_addr_AD0, AFS_SEL_ACCAddr, 1, &addr_acc, 1, 100);
 8007662:	2364      	movs	r3, #100	@ 0x64
 8007664:	9302      	str	r3, [sp, #8]
 8007666:	2301      	movs	r3, #1
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	f107 030b 	add.w	r3, r7, #11
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2301      	movs	r3, #1
 8007672:	221c      	movs	r2, #28
 8007674:	21d0      	movs	r1, #208	@ 0xd0
 8007676:	482b      	ldr	r0, [pc, #172]	@ (8007724 <MPUInitialize+0x134>)
 8007678:	f7fb f9aa 	bl	80029d0 <HAL_I2C_Mem_Write>
 800767c:	4603      	mov	r3, r0
 800767e:	737b      	strb	r3, [r7, #13]

		if(HAL_OK == status2 && HAL_OK == status3)
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d147      	bne.n	8007716 <MPUInitialize+0x126>
 8007686:	7b7b      	ldrb	r3, [r7, #13]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d144      	bne.n	8007716 <MPUInitialize+0x126>
		{
			switch(MPUHandle->FS_SEL_Gyro)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007692:	2b03      	cmp	r3, #3
 8007694:	d819      	bhi.n	80076ca <MPUInitialize+0xda>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <MPUInitialize+0xac>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076b5 	.word	0x080076b5
 80076a4:	080076bd 	.word	0x080076bd
 80076a8:	080076c5 	.word	0x080076c5
			{
			case 0 : MPUHandle->FS_divide = 131  ; break;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2283      	movs	r2, #131	@ 0x83
 80076b0:	649a      	str	r2, [r3, #72]	@ 0x48
 80076b2:	e00a      	b.n	80076ca <MPUInitialize+0xda>
			case 1 : MPUHandle->FS_divide = 65.5 ; break;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2241      	movs	r2, #65	@ 0x41
 80076b8:	649a      	str	r2, [r3, #72]	@ 0x48
 80076ba:	e006      	b.n	80076ca <MPUInitialize+0xda>
			case 2 : MPUHandle->FS_divide = 32.8 ; break;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	649a      	str	r2, [r3, #72]	@ 0x48
 80076c2:	e002      	b.n	80076ca <MPUInitialize+0xda>
			case 3 : MPUHandle->FS_divide = 16.4 ;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2210      	movs	r2, #16
 80076c8:	649a      	str	r2, [r3, #72]	@ 0x48

			}

			switch(MPUHandle->AFS_SEL_Acc)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d81e      	bhi.n	8007712 <MPUInitialize+0x122>
 80076d4:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <MPUInitialize+0xec>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076f7 	.word	0x080076f7
 80076e4:	08007701 	.word	0x08007701
 80076e8:	0800770b 	.word	0x0800770b
			{
			case 0 : MPUHandle->AFS_divide = 16318; break;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f643 72be 	movw	r2, #16318	@ 0x3fbe
 80076f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80076f4:	e00d      	b.n	8007712 <MPUInitialize+0x122>
			case 1 : MPUHandle->AFS_divide = 8192 ; break;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80076fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80076fe:	e008      	b.n	8007712 <MPUInitialize+0x122>
			case 2 : MPUHandle->AFS_divide = 4096 ; break;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007706:	645a      	str	r2, [r3, #68]	@ 0x44
 8007708:	e003      	b.n	8007712 <MPUInitialize+0x122>
			case 3 : MPUHandle->AFS_divide = 2048 ;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007710:	645a      	str	r2, [r3, #68]	@ 0x44

			}
			return HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e002      	b.n	800771c <MPUInitialize+0x12c>

		}
		else
		{
			return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <MPUInitialize+0x12c>
		}
	}
	else
	{
		return HAL_ERROR;
 800771a:	2301      	movs	r3, #1

	}


}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200003e8 	.word	0x200003e8

08007728 <MPUGenerateData>:

void MPUGenerateData(MPUHandleTypedef_t *MPUHandle, uint8_t *pBuffer){
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]

		MPUHandle->Raw_Gyro_Acc.ACC_XOUTH_Raw  = (uint16_t) tracking(pBuffer[0] , pBuffer[1]) ;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	021b      	lsls	r3, r3, #8
 8007738:	b29b      	uxth	r3, r3
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	4313      	orrs	r3, r2
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	801a      	strh	r2, [r3, #0]
		MPUHandle->Raw_Gyro_Acc.ACC_YOUTH_Raw  = (uint16_t) tracking(pBuffer[2] , pBuffer[3]) ;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	3302      	adds	r3, #2
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	b29b      	uxth	r3, r3
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	3203      	adds	r2, #3
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	4313      	orrs	r3, r2
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	805a      	strh	r2, [r3, #2]
		MPUHandle->Raw_Gyro_Acc.ACC_ZOUTH_Raw  = (uint16_t) tracking(pBuffer[4] , pBuffer[5]) ;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	3304      	adds	r3, #4
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	b29b      	uxth	r3, r3
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	3205      	adds	r2, #5
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	809a      	strh	r2, [r3, #4]
		MPUHandle->Raw_Gyro_Acc.GYRO_XOUTH_Raw = (uint16_t) tracking(pBuffer[8] , pBuffer[9]) ;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	b29b      	uxth	r3, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	3209      	adds	r2, #9
 8007786:	7812      	ldrb	r2, [r2, #0]
 8007788:	4313      	orrs	r3, r2
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	80da      	strh	r2, [r3, #6]
		MPUHandle->Raw_Gyro_Acc.GYRO_YOUTH_Raw = (uint16_t) tracking(pBuffer[10], pBuffer[11]);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	330a      	adds	r3, #10
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	320b      	adds	r2, #11
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	811a      	strh	r2, [r3, #8]
		MPUHandle->Raw_Gyro_Acc.GYRO_ZOUTH_Raw = (uint16_t) tracking(pBuffer[12], pBuffer[13]);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	320d      	adds	r2, #13
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	815a      	strh	r2, [r3, #10]


		MPUHandle->Last_Gyro_Acc.ACC_XOUTH  = MPUHandle->Raw_Gyro_Acc.ACC_XOUTH_Raw  / 8192;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	0b5b      	lsrs	r3, r3, #13
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7f8 fea3 	bl	8000514 <__aeabi_i2d>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		MPUHandle->Last_Gyro_Acc.ACC_YOUTH  = MPUHandle->Raw_Gyro_Acc.ACC_YOUTH_Raw  / 8192;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	0b5b      	lsrs	r3, r3, #13
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 fe97 	bl	8000514 <__aeabi_i2d>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
		MPUHandle->Last_Gyro_Acc.ACC_ZOUTH  = MPUHandle->Raw_Gyro_Acc.ACC_ZOUTH_Raw  / 8192;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	889b      	ldrh	r3, [r3, #4]
 80077f4:	0b5b      	lsrs	r3, r3, #13
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7f8 fe8b 	bl	8000514 <__aeabi_i2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	e9c1 2308 	strd	r2, r3, [r1, #32]
		MPUHandle->Last_Gyro_Acc.GYRO_XOUTH = MPUHandle->Raw_Gyro_Acc.GYRO_XOUTH_Raw / 32.8 ;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	4618      	mov	r0, r3
 800780e:	f7f8 fe81 	bl	8000514 <__aeabi_i2d>
 8007812:	a317      	add	r3, pc, #92	@ (adr r3, 8007870 <MPUGenerateData+0x148>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f9 f810 	bl	800083c <__aeabi_ddiv>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		MPUHandle->Last_Gyro_Acc.GYRO_YOUTH = MPUHandle->Raw_Gyro_Acc.GYRO_YOUTH_Raw / 32.8 ;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	891b      	ldrh	r3, [r3, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f7f8 fe72 	bl	8000514 <__aeabi_i2d>
 8007830:	a30f      	add	r3, pc, #60	@ (adr r3, 8007870 <MPUGenerateData+0x148>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f9 f801 	bl	800083c <__aeabi_ddiv>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		MPUHandle->Last_Gyro_Acc.GYRO_ZOUTH = MPUHandle->Raw_Gyro_Acc.GYRO_ZOUTH_Raw / 32.8 ;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	895b      	ldrh	r3, [r3, #10]
 8007848:	4618      	mov	r0, r3
 800784a:	f7f8 fe63 	bl	8000514 <__aeabi_i2d>
 800784e:	a308      	add	r3, pc, #32	@ (adr r3, 8007870 <MPUGenerateData+0x148>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f7f8 fff2 	bl	800083c <__aeabi_ddiv>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w
 8007870:	66666666 	.word	0x66666666
 8007874:	40406666 	.word	0x40406666

08007878 <sulp>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	4604      	mov	r4, r0
 800787c:	460d      	mov	r5, r1
 800787e:	ec45 4b10 	vmov	d0, r4, r5
 8007882:	4616      	mov	r6, r2
 8007884:	f001 ff6c 	bl	8009760 <__ulp>
 8007888:	ec51 0b10 	vmov	r0, r1, d0
 800788c:	b17e      	cbz	r6, 80078ae <sulp+0x36>
 800788e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007892:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007896:	2b00      	cmp	r3, #0
 8007898:	dd09      	ble.n	80078ae <sulp+0x36>
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078a0:	2400      	movs	r4, #0
 80078a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	f7f8 fe9d 	bl	80005e8 <__aeabi_dmul>
 80078ae:	ec41 0b10 	vmov	d0, r0, r1
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	0000      	movs	r0, r0
	...

080078b8 <_strtod_l>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	b09f      	sub	sp, #124	@ 0x7c
 80078be:	460c      	mov	r4, r1
 80078c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078c2:	2200      	movs	r2, #0
 80078c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80078c6:	9005      	str	r0, [sp, #20]
 80078c8:	f04f 0a00 	mov.w	sl, #0
 80078cc:	f04f 0b00 	mov.w	fp, #0
 80078d0:	460a      	mov	r2, r1
 80078d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078d4:	7811      	ldrb	r1, [r2, #0]
 80078d6:	292b      	cmp	r1, #43	@ 0x2b
 80078d8:	d04a      	beq.n	8007970 <_strtod_l+0xb8>
 80078da:	d838      	bhi.n	800794e <_strtod_l+0x96>
 80078dc:	290d      	cmp	r1, #13
 80078de:	d832      	bhi.n	8007946 <_strtod_l+0x8e>
 80078e0:	2908      	cmp	r1, #8
 80078e2:	d832      	bhi.n	800794a <_strtod_l+0x92>
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d03b      	beq.n	8007960 <_strtod_l+0xa8>
 80078e8:	2200      	movs	r2, #0
 80078ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80078ee:	782a      	ldrb	r2, [r5, #0]
 80078f0:	2a30      	cmp	r2, #48	@ 0x30
 80078f2:	f040 80b3 	bne.w	8007a5c <_strtod_l+0x1a4>
 80078f6:	786a      	ldrb	r2, [r5, #1]
 80078f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80078fc:	2a58      	cmp	r2, #88	@ 0x58
 80078fe:	d16e      	bne.n	80079de <_strtod_l+0x126>
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	ab1a      	add	r3, sp, #104	@ 0x68
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4a8e      	ldr	r2, [pc, #568]	@ (8007b44 <_strtod_l+0x28c>)
 800790c:	9805      	ldr	r0, [sp, #20]
 800790e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007910:	a919      	add	r1, sp, #100	@ 0x64
 8007912:	f001 f81f 	bl	8008954 <__gethex>
 8007916:	f010 060f 	ands.w	r6, r0, #15
 800791a:	4604      	mov	r4, r0
 800791c:	d005      	beq.n	800792a <_strtod_l+0x72>
 800791e:	2e06      	cmp	r6, #6
 8007920:	d128      	bne.n	8007974 <_strtod_l+0xbc>
 8007922:	3501      	adds	r5, #1
 8007924:	2300      	movs	r3, #0
 8007926:	9519      	str	r5, [sp, #100]	@ 0x64
 8007928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800792a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 858e 	bne.w	800844e <_strtod_l+0xb96>
 8007932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007934:	b1cb      	cbz	r3, 800796a <_strtod_l+0xb2>
 8007936:	4652      	mov	r2, sl
 8007938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800793c:	ec43 2b10 	vmov	d0, r2, r3
 8007940:	b01f      	add	sp, #124	@ 0x7c
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	2920      	cmp	r1, #32
 8007948:	d1ce      	bne.n	80078e8 <_strtod_l+0x30>
 800794a:	3201      	adds	r2, #1
 800794c:	e7c1      	b.n	80078d2 <_strtod_l+0x1a>
 800794e:	292d      	cmp	r1, #45	@ 0x2d
 8007950:	d1ca      	bne.n	80078e8 <_strtod_l+0x30>
 8007952:	2101      	movs	r1, #1
 8007954:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007956:	1c51      	adds	r1, r2, #1
 8007958:	9119      	str	r1, [sp, #100]	@ 0x64
 800795a:	7852      	ldrb	r2, [r2, #1]
 800795c:	2a00      	cmp	r2, #0
 800795e:	d1c5      	bne.n	80078ec <_strtod_l+0x34>
 8007960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007962:	9419      	str	r4, [sp, #100]	@ 0x64
 8007964:	2b00      	cmp	r3, #0
 8007966:	f040 8570 	bne.w	800844a <_strtod_l+0xb92>
 800796a:	4652      	mov	r2, sl
 800796c:	465b      	mov	r3, fp
 800796e:	e7e5      	b.n	800793c <_strtod_l+0x84>
 8007970:	2100      	movs	r1, #0
 8007972:	e7ef      	b.n	8007954 <_strtod_l+0x9c>
 8007974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007976:	b13a      	cbz	r2, 8007988 <_strtod_l+0xd0>
 8007978:	2135      	movs	r1, #53	@ 0x35
 800797a:	a81c      	add	r0, sp, #112	@ 0x70
 800797c:	f001 ffea 	bl	8009954 <__copybits>
 8007980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007982:	9805      	ldr	r0, [sp, #20]
 8007984:	f001 fbb8 	bl	80090f8 <_Bfree>
 8007988:	3e01      	subs	r6, #1
 800798a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800798c:	2e04      	cmp	r6, #4
 800798e:	d806      	bhi.n	800799e <_strtod_l+0xe6>
 8007990:	e8df f006 	tbb	[pc, r6]
 8007994:	201d0314 	.word	0x201d0314
 8007998:	14          	.byte	0x14
 8007999:	00          	.byte	0x00
 800799a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800799e:	05e1      	lsls	r1, r4, #23
 80079a0:	bf48      	it	mi
 80079a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079aa:	0d1b      	lsrs	r3, r3, #20
 80079ac:	051b      	lsls	r3, r3, #20
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1bb      	bne.n	800792a <_strtod_l+0x72>
 80079b2:	f000 fed7 	bl	8008764 <__errno>
 80079b6:	2322      	movs	r3, #34	@ 0x22
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	e7b6      	b.n	800792a <_strtod_l+0x72>
 80079bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079cc:	e7e7      	b.n	800799e <_strtod_l+0xe6>
 80079ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b4c <_strtod_l+0x294>
 80079d2:	e7e4      	b.n	800799e <_strtod_l+0xe6>
 80079d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079d8:	f04f 3aff 	mov.w	sl, #4294967295
 80079dc:	e7df      	b.n	800799e <_strtod_l+0xe6>
 80079de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b30      	cmp	r3, #48	@ 0x30
 80079e8:	d0f9      	beq.n	80079de <_strtod_l+0x126>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d09d      	beq.n	800792a <_strtod_l+0x72>
 80079ee:	2301      	movs	r3, #1
 80079f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80079f6:	2300      	movs	r3, #0
 80079f8:	9308      	str	r3, [sp, #32]
 80079fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80079fc:	461f      	mov	r7, r3
 80079fe:	220a      	movs	r2, #10
 8007a00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a02:	7805      	ldrb	r5, [r0, #0]
 8007a04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a08:	b2d9      	uxtb	r1, r3
 8007a0a:	2909      	cmp	r1, #9
 8007a0c:	d928      	bls.n	8007a60 <_strtod_l+0x1a8>
 8007a0e:	494e      	ldr	r1, [pc, #312]	@ (8007b48 <_strtod_l+0x290>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	f000 fe4e 	bl	80086b2 <strncmp>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d032      	beq.n	8007a80 <_strtod_l+0x1c8>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	4681      	mov	r9, r0
 8007a20:	463d      	mov	r5, r7
 8007a22:	4603      	mov	r3, r0
 8007a24:	2a65      	cmp	r2, #101	@ 0x65
 8007a26:	d001      	beq.n	8007a2c <_strtod_l+0x174>
 8007a28:	2a45      	cmp	r2, #69	@ 0x45
 8007a2a:	d114      	bne.n	8007a56 <_strtod_l+0x19e>
 8007a2c:	b91d      	cbnz	r5, 8007a36 <_strtod_l+0x17e>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a30:	4302      	orrs	r2, r0
 8007a32:	d095      	beq.n	8007960 <_strtod_l+0xa8>
 8007a34:	2500      	movs	r5, #0
 8007a36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a38:	1c62      	adds	r2, r4, #1
 8007a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a3c:	7862      	ldrb	r2, [r4, #1]
 8007a3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a40:	d077      	beq.n	8007b32 <_strtod_l+0x27a>
 8007a42:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a44:	d07b      	beq.n	8007b3e <_strtod_l+0x286>
 8007a46:	f04f 0c00 	mov.w	ip, #0
 8007a4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a4e:	2909      	cmp	r1, #9
 8007a50:	f240 8082 	bls.w	8007b58 <_strtod_l+0x2a0>
 8007a54:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a56:	f04f 0800 	mov.w	r8, #0
 8007a5a:	e0a2      	b.n	8007ba2 <_strtod_l+0x2ea>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e7c7      	b.n	80079f0 <_strtod_l+0x138>
 8007a60:	2f08      	cmp	r7, #8
 8007a62:	bfd5      	itete	le
 8007a64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007a66:	9908      	ldrgt	r1, [sp, #32]
 8007a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a70:	f100 0001 	add.w	r0, r0, #1
 8007a74:	bfd4      	ite	le
 8007a76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007a78:	9308      	strgt	r3, [sp, #32]
 8007a7a:	3701      	adds	r7, #1
 8007a7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a7e:	e7bf      	b.n	8007a00 <_strtod_l+0x148>
 8007a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a86:	785a      	ldrb	r2, [r3, #1]
 8007a88:	b37f      	cbz	r7, 8007aea <_strtod_l+0x232>
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	463d      	mov	r5, r7
 8007a8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	d912      	bls.n	8007abc <_strtod_l+0x204>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e7c4      	b.n	8007a24 <_strtod_l+0x16c>
 8007a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aa0:	785a      	ldrb	r2, [r3, #1]
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	2a30      	cmp	r2, #48	@ 0x30
 8007aa6:	d0f8      	beq.n	8007a9a <_strtod_l+0x1e2>
 8007aa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	f200 84d3 	bhi.w	8008458 <_strtod_l+0xba0>
 8007ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ab6:	4681      	mov	r9, r0
 8007ab8:	2000      	movs	r0, #0
 8007aba:	4605      	mov	r5, r0
 8007abc:	3a30      	subs	r2, #48	@ 0x30
 8007abe:	f100 0301 	add.w	r3, r0, #1
 8007ac2:	d02a      	beq.n	8007b1a <_strtod_l+0x262>
 8007ac4:	4499      	add	r9, r3
 8007ac6:	eb00 0c05 	add.w	ip, r0, r5
 8007aca:	462b      	mov	r3, r5
 8007acc:	210a      	movs	r1, #10
 8007ace:	4563      	cmp	r3, ip
 8007ad0:	d10d      	bne.n	8007aee <_strtod_l+0x236>
 8007ad2:	1c69      	adds	r1, r5, #1
 8007ad4:	4401      	add	r1, r0
 8007ad6:	4428      	add	r0, r5
 8007ad8:	2808      	cmp	r0, #8
 8007ada:	dc16      	bgt.n	8007b0a <_strtod_l+0x252>
 8007adc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ade:	230a      	movs	r3, #10
 8007ae0:	fb03 2300 	mla	r3, r3, r0, r2
 8007ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e018      	b.n	8007b1c <_strtod_l+0x264>
 8007aea:	4638      	mov	r0, r7
 8007aec:	e7da      	b.n	8007aa4 <_strtod_l+0x1ec>
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	f103 0301 	add.w	r3, r3, #1
 8007af4:	dc03      	bgt.n	8007afe <_strtod_l+0x246>
 8007af6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007af8:	434e      	muls	r6, r1
 8007afa:	960a      	str	r6, [sp, #40]	@ 0x28
 8007afc:	e7e7      	b.n	8007ace <_strtod_l+0x216>
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	bfde      	ittt	le
 8007b02:	9e08      	ldrle	r6, [sp, #32]
 8007b04:	434e      	mulle	r6, r1
 8007b06:	9608      	strle	r6, [sp, #32]
 8007b08:	e7e1      	b.n	8007ace <_strtod_l+0x216>
 8007b0a:	280f      	cmp	r0, #15
 8007b0c:	dceb      	bgt.n	8007ae6 <_strtod_l+0x22e>
 8007b0e:	9808      	ldr	r0, [sp, #32]
 8007b10:	230a      	movs	r3, #10
 8007b12:	fb03 2300 	mla	r3, r3, r0, r2
 8007b16:	9308      	str	r3, [sp, #32]
 8007b18:	e7e5      	b.n	8007ae6 <_strtod_l+0x22e>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b1e:	1c50      	adds	r0, r2, #1
 8007b20:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b22:	7852      	ldrb	r2, [r2, #1]
 8007b24:	4618      	mov	r0, r3
 8007b26:	460d      	mov	r5, r1
 8007b28:	e7b1      	b.n	8007a8e <_strtod_l+0x1d6>
 8007b2a:	f04f 0900 	mov.w	r9, #0
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e77d      	b.n	8007a2e <_strtod_l+0x176>
 8007b32:	f04f 0c00 	mov.w	ip, #0
 8007b36:	1ca2      	adds	r2, r4, #2
 8007b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b3a:	78a2      	ldrb	r2, [r4, #2]
 8007b3c:	e785      	b.n	8007a4a <_strtod_l+0x192>
 8007b3e:	f04f 0c01 	mov.w	ip, #1
 8007b42:	e7f8      	b.n	8007b36 <_strtod_l+0x27e>
 8007b44:	0800b3c0 	.word	0x0800b3c0
 8007b48:	0800b39c 	.word	0x0800b39c
 8007b4c:	7ff00000 	.word	0x7ff00000
 8007b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b52:	1c51      	adds	r1, r2, #1
 8007b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b56:	7852      	ldrb	r2, [r2, #1]
 8007b58:	2a30      	cmp	r2, #48	@ 0x30
 8007b5a:	d0f9      	beq.n	8007b50 <_strtod_l+0x298>
 8007b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b60:	2908      	cmp	r1, #8
 8007b62:	f63f af78 	bhi.w	8007a56 <_strtod_l+0x19e>
 8007b66:	3a30      	subs	r2, #48	@ 0x30
 8007b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b6e:	f04f 080a 	mov.w	r8, #10
 8007b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b74:	1c56      	adds	r6, r2, #1
 8007b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b78:	7852      	ldrb	r2, [r2, #1]
 8007b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b7e:	f1be 0f09 	cmp.w	lr, #9
 8007b82:	d939      	bls.n	8007bf8 <_strtod_l+0x340>
 8007b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b86:	1a76      	subs	r6, r6, r1
 8007b88:	2e08      	cmp	r6, #8
 8007b8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007b8e:	dc03      	bgt.n	8007b98 <_strtod_l+0x2e0>
 8007b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b92:	4588      	cmp	r8, r1
 8007b94:	bfa8      	it	ge
 8007b96:	4688      	movge	r8, r1
 8007b98:	f1bc 0f00 	cmp.w	ip, #0
 8007b9c:	d001      	beq.n	8007ba2 <_strtod_l+0x2ea>
 8007b9e:	f1c8 0800 	rsb	r8, r8, #0
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	d14e      	bne.n	8007c44 <_strtod_l+0x38c>
 8007ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ba8:	4308      	orrs	r0, r1
 8007baa:	f47f aebe 	bne.w	800792a <_strtod_l+0x72>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f47f aed6 	bne.w	8007960 <_strtod_l+0xa8>
 8007bb4:	2a69      	cmp	r2, #105	@ 0x69
 8007bb6:	d028      	beq.n	8007c0a <_strtod_l+0x352>
 8007bb8:	dc25      	bgt.n	8007c06 <_strtod_l+0x34e>
 8007bba:	2a49      	cmp	r2, #73	@ 0x49
 8007bbc:	d025      	beq.n	8007c0a <_strtod_l+0x352>
 8007bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8007bc0:	f47f aece 	bne.w	8007960 <_strtod_l+0xa8>
 8007bc4:	499b      	ldr	r1, [pc, #620]	@ (8007e34 <_strtod_l+0x57c>)
 8007bc6:	a819      	add	r0, sp, #100	@ 0x64
 8007bc8:	f001 f8e6 	bl	8008d98 <__match>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f43f aec7 	beq.w	8007960 <_strtod_l+0xa8>
 8007bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b28      	cmp	r3, #40	@ 0x28
 8007bd8:	d12e      	bne.n	8007c38 <_strtod_l+0x380>
 8007bda:	4997      	ldr	r1, [pc, #604]	@ (8007e38 <_strtod_l+0x580>)
 8007bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bde:	a819      	add	r0, sp, #100	@ 0x64
 8007be0:	f001 f8ee 	bl	8008dc0 <__hexnan>
 8007be4:	2805      	cmp	r0, #5
 8007be6:	d127      	bne.n	8007c38 <_strtod_l+0x380>
 8007be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007bf6:	e698      	b.n	800792a <_strtod_l+0x72>
 8007bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8007bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c04:	e7b5      	b.n	8007b72 <_strtod_l+0x2ba>
 8007c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c08:	e7da      	b.n	8007bc0 <_strtod_l+0x308>
 8007c0a:	498c      	ldr	r1, [pc, #560]	@ (8007e3c <_strtod_l+0x584>)
 8007c0c:	a819      	add	r0, sp, #100	@ 0x64
 8007c0e:	f001 f8c3 	bl	8008d98 <__match>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f aea4 	beq.w	8007960 <_strtod_l+0xa8>
 8007c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c1a:	4989      	ldr	r1, [pc, #548]	@ (8007e40 <_strtod_l+0x588>)
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	a819      	add	r0, sp, #100	@ 0x64
 8007c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c22:	f001 f8b9 	bl	8008d98 <__match>
 8007c26:	b910      	cbnz	r0, 8007c2e <_strtod_l+0x376>
 8007c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007e50 <_strtod_l+0x598>
 8007c32:	f04f 0a00 	mov.w	sl, #0
 8007c36:	e678      	b.n	800792a <_strtod_l+0x72>
 8007c38:	4882      	ldr	r0, [pc, #520]	@ (8007e44 <_strtod_l+0x58c>)
 8007c3a:	f000 fdd1 	bl	80087e0 <nan>
 8007c3e:	ec5b ab10 	vmov	sl, fp, d0
 8007c42:	e672      	b.n	800792a <_strtod_l+0x72>
 8007c44:	eba8 0309 	sub.w	r3, r8, r9
 8007c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c4c:	2f00      	cmp	r7, #0
 8007c4e:	bf08      	it	eq
 8007c50:	462f      	moveq	r7, r5
 8007c52:	2d10      	cmp	r5, #16
 8007c54:	462c      	mov	r4, r5
 8007c56:	bfa8      	it	ge
 8007c58:	2410      	movge	r4, #16
 8007c5a:	f7f8 fc4b 	bl	80004f4 <__aeabi_ui2d>
 8007c5e:	2d09      	cmp	r5, #9
 8007c60:	4682      	mov	sl, r0
 8007c62:	468b      	mov	fp, r1
 8007c64:	dc13      	bgt.n	8007c8e <_strtod_l+0x3d6>
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f43f ae5e 	beq.w	800792a <_strtod_l+0x72>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c70:	dd78      	ble.n	8007d64 <_strtod_l+0x4ac>
 8007c72:	2b16      	cmp	r3, #22
 8007c74:	dc5f      	bgt.n	8007d36 <_strtod_l+0x47e>
 8007c76:	4974      	ldr	r1, [pc, #464]	@ (8007e48 <_strtod_l+0x590>)
 8007c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c80:	4652      	mov	r2, sl
 8007c82:	465b      	mov	r3, fp
 8007c84:	f7f8 fcb0 	bl	80005e8 <__aeabi_dmul>
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	e64d      	b.n	800792a <_strtod_l+0x72>
 8007c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8007e48 <_strtod_l+0x590>)
 8007c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007c98:	f7f8 fca6 	bl	80005e8 <__aeabi_dmul>
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	9808      	ldr	r0, [sp, #32]
 8007ca0:	468b      	mov	fp, r1
 8007ca2:	f7f8 fc27 	bl	80004f4 <__aeabi_ui2d>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fae5 	bl	800027c <__adddf3>
 8007cb2:	2d0f      	cmp	r5, #15
 8007cb4:	4682      	mov	sl, r0
 8007cb6:	468b      	mov	fp, r1
 8007cb8:	ddd5      	ble.n	8007c66 <_strtod_l+0x3ae>
 8007cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cbc:	1b2c      	subs	r4, r5, r4
 8007cbe:	441c      	add	r4, r3
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	f340 8096 	ble.w	8007df2 <_strtod_l+0x53a>
 8007cc6:	f014 030f 	ands.w	r3, r4, #15
 8007cca:	d00a      	beq.n	8007ce2 <_strtod_l+0x42a>
 8007ccc:	495e      	ldr	r1, [pc, #376]	@ (8007e48 <_strtod_l+0x590>)
 8007cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cd2:	4652      	mov	r2, sl
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cda:	f7f8 fc85 	bl	80005e8 <__aeabi_dmul>
 8007cde:	4682      	mov	sl, r0
 8007ce0:	468b      	mov	fp, r1
 8007ce2:	f034 040f 	bics.w	r4, r4, #15
 8007ce6:	d073      	beq.n	8007dd0 <_strtod_l+0x518>
 8007ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007cec:	dd48      	ble.n	8007d80 <_strtod_l+0x4c8>
 8007cee:	2400      	movs	r4, #0
 8007cf0:	46a0      	mov	r8, r4
 8007cf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cf4:	46a1      	mov	r9, r4
 8007cf6:	9a05      	ldr	r2, [sp, #20]
 8007cf8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007e50 <_strtod_l+0x598>
 8007cfc:	2322      	movs	r3, #34	@ 0x22
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	f04f 0a00 	mov.w	sl, #0
 8007d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f43f ae0f 	beq.w	800792a <_strtod_l+0x72>
 8007d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d0e:	9805      	ldr	r0, [sp, #20]
 8007d10:	f001 f9f2 	bl	80090f8 <_Bfree>
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	4649      	mov	r1, r9
 8007d18:	f001 f9ee 	bl	80090f8 <_Bfree>
 8007d1c:	9805      	ldr	r0, [sp, #20]
 8007d1e:	4641      	mov	r1, r8
 8007d20:	f001 f9ea 	bl	80090f8 <_Bfree>
 8007d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d26:	9805      	ldr	r0, [sp, #20]
 8007d28:	f001 f9e6 	bl	80090f8 <_Bfree>
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	f001 f9e2 	bl	80090f8 <_Bfree>
 8007d34:	e5f9      	b.n	800792a <_strtod_l+0x72>
 8007d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	dbbc      	blt.n	8007cba <_strtod_l+0x402>
 8007d40:	4c41      	ldr	r4, [pc, #260]	@ (8007e48 <_strtod_l+0x590>)
 8007d42:	f1c5 050f 	rsb	r5, r5, #15
 8007d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	465b      	mov	r3, fp
 8007d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d52:	f7f8 fc49 	bl	80005e8 <__aeabi_dmul>
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	1b5d      	subs	r5, r3, r5
 8007d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d62:	e78f      	b.n	8007c84 <_strtod_l+0x3cc>
 8007d64:	3316      	adds	r3, #22
 8007d66:	dba8      	blt.n	8007cba <_strtod_l+0x402>
 8007d68:	4b37      	ldr	r3, [pc, #220]	@ (8007e48 <_strtod_l+0x590>)
 8007d6a:	eba9 0808 	sub.w	r8, r9, r8
 8007d6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d76:	4650      	mov	r0, sl
 8007d78:	4659      	mov	r1, fp
 8007d7a:	f7f8 fd5f 	bl	800083c <__aeabi_ddiv>
 8007d7e:	e783      	b.n	8007c88 <_strtod_l+0x3d0>
 8007d80:	4b32      	ldr	r3, [pc, #200]	@ (8007e4c <_strtod_l+0x594>)
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	2300      	movs	r3, #0
 8007d86:	1124      	asrs	r4, r4, #4
 8007d88:	4650      	mov	r0, sl
 8007d8a:	4659      	mov	r1, fp
 8007d8c:	461e      	mov	r6, r3
 8007d8e:	2c01      	cmp	r4, #1
 8007d90:	dc21      	bgt.n	8007dd6 <_strtod_l+0x51e>
 8007d92:	b10b      	cbz	r3, 8007d98 <_strtod_l+0x4e0>
 8007d94:	4682      	mov	sl, r0
 8007d96:	468b      	mov	fp, r1
 8007d98:	492c      	ldr	r1, [pc, #176]	@ (8007e4c <_strtod_l+0x594>)
 8007d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007da2:	4652      	mov	r2, sl
 8007da4:	465b      	mov	r3, fp
 8007da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007daa:	f7f8 fc1d 	bl	80005e8 <__aeabi_dmul>
 8007dae:	4b28      	ldr	r3, [pc, #160]	@ (8007e50 <_strtod_l+0x598>)
 8007db0:	460a      	mov	r2, r1
 8007db2:	400b      	ands	r3, r1
 8007db4:	4927      	ldr	r1, [pc, #156]	@ (8007e54 <_strtod_l+0x59c>)
 8007db6:	428b      	cmp	r3, r1
 8007db8:	4682      	mov	sl, r0
 8007dba:	d898      	bhi.n	8007cee <_strtod_l+0x436>
 8007dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	bf86      	itte	hi
 8007dc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007e58 <_strtod_l+0x5a0>
 8007dc8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9308      	str	r3, [sp, #32]
 8007dd4:	e07a      	b.n	8007ecc <_strtod_l+0x614>
 8007dd6:	07e2      	lsls	r2, r4, #31
 8007dd8:	d505      	bpl.n	8007de6 <_strtod_l+0x52e>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fc02 	bl	80005e8 <__aeabi_dmul>
 8007de4:	2301      	movs	r3, #1
 8007de6:	9a08      	ldr	r2, [sp, #32]
 8007de8:	3208      	adds	r2, #8
 8007dea:	3601      	adds	r6, #1
 8007dec:	1064      	asrs	r4, r4, #1
 8007dee:	9208      	str	r2, [sp, #32]
 8007df0:	e7cd      	b.n	8007d8e <_strtod_l+0x4d6>
 8007df2:	d0ed      	beq.n	8007dd0 <_strtod_l+0x518>
 8007df4:	4264      	negs	r4, r4
 8007df6:	f014 020f 	ands.w	r2, r4, #15
 8007dfa:	d00a      	beq.n	8007e12 <_strtod_l+0x55a>
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <_strtod_l+0x590>)
 8007dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e02:	4650      	mov	r0, sl
 8007e04:	4659      	mov	r1, fp
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f7f8 fd17 	bl	800083c <__aeabi_ddiv>
 8007e0e:	4682      	mov	sl, r0
 8007e10:	468b      	mov	fp, r1
 8007e12:	1124      	asrs	r4, r4, #4
 8007e14:	d0dc      	beq.n	8007dd0 <_strtod_l+0x518>
 8007e16:	2c1f      	cmp	r4, #31
 8007e18:	dd20      	ble.n	8007e5c <_strtod_l+0x5a4>
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	46a0      	mov	r8, r4
 8007e1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e20:	46a1      	mov	r9, r4
 8007e22:	9a05      	ldr	r2, [sp, #20]
 8007e24:	2322      	movs	r3, #34	@ 0x22
 8007e26:	f04f 0a00 	mov.w	sl, #0
 8007e2a:	f04f 0b00 	mov.w	fp, #0
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e768      	b.n	8007d04 <_strtod_l+0x44c>
 8007e32:	bf00      	nop
 8007e34:	0800b3a7 	.word	0x0800b3a7
 8007e38:	0800b3ac 	.word	0x0800b3ac
 8007e3c:	0800b39e 	.word	0x0800b39e
 8007e40:	0800b3a1 	.word	0x0800b3a1
 8007e44:	0800b724 	.word	0x0800b724
 8007e48:	0800b520 	.word	0x0800b520
 8007e4c:	0800b4f8 	.word	0x0800b4f8
 8007e50:	7ff00000 	.word	0x7ff00000
 8007e54:	7ca00000 	.word	0x7ca00000
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	f014 0310 	ands.w	r3, r4, #16
 8007e60:	bf18      	it	ne
 8007e62:	236a      	movne	r3, #106	@ 0x6a
 8007e64:	4ea9      	ldr	r6, [pc, #676]	@ (800810c <_strtod_l+0x854>)
 8007e66:	9308      	str	r3, [sp, #32]
 8007e68:	4650      	mov	r0, sl
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	07e2      	lsls	r2, r4, #31
 8007e70:	d504      	bpl.n	8007e7c <_strtod_l+0x5c4>
 8007e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e76:	f7f8 fbb7 	bl	80005e8 <__aeabi_dmul>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	1064      	asrs	r4, r4, #1
 8007e7e:	f106 0608 	add.w	r6, r6, #8
 8007e82:	d1f4      	bne.n	8007e6e <_strtod_l+0x5b6>
 8007e84:	b10b      	cbz	r3, 8007e8a <_strtod_l+0x5d2>
 8007e86:	4682      	mov	sl, r0
 8007e88:	468b      	mov	fp, r1
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	b1b3      	cbz	r3, 8007ebc <_strtod_l+0x604>
 8007e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	4659      	mov	r1, fp
 8007e9a:	dd0f      	ble.n	8007ebc <_strtod_l+0x604>
 8007e9c:	2b1f      	cmp	r3, #31
 8007e9e:	dd55      	ble.n	8007f4c <_strtod_l+0x694>
 8007ea0:	2b34      	cmp	r3, #52	@ 0x34
 8007ea2:	bfde      	ittt	le
 8007ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007eac:	4093      	lslle	r3, r2
 8007eae:	f04f 0a00 	mov.w	sl, #0
 8007eb2:	bfcc      	ite	gt
 8007eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 fdf8 	bl	8000ab8 <__aeabi_dcmpeq>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1a6      	bne.n	8007e1a <_strtod_l+0x562>
 8007ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ed2:	9805      	ldr	r0, [sp, #20]
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	f001 f976 	bl	80091c8 <__s2b>
 8007edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f af05 	beq.w	8007cee <_strtod_l+0x436>
 8007ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	eba9 0308 	sub.w	r3, r9, r8
 8007eec:	bfa8      	it	ge
 8007eee:	2300      	movge	r3, #0
 8007ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ef8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007efa:	46a0      	mov	r8, r4
 8007efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007efe:	9805      	ldr	r0, [sp, #20]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	f001 f8b9 	bl	8009078 <_Balloc>
 8007f06:	4681      	mov	r9, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f aef4 	beq.w	8007cf6 <_strtod_l+0x43e>
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	3202      	adds	r2, #2
 8007f14:	f103 010c 	add.w	r1, r3, #12
 8007f18:	0092      	lsls	r2, r2, #2
 8007f1a:	300c      	adds	r0, #12
 8007f1c:	f000 fc4f 	bl	80087be <memcpy>
 8007f20:	ec4b ab10 	vmov	d0, sl, fp
 8007f24:	9805      	ldr	r0, [sp, #20]
 8007f26:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f28:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f2e:	f001 fc87 	bl	8009840 <__d2b>
 8007f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f43f aede 	beq.w	8007cf6 <_strtod_l+0x43e>
 8007f3a:	9805      	ldr	r0, [sp, #20]
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	f001 f9d9 	bl	80092f4 <__i2b>
 8007f42:	4680      	mov	r8, r0
 8007f44:	b948      	cbnz	r0, 8007f5a <_strtod_l+0x6a2>
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	e6d4      	b.n	8007cf6 <_strtod_l+0x43e>
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	ea03 0a0a 	and.w	sl, r3, sl
 8007f58:	e7b0      	b.n	8007ebc <_strtod_l+0x604>
 8007f5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	bfab      	itete	ge
 8007f62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f6a:	bfac      	ite	ge
 8007f6c:	18ef      	addge	r7, r5, r3
 8007f6e:	1b5e      	sublt	r6, r3, r5
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	1aed      	subs	r5, r5, r3
 8007f74:	4415      	add	r5, r2
 8007f76:	4b66      	ldr	r3, [pc, #408]	@ (8008110 <_strtod_l+0x858>)
 8007f78:	3d01      	subs	r5, #1
 8007f7a:	429d      	cmp	r5, r3
 8007f7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007f80:	da50      	bge.n	8008024 <_strtod_l+0x76c>
 8007f82:	1b5b      	subs	r3, r3, r5
 8007f84:	2b1f      	cmp	r3, #31
 8007f86:	eba2 0203 	sub.w	r2, r2, r3
 8007f8a:	f04f 0101 	mov.w	r1, #1
 8007f8e:	dc3d      	bgt.n	800800c <_strtod_l+0x754>
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f96:	2300      	movs	r3, #0
 8007f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f9a:	18bd      	adds	r5, r7, r2
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	42af      	cmp	r7, r5
 8007fa0:	4416      	add	r6, r2
 8007fa2:	441e      	add	r6, r3
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	bfa8      	it	ge
 8007fa8:	462b      	movge	r3, r5
 8007faa:	42b3      	cmp	r3, r6
 8007fac:	bfa8      	it	ge
 8007fae:	4633      	movge	r3, r6
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfc2      	ittt	gt
 8007fb4:	1aed      	subgt	r5, r5, r3
 8007fb6:	1af6      	subgt	r6, r6, r3
 8007fb8:	1aff      	subgt	r7, r7, r3
 8007fba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd16      	ble.n	8007fee <_strtod_l+0x736>
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	9805      	ldr	r0, [sp, #20]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f001 fa55 	bl	8009474 <__pow5mult>
 8007fca:	4680      	mov	r8, r0
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d0ba      	beq.n	8007f46 <_strtod_l+0x68e>
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007fd4:	9805      	ldr	r0, [sp, #20]
 8007fd6:	f001 f9a3 	bl	8009320 <__multiply>
 8007fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	f43f ae8a 	beq.w	8007cf6 <_strtod_l+0x43e>
 8007fe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fe4:	9805      	ldr	r0, [sp, #20]
 8007fe6:	f001 f887 	bl	80090f8 <_Bfree>
 8007fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	dc1d      	bgt.n	800802e <_strtod_l+0x776>
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd23      	ble.n	8008040 <_strtod_l+0x788>
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ffc:	9805      	ldr	r0, [sp, #20]
 8007ffe:	f001 fa39 	bl	8009474 <__pow5mult>
 8008002:	4681      	mov	r9, r0
 8008004:	b9e0      	cbnz	r0, 8008040 <_strtod_l+0x788>
 8008006:	f04f 0900 	mov.w	r9, #0
 800800a:	e674      	b.n	8007cf6 <_strtod_l+0x43e>
 800800c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008010:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008014:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008018:	35e2      	adds	r5, #226	@ 0xe2
 800801a:	fa01 f305 	lsl.w	r3, r1, r5
 800801e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008020:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008022:	e7ba      	b.n	8007f9a <_strtod_l+0x6e2>
 8008024:	2300      	movs	r3, #0
 8008026:	9310      	str	r3, [sp, #64]	@ 0x40
 8008028:	2301      	movs	r3, #1
 800802a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800802c:	e7b5      	b.n	8007f9a <_strtod_l+0x6e2>
 800802e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008030:	9805      	ldr	r0, [sp, #20]
 8008032:	462a      	mov	r2, r5
 8008034:	f001 fa78 	bl	8009528 <__lshift>
 8008038:	901a      	str	r0, [sp, #104]	@ 0x68
 800803a:	2800      	cmp	r0, #0
 800803c:	d1d9      	bne.n	8007ff2 <_strtod_l+0x73a>
 800803e:	e65a      	b.n	8007cf6 <_strtod_l+0x43e>
 8008040:	2e00      	cmp	r6, #0
 8008042:	dd07      	ble.n	8008054 <_strtod_l+0x79c>
 8008044:	4649      	mov	r1, r9
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	4632      	mov	r2, r6
 800804a:	f001 fa6d 	bl	8009528 <__lshift>
 800804e:	4681      	mov	r9, r0
 8008050:	2800      	cmp	r0, #0
 8008052:	d0d8      	beq.n	8008006 <_strtod_l+0x74e>
 8008054:	2f00      	cmp	r7, #0
 8008056:	dd08      	ble.n	800806a <_strtod_l+0x7b2>
 8008058:	4641      	mov	r1, r8
 800805a:	9805      	ldr	r0, [sp, #20]
 800805c:	463a      	mov	r2, r7
 800805e:	f001 fa63 	bl	8009528 <__lshift>
 8008062:	4680      	mov	r8, r0
 8008064:	2800      	cmp	r0, #0
 8008066:	f43f ae46 	beq.w	8007cf6 <_strtod_l+0x43e>
 800806a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	464a      	mov	r2, r9
 8008070:	f001 fae2 	bl	8009638 <__mdiff>
 8008074:	4604      	mov	r4, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f ae3d 	beq.w	8007cf6 <_strtod_l+0x43e>
 800807c:	68c3      	ldr	r3, [r0, #12]
 800807e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008080:	2300      	movs	r3, #0
 8008082:	60c3      	str	r3, [r0, #12]
 8008084:	4641      	mov	r1, r8
 8008086:	f001 fabb 	bl	8009600 <__mcmp>
 800808a:	2800      	cmp	r0, #0
 800808c:	da46      	bge.n	800811c <_strtod_l+0x864>
 800808e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008090:	ea53 030a 	orrs.w	r3, r3, sl
 8008094:	d16c      	bne.n	8008170 <_strtod_l+0x8b8>
 8008096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800809a:	2b00      	cmp	r3, #0
 800809c:	d168      	bne.n	8008170 <_strtod_l+0x8b8>
 800809e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080a2:	0d1b      	lsrs	r3, r3, #20
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080aa:	d961      	bls.n	8008170 <_strtod_l+0x8b8>
 80080ac:	6963      	ldr	r3, [r4, #20]
 80080ae:	b913      	cbnz	r3, 80080b6 <_strtod_l+0x7fe>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	dd5c      	ble.n	8008170 <_strtod_l+0x8b8>
 80080b6:	4621      	mov	r1, r4
 80080b8:	2201      	movs	r2, #1
 80080ba:	9805      	ldr	r0, [sp, #20]
 80080bc:	f001 fa34 	bl	8009528 <__lshift>
 80080c0:	4641      	mov	r1, r8
 80080c2:	4604      	mov	r4, r0
 80080c4:	f001 fa9c 	bl	8009600 <__mcmp>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	dd51      	ble.n	8008170 <_strtod_l+0x8b8>
 80080cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080d0:	9a08      	ldr	r2, [sp, #32]
 80080d2:	0d1b      	lsrs	r3, r3, #20
 80080d4:	051b      	lsls	r3, r3, #20
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	d06b      	beq.n	80081b2 <_strtod_l+0x8fa>
 80080da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080de:	d868      	bhi.n	80081b2 <_strtod_l+0x8fa>
 80080e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80080e4:	f67f ae9d 	bls.w	8007e22 <_strtod_l+0x56a>
 80080e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008114 <_strtod_l+0x85c>)
 80080ea:	4650      	mov	r0, sl
 80080ec:	4659      	mov	r1, fp
 80080ee:	2200      	movs	r2, #0
 80080f0:	f7f8 fa7a 	bl	80005e8 <__aeabi_dmul>
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <_strtod_l+0x860>)
 80080f6:	400b      	ands	r3, r1
 80080f8:	4682      	mov	sl, r0
 80080fa:	468b      	mov	fp, r1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f ae05 	bne.w	8007d0c <_strtod_l+0x454>
 8008102:	9a05      	ldr	r2, [sp, #20]
 8008104:	2322      	movs	r3, #34	@ 0x22
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	e600      	b.n	8007d0c <_strtod_l+0x454>
 800810a:	bf00      	nop
 800810c:	0800b3d8 	.word	0x0800b3d8
 8008110:	fffffc02 	.word	0xfffffc02
 8008114:	39500000 	.word	0x39500000
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008120:	d165      	bne.n	80081ee <_strtod_l+0x936>
 8008122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008128:	b35a      	cbz	r2, 8008182 <_strtod_l+0x8ca>
 800812a:	4a9f      	ldr	r2, [pc, #636]	@ (80083a8 <_strtod_l+0xaf0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d12b      	bne.n	8008188 <_strtod_l+0x8d0>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	4651      	mov	r1, sl
 8008134:	b303      	cbz	r3, 8008178 <_strtod_l+0x8c0>
 8008136:	4b9d      	ldr	r3, [pc, #628]	@ (80083ac <_strtod_l+0xaf4>)
 8008138:	465a      	mov	r2, fp
 800813a:	4013      	ands	r3, r2
 800813c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008140:	f04f 32ff 	mov.w	r2, #4294967295
 8008144:	d81b      	bhi.n	800817e <_strtod_l+0x8c6>
 8008146:	0d1b      	lsrs	r3, r3, #20
 8008148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	4299      	cmp	r1, r3
 8008152:	d119      	bne.n	8008188 <_strtod_l+0x8d0>
 8008154:	4b96      	ldr	r3, [pc, #600]	@ (80083b0 <_strtod_l+0xaf8>)
 8008156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008158:	429a      	cmp	r2, r3
 800815a:	d102      	bne.n	8008162 <_strtod_l+0x8aa>
 800815c:	3101      	adds	r1, #1
 800815e:	f43f adca 	beq.w	8007cf6 <_strtod_l+0x43e>
 8008162:	4b92      	ldr	r3, [pc, #584]	@ (80083ac <_strtod_l+0xaf4>)
 8008164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008166:	401a      	ands	r2, r3
 8008168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800816c:	f04f 0a00 	mov.w	sl, #0
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1b8      	bne.n	80080e8 <_strtod_l+0x830>
 8008176:	e5c9      	b.n	8007d0c <_strtod_l+0x454>
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	e7e8      	b.n	8008150 <_strtod_l+0x898>
 800817e:	4613      	mov	r3, r2
 8008180:	e7e6      	b.n	8008150 <_strtod_l+0x898>
 8008182:	ea53 030a 	orrs.w	r3, r3, sl
 8008186:	d0a1      	beq.n	80080cc <_strtod_l+0x814>
 8008188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800818a:	b1db      	cbz	r3, 80081c4 <_strtod_l+0x90c>
 800818c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800818e:	4213      	tst	r3, r2
 8008190:	d0ee      	beq.n	8008170 <_strtod_l+0x8b8>
 8008192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	4650      	mov	r0, sl
 8008198:	4659      	mov	r1, fp
 800819a:	b1bb      	cbz	r3, 80081cc <_strtod_l+0x914>
 800819c:	f7ff fb6c 	bl	8007878 <sulp>
 80081a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081a4:	ec53 2b10 	vmov	r2, r3, d0
 80081a8:	f7f8 f868 	bl	800027c <__adddf3>
 80081ac:	4682      	mov	sl, r0
 80081ae:	468b      	mov	fp, r1
 80081b0:	e7de      	b.n	8008170 <_strtod_l+0x8b8>
 80081b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081be:	f04f 3aff 	mov.w	sl, #4294967295
 80081c2:	e7d5      	b.n	8008170 <_strtod_l+0x8b8>
 80081c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081c6:	ea13 0f0a 	tst.w	r3, sl
 80081ca:	e7e1      	b.n	8008190 <_strtod_l+0x8d8>
 80081cc:	f7ff fb54 	bl	8007878 <sulp>
 80081d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081d4:	ec53 2b10 	vmov	r2, r3, d0
 80081d8:	f7f8 f84e 	bl	8000278 <__aeabi_dsub>
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	4682      	mov	sl, r0
 80081e2:	468b      	mov	fp, r1
 80081e4:	f7f8 fc68 	bl	8000ab8 <__aeabi_dcmpeq>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d0c1      	beq.n	8008170 <_strtod_l+0x8b8>
 80081ec:	e619      	b.n	8007e22 <_strtod_l+0x56a>
 80081ee:	4641      	mov	r1, r8
 80081f0:	4620      	mov	r0, r4
 80081f2:	f001 fb7d 	bl	80098f0 <__ratio>
 80081f6:	ec57 6b10 	vmov	r6, r7, d0
 80081fa:	2200      	movs	r2, #0
 80081fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fc6c 	bl	8000ae0 <__aeabi_dcmple>
 8008208:	2800      	cmp	r0, #0
 800820a:	d06f      	beq.n	80082ec <_strtod_l+0xa34>
 800820c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d17a      	bne.n	8008308 <_strtod_l+0xa50>
 8008212:	f1ba 0f00 	cmp.w	sl, #0
 8008216:	d158      	bne.n	80082ca <_strtod_l+0xa12>
 8008218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800821e:	2b00      	cmp	r3, #0
 8008220:	d15a      	bne.n	80082d8 <_strtod_l+0xa20>
 8008222:	4b64      	ldr	r3, [pc, #400]	@ (80083b4 <_strtod_l+0xafc>)
 8008224:	2200      	movs	r2, #0
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 fc4f 	bl	8000acc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d159      	bne.n	80082e6 <_strtod_l+0xa2e>
 8008232:	4630      	mov	r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	4b60      	ldr	r3, [pc, #384]	@ (80083b8 <_strtod_l+0xb00>)
 8008238:	2200      	movs	r2, #0
 800823a:	f7f8 f9d5 	bl	80005e8 <__aeabi_dmul>
 800823e:	4606      	mov	r6, r0
 8008240:	460f      	mov	r7, r1
 8008242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008246:	9606      	str	r6, [sp, #24]
 8008248:	9307      	str	r3, [sp, #28]
 800824a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800824e:	4d57      	ldr	r5, [pc, #348]	@ (80083ac <_strtod_l+0xaf4>)
 8008250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008256:	401d      	ands	r5, r3
 8008258:	4b58      	ldr	r3, [pc, #352]	@ (80083bc <_strtod_l+0xb04>)
 800825a:	429d      	cmp	r5, r3
 800825c:	f040 80b2 	bne.w	80083c4 <_strtod_l+0xb0c>
 8008260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008266:	ec4b ab10 	vmov	d0, sl, fp
 800826a:	f001 fa79 	bl	8009760 <__ulp>
 800826e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008272:	ec51 0b10 	vmov	r0, r1, d0
 8008276:	f7f8 f9b7 	bl	80005e8 <__aeabi_dmul>
 800827a:	4652      	mov	r2, sl
 800827c:	465b      	mov	r3, fp
 800827e:	f7f7 fffd 	bl	800027c <__adddf3>
 8008282:	460b      	mov	r3, r1
 8008284:	4949      	ldr	r1, [pc, #292]	@ (80083ac <_strtod_l+0xaf4>)
 8008286:	4a4e      	ldr	r2, [pc, #312]	@ (80083c0 <_strtod_l+0xb08>)
 8008288:	4019      	ands	r1, r3
 800828a:	4291      	cmp	r1, r2
 800828c:	4682      	mov	sl, r0
 800828e:	d942      	bls.n	8008316 <_strtod_l+0xa5e>
 8008290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008292:	4b47      	ldr	r3, [pc, #284]	@ (80083b0 <_strtod_l+0xaf8>)
 8008294:	429a      	cmp	r2, r3
 8008296:	d103      	bne.n	80082a0 <_strtod_l+0x9e8>
 8008298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800829a:	3301      	adds	r3, #1
 800829c:	f43f ad2b 	beq.w	8007cf6 <_strtod_l+0x43e>
 80082a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80083b0 <_strtod_l+0xaf8>
 80082a4:	f04f 3aff 	mov.w	sl, #4294967295
 80082a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082aa:	9805      	ldr	r0, [sp, #20]
 80082ac:	f000 ff24 	bl	80090f8 <_Bfree>
 80082b0:	9805      	ldr	r0, [sp, #20]
 80082b2:	4649      	mov	r1, r9
 80082b4:	f000 ff20 	bl	80090f8 <_Bfree>
 80082b8:	9805      	ldr	r0, [sp, #20]
 80082ba:	4641      	mov	r1, r8
 80082bc:	f000 ff1c 	bl	80090f8 <_Bfree>
 80082c0:	9805      	ldr	r0, [sp, #20]
 80082c2:	4621      	mov	r1, r4
 80082c4:	f000 ff18 	bl	80090f8 <_Bfree>
 80082c8:	e618      	b.n	8007efc <_strtod_l+0x644>
 80082ca:	f1ba 0f01 	cmp.w	sl, #1
 80082ce:	d103      	bne.n	80082d8 <_strtod_l+0xa20>
 80082d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f43f ada5 	beq.w	8007e22 <_strtod_l+0x56a>
 80082d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008388 <_strtod_l+0xad0>
 80082dc:	4f35      	ldr	r7, [pc, #212]	@ (80083b4 <_strtod_l+0xafc>)
 80082de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082e2:	2600      	movs	r6, #0
 80082e4:	e7b1      	b.n	800824a <_strtod_l+0x992>
 80082e6:	4f34      	ldr	r7, [pc, #208]	@ (80083b8 <_strtod_l+0xb00>)
 80082e8:	2600      	movs	r6, #0
 80082ea:	e7aa      	b.n	8008242 <_strtod_l+0x98a>
 80082ec:	4b32      	ldr	r3, [pc, #200]	@ (80083b8 <_strtod_l+0xb00>)
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f8 f978 	bl	80005e8 <__aeabi_dmul>
 80082f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d09f      	beq.n	8008242 <_strtod_l+0x98a>
 8008302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008306:	e7a0      	b.n	800824a <_strtod_l+0x992>
 8008308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008390 <_strtod_l+0xad8>
 800830c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008310:	ec57 6b17 	vmov	r6, r7, d7
 8008314:	e799      	b.n	800824a <_strtod_l+0x992>
 8008316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1c1      	bne.n	80082a8 <_strtod_l+0x9f0>
 8008324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008328:	0d1b      	lsrs	r3, r3, #20
 800832a:	051b      	lsls	r3, r3, #20
 800832c:	429d      	cmp	r5, r3
 800832e:	d1bb      	bne.n	80082a8 <_strtod_l+0x9f0>
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f8 fc68 	bl	8000c08 <__aeabi_d2lz>
 8008338:	f7f8 f928 	bl	800058c <__aeabi_l2d>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f7 ff98 	bl	8000278 <__aeabi_dsub>
 8008348:	460b      	mov	r3, r1
 800834a:	4602      	mov	r2, r0
 800834c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008356:	ea46 060a 	orr.w	r6, r6, sl
 800835a:	431e      	orrs	r6, r3
 800835c:	d06f      	beq.n	800843e <_strtod_l+0xb86>
 800835e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008398 <_strtod_l+0xae0>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f8 fbb2 	bl	8000acc <__aeabi_dcmplt>
 8008368:	2800      	cmp	r0, #0
 800836a:	f47f accf 	bne.w	8007d0c <_strtod_l+0x454>
 800836e:	a30c      	add	r3, pc, #48	@ (adr r3, 80083a0 <_strtod_l+0xae8>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008378:	f7f8 fbc6 	bl	8000b08 <__aeabi_dcmpgt>
 800837c:	2800      	cmp	r0, #0
 800837e:	d093      	beq.n	80082a8 <_strtod_l+0x9f0>
 8008380:	e4c4      	b.n	8007d0c <_strtod_l+0x454>
 8008382:	bf00      	nop
 8008384:	f3af 8000 	nop.w
 8008388:	00000000 	.word	0x00000000
 800838c:	bff00000 	.word	0xbff00000
 8008390:	00000000 	.word	0x00000000
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	94a03595 	.word	0x94a03595
 800839c:	3fdfffff 	.word	0x3fdfffff
 80083a0:	35afe535 	.word	0x35afe535
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	000fffff 	.word	0x000fffff
 80083ac:	7ff00000 	.word	0x7ff00000
 80083b0:	7fefffff 	.word	0x7fefffff
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	3fe00000 	.word	0x3fe00000
 80083bc:	7fe00000 	.word	0x7fe00000
 80083c0:	7c9fffff 	.word	0x7c9fffff
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	b323      	cbz	r3, 8008412 <_strtod_l+0xb5a>
 80083c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083cc:	d821      	bhi.n	8008412 <_strtod_l+0xb5a>
 80083ce:	a328      	add	r3, pc, #160	@ (adr r3, 8008470 <_strtod_l+0xbb8>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 fb82 	bl	8000ae0 <__aeabi_dcmple>
 80083dc:	b1a0      	cbz	r0, 8008408 <_strtod_l+0xb50>
 80083de:	4639      	mov	r1, r7
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7f8 fbd9 	bl	8000b98 <__aeabi_d2uiz>
 80083e6:	2801      	cmp	r0, #1
 80083e8:	bf38      	it	cc
 80083ea:	2001      	movcc	r0, #1
 80083ec:	f7f8 f882 	bl	80004f4 <__aeabi_ui2d>
 80083f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f2:	4606      	mov	r6, r0
 80083f4:	460f      	mov	r7, r1
 80083f6:	b9fb      	cbnz	r3, 8008438 <_strtod_l+0xb80>
 80083f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80083fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8008400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800840a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800840e:	1b5b      	subs	r3, r3, r5
 8008410:	9311      	str	r3, [sp, #68]	@ 0x44
 8008412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800841a:	f001 f9a1 	bl	8009760 <__ulp>
 800841e:	4650      	mov	r0, sl
 8008420:	ec53 2b10 	vmov	r2, r3, d0
 8008424:	4659      	mov	r1, fp
 8008426:	f7f8 f8df 	bl	80005e8 <__aeabi_dmul>
 800842a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800842e:	f7f7 ff25 	bl	800027c <__adddf3>
 8008432:	4682      	mov	sl, r0
 8008434:	468b      	mov	fp, r1
 8008436:	e770      	b.n	800831a <_strtod_l+0xa62>
 8008438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800843c:	e7e0      	b.n	8008400 <_strtod_l+0xb48>
 800843e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008478 <_strtod_l+0xbc0>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f8 fb42 	bl	8000acc <__aeabi_dcmplt>
 8008448:	e798      	b.n	800837c <_strtod_l+0xac4>
 800844a:	2300      	movs	r3, #0
 800844c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800844e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	f7ff ba6d 	b.w	8007932 <_strtod_l+0x7a>
 8008458:	2a65      	cmp	r2, #101	@ 0x65
 800845a:	f43f ab66 	beq.w	8007b2a <_strtod_l+0x272>
 800845e:	2a45      	cmp	r2, #69	@ 0x45
 8008460:	f43f ab63 	beq.w	8007b2a <_strtod_l+0x272>
 8008464:	2301      	movs	r3, #1
 8008466:	f7ff bb9e 	b.w	8007ba6 <_strtod_l+0x2ee>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	ffc00000 	.word	0xffc00000
 8008474:	41dfffff 	.word	0x41dfffff
 8008478:	94a03595 	.word	0x94a03595
 800847c:	3fcfffff 	.word	0x3fcfffff

08008480 <strtod>:
 8008480:	460a      	mov	r2, r1
 8008482:	4601      	mov	r1, r0
 8008484:	4802      	ldr	r0, [pc, #8]	@ (8008490 <strtod+0x10>)
 8008486:	4b03      	ldr	r3, [pc, #12]	@ (8008494 <strtod+0x14>)
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f7ff ba15 	b.w	80078b8 <_strtod_l>
 800848e:	bf00      	nop
 8008490:	20000188 	.word	0x20000188
 8008494:	2000001c 	.word	0x2000001c

08008498 <std>:
 8008498:	2300      	movs	r3, #0
 800849a:	b510      	push	{r4, lr}
 800849c:	4604      	mov	r4, r0
 800849e:	e9c0 3300 	strd	r3, r3, [r0]
 80084a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a6:	6083      	str	r3, [r0, #8]
 80084a8:	8181      	strh	r1, [r0, #12]
 80084aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80084ac:	81c2      	strh	r2, [r0, #14]
 80084ae:	6183      	str	r3, [r0, #24]
 80084b0:	4619      	mov	r1, r3
 80084b2:	2208      	movs	r2, #8
 80084b4:	305c      	adds	r0, #92	@ 0x5c
 80084b6:	f000 f8f4 	bl	80086a2 <memset>
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x58>)
 80084bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x5c>)
 80084c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x60>)
 80084c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <std+0x64>)
 80084c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <std+0x68>)
 80084cc:	6224      	str	r4, [r4, #32]
 80084ce:	429c      	cmp	r4, r3
 80084d0:	d006      	beq.n	80084e0 <std+0x48>
 80084d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084d6:	4294      	cmp	r4, r2
 80084d8:	d002      	beq.n	80084e0 <std+0x48>
 80084da:	33d0      	adds	r3, #208	@ 0xd0
 80084dc:	429c      	cmp	r4, r3
 80084de:	d105      	bne.n	80084ec <std+0x54>
 80084e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e8:	f000 b966 	b.w	80087b8 <__retarget_lock_init_recursive>
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	bf00      	nop
 80084f0:	0800861d 	.word	0x0800861d
 80084f4:	0800863f 	.word	0x0800863f
 80084f8:	08008677 	.word	0x08008677
 80084fc:	0800869b 	.word	0x0800869b
 8008500:	2000048c 	.word	0x2000048c

08008504 <stdio_exit_handler>:
 8008504:	4a02      	ldr	r2, [pc, #8]	@ (8008510 <stdio_exit_handler+0xc>)
 8008506:	4903      	ldr	r1, [pc, #12]	@ (8008514 <stdio_exit_handler+0x10>)
 8008508:	4803      	ldr	r0, [pc, #12]	@ (8008518 <stdio_exit_handler+0x14>)
 800850a:	f000 b869 	b.w	80085e0 <_fwalk_sglue>
 800850e:	bf00      	nop
 8008510:	20000010 	.word	0x20000010
 8008514:	08009b01 	.word	0x08009b01
 8008518:	2000018c 	.word	0x2000018c

0800851c <cleanup_stdio>:
 800851c:	6841      	ldr	r1, [r0, #4]
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <cleanup_stdio+0x34>)
 8008520:	4299      	cmp	r1, r3
 8008522:	b510      	push	{r4, lr}
 8008524:	4604      	mov	r4, r0
 8008526:	d001      	beq.n	800852c <cleanup_stdio+0x10>
 8008528:	f001 faea 	bl	8009b00 <_fflush_r>
 800852c:	68a1      	ldr	r1, [r4, #8]
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <cleanup_stdio+0x38>)
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <cleanup_stdio+0x1e>
 8008534:	4620      	mov	r0, r4
 8008536:	f001 fae3 	bl	8009b00 <_fflush_r>
 800853a:	68e1      	ldr	r1, [r4, #12]
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <cleanup_stdio+0x3c>)
 800853e:	4299      	cmp	r1, r3
 8008540:	d004      	beq.n	800854c <cleanup_stdio+0x30>
 8008542:	4620      	mov	r0, r4
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008548:	f001 bada 	b.w	8009b00 <_fflush_r>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	bf00      	nop
 8008550:	2000048c 	.word	0x2000048c
 8008554:	200004f4 	.word	0x200004f4
 8008558:	2000055c 	.word	0x2000055c

0800855c <global_stdio_init.part.0>:
 800855c:	b510      	push	{r4, lr}
 800855e:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <global_stdio_init.part.0+0x30>)
 8008560:	4c0b      	ldr	r4, [pc, #44]	@ (8008590 <global_stdio_init.part.0+0x34>)
 8008562:	4a0c      	ldr	r2, [pc, #48]	@ (8008594 <global_stdio_init.part.0+0x38>)
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	4620      	mov	r0, r4
 8008568:	2200      	movs	r2, #0
 800856a:	2104      	movs	r1, #4
 800856c:	f7ff ff94 	bl	8008498 <std>
 8008570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008574:	2201      	movs	r2, #1
 8008576:	2109      	movs	r1, #9
 8008578:	f7ff ff8e 	bl	8008498 <std>
 800857c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008580:	2202      	movs	r2, #2
 8008582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008586:	2112      	movs	r1, #18
 8008588:	f7ff bf86 	b.w	8008498 <std>
 800858c:	200005c4 	.word	0x200005c4
 8008590:	2000048c 	.word	0x2000048c
 8008594:	08008505 	.word	0x08008505

08008598 <__sfp_lock_acquire>:
 8008598:	4801      	ldr	r0, [pc, #4]	@ (80085a0 <__sfp_lock_acquire+0x8>)
 800859a:	f000 b90e 	b.w	80087ba <__retarget_lock_acquire_recursive>
 800859e:	bf00      	nop
 80085a0:	200005cd 	.word	0x200005cd

080085a4 <__sfp_lock_release>:
 80085a4:	4801      	ldr	r0, [pc, #4]	@ (80085ac <__sfp_lock_release+0x8>)
 80085a6:	f000 b909 	b.w	80087bc <__retarget_lock_release_recursive>
 80085aa:	bf00      	nop
 80085ac:	200005cd 	.word	0x200005cd

080085b0 <__sinit>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4604      	mov	r4, r0
 80085b4:	f7ff fff0 	bl	8008598 <__sfp_lock_acquire>
 80085b8:	6a23      	ldr	r3, [r4, #32]
 80085ba:	b11b      	cbz	r3, 80085c4 <__sinit+0x14>
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	f7ff bff0 	b.w	80085a4 <__sfp_lock_release>
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <__sinit+0x28>)
 80085c6:	6223      	str	r3, [r4, #32]
 80085c8:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <__sinit+0x2c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f5      	bne.n	80085bc <__sinit+0xc>
 80085d0:	f7ff ffc4 	bl	800855c <global_stdio_init.part.0>
 80085d4:	e7f2      	b.n	80085bc <__sinit+0xc>
 80085d6:	bf00      	nop
 80085d8:	0800851d 	.word	0x0800851d
 80085dc:	200005c4 	.word	0x200005c4

080085e0 <_fwalk_sglue>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4607      	mov	r7, r0
 80085e6:	4688      	mov	r8, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	2600      	movs	r6, #0
 80085ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f0:	f1b9 0901 	subs.w	r9, r9, #1
 80085f4:	d505      	bpl.n	8008602 <_fwalk_sglue+0x22>
 80085f6:	6824      	ldr	r4, [r4, #0]
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	d1f7      	bne.n	80085ec <_fwalk_sglue+0xc>
 80085fc:	4630      	mov	r0, r6
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d907      	bls.n	8008618 <_fwalk_sglue+0x38>
 8008608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800860c:	3301      	adds	r3, #1
 800860e:	d003      	beq.n	8008618 <_fwalk_sglue+0x38>
 8008610:	4629      	mov	r1, r5
 8008612:	4638      	mov	r0, r7
 8008614:	47c0      	blx	r8
 8008616:	4306      	orrs	r6, r0
 8008618:	3568      	adds	r5, #104	@ 0x68
 800861a:	e7e9      	b.n	80085f0 <_fwalk_sglue+0x10>

0800861c <__sread>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	f000 f87a 	bl	800871c <_read_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	bfab      	itete	ge
 800862c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800862e:	89a3      	ldrhlt	r3, [r4, #12]
 8008630:	181b      	addge	r3, r3, r0
 8008632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008636:	bfac      	ite	ge
 8008638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800863a:	81a3      	strhlt	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__swrite>:
 800863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	461f      	mov	r7, r3
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	05db      	lsls	r3, r3, #23
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4616      	mov	r6, r2
 800864e:	d505      	bpl.n	800865c <__swrite+0x1e>
 8008650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f000 f84e 	bl	80086f8 <_lseek_r>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	f000 b865 	b.w	8008740 <_write_r>

08008676 <__sseek>:
 8008676:	b510      	push	{r4, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f000 f83b 	bl	80086f8 <_lseek_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	bf15      	itete	ne
 8008688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800868a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800868e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008692:	81a3      	strheq	r3, [r4, #12]
 8008694:	bf18      	it	ne
 8008696:	81a3      	strhne	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__sclose>:
 800869a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869e:	f000 b81b 	b.w	80086d8 <_close_r>

080086a2 <memset>:
 80086a2:	4402      	add	r2, r0
 80086a4:	4603      	mov	r3, r0
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d100      	bne.n	80086ac <memset+0xa>
 80086aa:	4770      	bx	lr
 80086ac:	f803 1b01 	strb.w	r1, [r3], #1
 80086b0:	e7f9      	b.n	80086a6 <memset+0x4>

080086b2 <strncmp>:
 80086b2:	b510      	push	{r4, lr}
 80086b4:	b16a      	cbz	r2, 80086d2 <strncmp+0x20>
 80086b6:	3901      	subs	r1, #1
 80086b8:	1884      	adds	r4, r0, r2
 80086ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d103      	bne.n	80086ce <strncmp+0x1c>
 80086c6:	42a0      	cmp	r0, r4
 80086c8:	d001      	beq.n	80086ce <strncmp+0x1c>
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	d1f5      	bne.n	80086ba <strncmp+0x8>
 80086ce:	1ad0      	subs	r0, r2, r3
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	4610      	mov	r0, r2
 80086d4:	e7fc      	b.n	80086d0 <strncmp+0x1e>
	...

080086d8 <_close_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_close_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 fbb4 	bl	8001e50 <_close>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_close_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_close_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	200005c8 	.word	0x200005c8

080086f8 <_lseek_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	@ (8008718 <_lseek_r+0x20>)
 80086fc:	4604      	mov	r4, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	602a      	str	r2, [r5, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7f9 fbc9 	bl	8001e9e <_lseek>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_lseek_r+0x1e>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_lseek_r+0x1e>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	200005c8 	.word	0x200005c8

0800871c <_read_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d07      	ldr	r5, [pc, #28]	@ (800873c <_read_r+0x20>)
 8008720:	4604      	mov	r4, r0
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	2200      	movs	r2, #0
 8008728:	602a      	str	r2, [r5, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	f7f9 fb57 	bl	8001dde <_read>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_read_r+0x1e>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_read_r+0x1e>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	200005c8 	.word	0x200005c8

08008740 <_write_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	@ (8008760 <_write_r+0x20>)
 8008744:	4604      	mov	r4, r0
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	2200      	movs	r2, #0
 800874c:	602a      	str	r2, [r5, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f7f9 fb62 	bl	8001e18 <_write>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_write_r+0x1e>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_write_r+0x1e>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	200005c8 	.word	0x200005c8

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	@ (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000188 	.word	0x20000188

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4d0d      	ldr	r5, [pc, #52]	@ (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	@ (80087ac <__libc_init_array+0x3c>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2600      	movs	r6, #0
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4d0b      	ldr	r5, [pc, #44]	@ (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	@ (80087b4 <__libc_init_array+0x44>)
 8008784:	f002 fdd0 	bl	800b328 <_init>
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2600      	movs	r6, #0
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	0800b790 	.word	0x0800b790
 80087ac:	0800b790 	.word	0x0800b790
 80087b0:	0800b790 	.word	0x0800b790
 80087b4:	0800b794 	.word	0x0800b794

080087b8 <__retarget_lock_init_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_acquire_recursive>:
 80087ba:	4770      	bx	lr

080087bc <__retarget_lock_release_recursive>:
 80087bc:	4770      	bx	lr

080087be <memcpy>:
 80087be:	440a      	add	r2, r1
 80087c0:	4291      	cmp	r1, r2
 80087c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c6:	d100      	bne.n	80087ca <memcpy+0xc>
 80087c8:	4770      	bx	lr
 80087ca:	b510      	push	{r4, lr}
 80087cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d4:	4291      	cmp	r1, r2
 80087d6:	d1f9      	bne.n	80087cc <memcpy+0xe>
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	0000      	movs	r0, r0
 80087dc:	0000      	movs	r0, r0
	...

080087e0 <nan>:
 80087e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80087e8 <nan+0x8>
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	00000000 	.word	0x00000000
 80087ec:	7ff80000 	.word	0x7ff80000

080087f0 <_free_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4605      	mov	r5, r0
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d041      	beq.n	800887c <_free_r+0x8c>
 80087f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fc:	1f0c      	subs	r4, r1, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfb8      	it	lt
 8008802:	18e4      	addlt	r4, r4, r3
 8008804:	f000 fc2c 	bl	8009060 <__malloc_lock>
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <_free_r+0x90>)
 800880a:	6813      	ldr	r3, [r2, #0]
 800880c:	b933      	cbnz	r3, 800881c <_free_r+0x2c>
 800880e:	6063      	str	r3, [r4, #4]
 8008810:	6014      	str	r4, [r2, #0]
 8008812:	4628      	mov	r0, r5
 8008814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008818:	f000 bc28 	b.w	800906c <__malloc_unlock>
 800881c:	42a3      	cmp	r3, r4
 800881e:	d908      	bls.n	8008832 <_free_r+0x42>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	1821      	adds	r1, r4, r0
 8008824:	428b      	cmp	r3, r1
 8008826:	bf01      	itttt	eq
 8008828:	6819      	ldreq	r1, [r3, #0]
 800882a:	685b      	ldreq	r3, [r3, #4]
 800882c:	1809      	addeq	r1, r1, r0
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	e7ed      	b.n	800880e <_free_r+0x1e>
 8008832:	461a      	mov	r2, r3
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	b10b      	cbz	r3, 800883c <_free_r+0x4c>
 8008838:	42a3      	cmp	r3, r4
 800883a:	d9fa      	bls.n	8008832 <_free_r+0x42>
 800883c:	6811      	ldr	r1, [r2, #0]
 800883e:	1850      	adds	r0, r2, r1
 8008840:	42a0      	cmp	r0, r4
 8008842:	d10b      	bne.n	800885c <_free_r+0x6c>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	4401      	add	r1, r0
 8008848:	1850      	adds	r0, r2, r1
 800884a:	4283      	cmp	r3, r0
 800884c:	6011      	str	r1, [r2, #0]
 800884e:	d1e0      	bne.n	8008812 <_free_r+0x22>
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	6053      	str	r3, [r2, #4]
 8008856:	4408      	add	r0, r1
 8008858:	6010      	str	r0, [r2, #0]
 800885a:	e7da      	b.n	8008812 <_free_r+0x22>
 800885c:	d902      	bls.n	8008864 <_free_r+0x74>
 800885e:	230c      	movs	r3, #12
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	e7d6      	b.n	8008812 <_free_r+0x22>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	1821      	adds	r1, r4, r0
 8008868:	428b      	cmp	r3, r1
 800886a:	bf04      	itt	eq
 800886c:	6819      	ldreq	r1, [r3, #0]
 800886e:	685b      	ldreq	r3, [r3, #4]
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	bf04      	itt	eq
 8008874:	1809      	addeq	r1, r1, r0
 8008876:	6021      	streq	r1, [r4, #0]
 8008878:	6054      	str	r4, [r2, #4]
 800887a:	e7ca      	b.n	8008812 <_free_r+0x22>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	200005d4 	.word	0x200005d4

08008884 <rshift>:
 8008884:	6903      	ldr	r3, [r0, #16]
 8008886:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800888a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800888e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008892:	f100 0414 	add.w	r4, r0, #20
 8008896:	dd45      	ble.n	8008924 <rshift+0xa0>
 8008898:	f011 011f 	ands.w	r1, r1, #31
 800889c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088a4:	d10c      	bne.n	80088c0 <rshift+0x3c>
 80088a6:	f100 0710 	add.w	r7, r0, #16
 80088aa:	4629      	mov	r1, r5
 80088ac:	42b1      	cmp	r1, r6
 80088ae:	d334      	bcc.n	800891a <rshift+0x96>
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	1eea      	subs	r2, r5, #3
 80088b6:	4296      	cmp	r6, r2
 80088b8:	bf38      	it	cc
 80088ba:	2300      	movcc	r3, #0
 80088bc:	4423      	add	r3, r4
 80088be:	e015      	b.n	80088ec <rshift+0x68>
 80088c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088c4:	f1c1 0820 	rsb	r8, r1, #32
 80088c8:	40cf      	lsrs	r7, r1
 80088ca:	f105 0e04 	add.w	lr, r5, #4
 80088ce:	46a1      	mov	r9, r4
 80088d0:	4576      	cmp	r6, lr
 80088d2:	46f4      	mov	ip, lr
 80088d4:	d815      	bhi.n	8008902 <rshift+0x7e>
 80088d6:	1a9a      	subs	r2, r3, r2
 80088d8:	0092      	lsls	r2, r2, #2
 80088da:	3a04      	subs	r2, #4
 80088dc:	3501      	adds	r5, #1
 80088de:	42ae      	cmp	r6, r5
 80088e0:	bf38      	it	cc
 80088e2:	2200      	movcc	r2, #0
 80088e4:	18a3      	adds	r3, r4, r2
 80088e6:	50a7      	str	r7, [r4, r2]
 80088e8:	b107      	cbz	r7, 80088ec <rshift+0x68>
 80088ea:	3304      	adds	r3, #4
 80088ec:	1b1a      	subs	r2, r3, r4
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088f4:	bf08      	it	eq
 80088f6:	2300      	moveq	r3, #0
 80088f8:	6102      	str	r2, [r0, #16]
 80088fa:	bf08      	it	eq
 80088fc:	6143      	streq	r3, [r0, #20]
 80088fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008902:	f8dc c000 	ldr.w	ip, [ip]
 8008906:	fa0c fc08 	lsl.w	ip, ip, r8
 800890a:	ea4c 0707 	orr.w	r7, ip, r7
 800890e:	f849 7b04 	str.w	r7, [r9], #4
 8008912:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008916:	40cf      	lsrs	r7, r1
 8008918:	e7da      	b.n	80088d0 <rshift+0x4c>
 800891a:	f851 cb04 	ldr.w	ip, [r1], #4
 800891e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008922:	e7c3      	b.n	80088ac <rshift+0x28>
 8008924:	4623      	mov	r3, r4
 8008926:	e7e1      	b.n	80088ec <rshift+0x68>

08008928 <__hexdig_fun>:
 8008928:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800892c:	2b09      	cmp	r3, #9
 800892e:	d802      	bhi.n	8008936 <__hexdig_fun+0xe>
 8008930:	3820      	subs	r0, #32
 8008932:	b2c0      	uxtb	r0, r0
 8008934:	4770      	bx	lr
 8008936:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800893a:	2b05      	cmp	r3, #5
 800893c:	d801      	bhi.n	8008942 <__hexdig_fun+0x1a>
 800893e:	3847      	subs	r0, #71	@ 0x47
 8008940:	e7f7      	b.n	8008932 <__hexdig_fun+0xa>
 8008942:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008946:	2b05      	cmp	r3, #5
 8008948:	d801      	bhi.n	800894e <__hexdig_fun+0x26>
 800894a:	3827      	subs	r0, #39	@ 0x27
 800894c:	e7f1      	b.n	8008932 <__hexdig_fun+0xa>
 800894e:	2000      	movs	r0, #0
 8008950:	4770      	bx	lr
	...

08008954 <__gethex>:
 8008954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	b085      	sub	sp, #20
 800895a:	468a      	mov	sl, r1
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	680b      	ldr	r3, [r1, #0]
 8008960:	9001      	str	r0, [sp, #4]
 8008962:	4690      	mov	r8, r2
 8008964:	1c9c      	adds	r4, r3, #2
 8008966:	46a1      	mov	r9, r4
 8008968:	f814 0b01 	ldrb.w	r0, [r4], #1
 800896c:	2830      	cmp	r0, #48	@ 0x30
 800896e:	d0fa      	beq.n	8008966 <__gethex+0x12>
 8008970:	eba9 0303 	sub.w	r3, r9, r3
 8008974:	f1a3 0b02 	sub.w	fp, r3, #2
 8008978:	f7ff ffd6 	bl	8008928 <__hexdig_fun>
 800897c:	4605      	mov	r5, r0
 800897e:	2800      	cmp	r0, #0
 8008980:	d168      	bne.n	8008a54 <__gethex+0x100>
 8008982:	49a0      	ldr	r1, [pc, #640]	@ (8008c04 <__gethex+0x2b0>)
 8008984:	2201      	movs	r2, #1
 8008986:	4648      	mov	r0, r9
 8008988:	f7ff fe93 	bl	80086b2 <strncmp>
 800898c:	4607      	mov	r7, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	d167      	bne.n	8008a62 <__gethex+0x10e>
 8008992:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008996:	4626      	mov	r6, r4
 8008998:	f7ff ffc6 	bl	8008928 <__hexdig_fun>
 800899c:	2800      	cmp	r0, #0
 800899e:	d062      	beq.n	8008a66 <__gethex+0x112>
 80089a0:	4623      	mov	r3, r4
 80089a2:	7818      	ldrb	r0, [r3, #0]
 80089a4:	2830      	cmp	r0, #48	@ 0x30
 80089a6:	4699      	mov	r9, r3
 80089a8:	f103 0301 	add.w	r3, r3, #1
 80089ac:	d0f9      	beq.n	80089a2 <__gethex+0x4e>
 80089ae:	f7ff ffbb 	bl	8008928 <__hexdig_fun>
 80089b2:	fab0 f580 	clz	r5, r0
 80089b6:	096d      	lsrs	r5, r5, #5
 80089b8:	f04f 0b01 	mov.w	fp, #1
 80089bc:	464a      	mov	r2, r9
 80089be:	4616      	mov	r6, r2
 80089c0:	3201      	adds	r2, #1
 80089c2:	7830      	ldrb	r0, [r6, #0]
 80089c4:	f7ff ffb0 	bl	8008928 <__hexdig_fun>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1f8      	bne.n	80089be <__gethex+0x6a>
 80089cc:	498d      	ldr	r1, [pc, #564]	@ (8008c04 <__gethex+0x2b0>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff fe6e 	bl	80086b2 <strncmp>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d13f      	bne.n	8008a5a <__gethex+0x106>
 80089da:	b944      	cbnz	r4, 80089ee <__gethex+0x9a>
 80089dc:	1c74      	adds	r4, r6, #1
 80089de:	4622      	mov	r2, r4
 80089e0:	4616      	mov	r6, r2
 80089e2:	3201      	adds	r2, #1
 80089e4:	7830      	ldrb	r0, [r6, #0]
 80089e6:	f7ff ff9f 	bl	8008928 <__hexdig_fun>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1f8      	bne.n	80089e0 <__gethex+0x8c>
 80089ee:	1ba4      	subs	r4, r4, r6
 80089f0:	00a7      	lsls	r7, r4, #2
 80089f2:	7833      	ldrb	r3, [r6, #0]
 80089f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089f8:	2b50      	cmp	r3, #80	@ 0x50
 80089fa:	d13e      	bne.n	8008a7a <__gethex+0x126>
 80089fc:	7873      	ldrb	r3, [r6, #1]
 80089fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a00:	d033      	beq.n	8008a6a <__gethex+0x116>
 8008a02:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a04:	d034      	beq.n	8008a70 <__gethex+0x11c>
 8008a06:	1c71      	adds	r1, r6, #1
 8008a08:	2400      	movs	r4, #0
 8008a0a:	7808      	ldrb	r0, [r1, #0]
 8008a0c:	f7ff ff8c 	bl	8008928 <__hexdig_fun>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b18      	cmp	r3, #24
 8008a16:	d830      	bhi.n	8008a7a <__gethex+0x126>
 8008a18:	f1a0 0210 	sub.w	r2, r0, #16
 8008a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a20:	f7ff ff82 	bl	8008928 <__hexdig_fun>
 8008a24:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a28:	fa5f fc8c 	uxtb.w	ip, ip
 8008a2c:	f1bc 0f18 	cmp.w	ip, #24
 8008a30:	f04f 030a 	mov.w	r3, #10
 8008a34:	d91e      	bls.n	8008a74 <__gethex+0x120>
 8008a36:	b104      	cbz	r4, 8008a3a <__gethex+0xe6>
 8008a38:	4252      	negs	r2, r2
 8008a3a:	4417      	add	r7, r2
 8008a3c:	f8ca 1000 	str.w	r1, [sl]
 8008a40:	b1ed      	cbz	r5, 8008a7e <__gethex+0x12a>
 8008a42:	f1bb 0f00 	cmp.w	fp, #0
 8008a46:	bf0c      	ite	eq
 8008a48:	2506      	moveq	r5, #6
 8008a4a:	2500      	movne	r5, #0
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	b005      	add	sp, #20
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	2500      	movs	r5, #0
 8008a56:	462c      	mov	r4, r5
 8008a58:	e7b0      	b.n	80089bc <__gethex+0x68>
 8008a5a:	2c00      	cmp	r4, #0
 8008a5c:	d1c7      	bne.n	80089ee <__gethex+0x9a>
 8008a5e:	4627      	mov	r7, r4
 8008a60:	e7c7      	b.n	80089f2 <__gethex+0x9e>
 8008a62:	464e      	mov	r6, r9
 8008a64:	462f      	mov	r7, r5
 8008a66:	2501      	movs	r5, #1
 8008a68:	e7c3      	b.n	80089f2 <__gethex+0x9e>
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	1cb1      	adds	r1, r6, #2
 8008a6e:	e7cc      	b.n	8008a0a <__gethex+0xb6>
 8008a70:	2401      	movs	r4, #1
 8008a72:	e7fb      	b.n	8008a6c <__gethex+0x118>
 8008a74:	fb03 0002 	mla	r0, r3, r2, r0
 8008a78:	e7ce      	b.n	8008a18 <__gethex+0xc4>
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	e7de      	b.n	8008a3c <__gethex+0xe8>
 8008a7e:	eba6 0309 	sub.w	r3, r6, r9
 8008a82:	3b01      	subs	r3, #1
 8008a84:	4629      	mov	r1, r5
 8008a86:	2b07      	cmp	r3, #7
 8008a88:	dc0a      	bgt.n	8008aa0 <__gethex+0x14c>
 8008a8a:	9801      	ldr	r0, [sp, #4]
 8008a8c:	f000 faf4 	bl	8009078 <_Balloc>
 8008a90:	4604      	mov	r4, r0
 8008a92:	b940      	cbnz	r0, 8008aa6 <__gethex+0x152>
 8008a94:	4b5c      	ldr	r3, [pc, #368]	@ (8008c08 <__gethex+0x2b4>)
 8008a96:	4602      	mov	r2, r0
 8008a98:	21e4      	movs	r1, #228	@ 0xe4
 8008a9a:	485c      	ldr	r0, [pc, #368]	@ (8008c0c <__gethex+0x2b8>)
 8008a9c:	f001 f868 	bl	8009b70 <__assert_func>
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	105b      	asrs	r3, r3, #1
 8008aa4:	e7ef      	b.n	8008a86 <__gethex+0x132>
 8008aa6:	f100 0a14 	add.w	sl, r0, #20
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4655      	mov	r5, sl
 8008aae:	469b      	mov	fp, r3
 8008ab0:	45b1      	cmp	r9, r6
 8008ab2:	d337      	bcc.n	8008b24 <__gethex+0x1d0>
 8008ab4:	f845 bb04 	str.w	fp, [r5], #4
 8008ab8:	eba5 050a 	sub.w	r5, r5, sl
 8008abc:	10ad      	asrs	r5, r5, #2
 8008abe:	6125      	str	r5, [r4, #16]
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	f000 fbcb 	bl	800925c <__hi0bits>
 8008ac6:	016d      	lsls	r5, r5, #5
 8008ac8:	f8d8 6000 	ldr.w	r6, [r8]
 8008acc:	1a2d      	subs	r5, r5, r0
 8008ace:	42b5      	cmp	r5, r6
 8008ad0:	dd54      	ble.n	8008b7c <__gethex+0x228>
 8008ad2:	1bad      	subs	r5, r5, r6
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 ff5f 	bl	800999a <__any_on>
 8008adc:	4681      	mov	r9, r0
 8008ade:	b178      	cbz	r0, 8008b00 <__gethex+0x1ac>
 8008ae0:	1e6b      	subs	r3, r5, #1
 8008ae2:	1159      	asrs	r1, r3, #5
 8008ae4:	f003 021f 	and.w	r2, r3, #31
 8008ae8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008aec:	f04f 0901 	mov.w	r9, #1
 8008af0:	fa09 f202 	lsl.w	r2, r9, r2
 8008af4:	420a      	tst	r2, r1
 8008af6:	d003      	beq.n	8008b00 <__gethex+0x1ac>
 8008af8:	454b      	cmp	r3, r9
 8008afa:	dc36      	bgt.n	8008b6a <__gethex+0x216>
 8008afc:	f04f 0902 	mov.w	r9, #2
 8008b00:	4629      	mov	r1, r5
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7ff febe 	bl	8008884 <rshift>
 8008b08:	442f      	add	r7, r5
 8008b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b0e:	42bb      	cmp	r3, r7
 8008b10:	da42      	bge.n	8008b98 <__gethex+0x244>
 8008b12:	9801      	ldr	r0, [sp, #4]
 8008b14:	4621      	mov	r1, r4
 8008b16:	f000 faef 	bl	80090f8 <_Bfree>
 8008b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	25a3      	movs	r5, #163	@ 0xa3
 8008b22:	e793      	b.n	8008a4c <__gethex+0xf8>
 8008b24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b28:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b2a:	d012      	beq.n	8008b52 <__gethex+0x1fe>
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	d104      	bne.n	8008b3a <__gethex+0x1e6>
 8008b30:	f845 bb04 	str.w	fp, [r5], #4
 8008b34:	f04f 0b00 	mov.w	fp, #0
 8008b38:	465b      	mov	r3, fp
 8008b3a:	7830      	ldrb	r0, [r6, #0]
 8008b3c:	9303      	str	r3, [sp, #12]
 8008b3e:	f7ff fef3 	bl	8008928 <__hexdig_fun>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	f000 000f 	and.w	r0, r0, #15
 8008b48:	4098      	lsls	r0, r3
 8008b4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b4e:	3304      	adds	r3, #4
 8008b50:	e7ae      	b.n	8008ab0 <__gethex+0x15c>
 8008b52:	45b1      	cmp	r9, r6
 8008b54:	d8ea      	bhi.n	8008b2c <__gethex+0x1d8>
 8008b56:	492b      	ldr	r1, [pc, #172]	@ (8008c04 <__gethex+0x2b0>)
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff fda8 	bl	80086b2 <strncmp>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1e1      	bne.n	8008b2c <__gethex+0x1d8>
 8008b68:	e7a2      	b.n	8008ab0 <__gethex+0x15c>
 8008b6a:	1ea9      	subs	r1, r5, #2
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 ff14 	bl	800999a <__any_on>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0c2      	beq.n	8008afc <__gethex+0x1a8>
 8008b76:	f04f 0903 	mov.w	r9, #3
 8008b7a:	e7c1      	b.n	8008b00 <__gethex+0x1ac>
 8008b7c:	da09      	bge.n	8008b92 <__gethex+0x23e>
 8008b7e:	1b75      	subs	r5, r6, r5
 8008b80:	4621      	mov	r1, r4
 8008b82:	9801      	ldr	r0, [sp, #4]
 8008b84:	462a      	mov	r2, r5
 8008b86:	f000 fccf 	bl	8009528 <__lshift>
 8008b8a:	1b7f      	subs	r7, r7, r5
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	f100 0a14 	add.w	sl, r0, #20
 8008b92:	f04f 0900 	mov.w	r9, #0
 8008b96:	e7b8      	b.n	8008b0a <__gethex+0x1b6>
 8008b98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b9c:	42bd      	cmp	r5, r7
 8008b9e:	dd6f      	ble.n	8008c80 <__gethex+0x32c>
 8008ba0:	1bed      	subs	r5, r5, r7
 8008ba2:	42ae      	cmp	r6, r5
 8008ba4:	dc34      	bgt.n	8008c10 <__gethex+0x2bc>
 8008ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d022      	beq.n	8008bf4 <__gethex+0x2a0>
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d024      	beq.n	8008bfc <__gethex+0x2a8>
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d115      	bne.n	8008be2 <__gethex+0x28e>
 8008bb6:	42ae      	cmp	r6, r5
 8008bb8:	d113      	bne.n	8008be2 <__gethex+0x28e>
 8008bba:	2e01      	cmp	r6, #1
 8008bbc:	d10b      	bne.n	8008bd6 <__gethex+0x282>
 8008bbe:	9a02      	ldr	r2, [sp, #8]
 8008bc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	f8ca 3000 	str.w	r3, [sl]
 8008bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bd0:	2562      	movs	r5, #98	@ 0x62
 8008bd2:	601c      	str	r4, [r3, #0]
 8008bd4:	e73a      	b.n	8008a4c <__gethex+0xf8>
 8008bd6:	1e71      	subs	r1, r6, #1
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fede 	bl	800999a <__any_on>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d1ed      	bne.n	8008bbe <__gethex+0x26a>
 8008be2:	9801      	ldr	r0, [sp, #4]
 8008be4:	4621      	mov	r1, r4
 8008be6:	f000 fa87 	bl	80090f8 <_Bfree>
 8008bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bec:	2300      	movs	r3, #0
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	2550      	movs	r5, #80	@ 0x50
 8008bf2:	e72b      	b.n	8008a4c <__gethex+0xf8>
 8008bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1f3      	bne.n	8008be2 <__gethex+0x28e>
 8008bfa:	e7e0      	b.n	8008bbe <__gethex+0x26a>
 8008bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1dd      	bne.n	8008bbe <__gethex+0x26a>
 8008c02:	e7ee      	b.n	8008be2 <__gethex+0x28e>
 8008c04:	0800b39c 	.word	0x0800b39c
 8008c08:	0800b408 	.word	0x0800b408
 8008c0c:	0800b419 	.word	0x0800b419
 8008c10:	1e6f      	subs	r7, r5, #1
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	d130      	bne.n	8008c7a <__gethex+0x326>
 8008c18:	b127      	cbz	r7, 8008c24 <__gethex+0x2d0>
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 febc 	bl	800999a <__any_on>
 8008c22:	4681      	mov	r9, r0
 8008c24:	117a      	asrs	r2, r7, #5
 8008c26:	2301      	movs	r3, #1
 8008c28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c2c:	f007 071f 	and.w	r7, r7, #31
 8008c30:	40bb      	lsls	r3, r7
 8008c32:	4213      	tst	r3, r2
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	bf18      	it	ne
 8008c3a:	f049 0902 	orrne.w	r9, r9, #2
 8008c3e:	f7ff fe21 	bl	8008884 <rshift>
 8008c42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c46:	1b76      	subs	r6, r6, r5
 8008c48:	2502      	movs	r5, #2
 8008c4a:	f1b9 0f00 	cmp.w	r9, #0
 8008c4e:	d047      	beq.n	8008ce0 <__gethex+0x38c>
 8008c50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d015      	beq.n	8008c84 <__gethex+0x330>
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d017      	beq.n	8008c8c <__gethex+0x338>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d109      	bne.n	8008c74 <__gethex+0x320>
 8008c60:	f019 0f02 	tst.w	r9, #2
 8008c64:	d006      	beq.n	8008c74 <__gethex+0x320>
 8008c66:	f8da 3000 	ldr.w	r3, [sl]
 8008c6a:	ea49 0903 	orr.w	r9, r9, r3
 8008c6e:	f019 0f01 	tst.w	r9, #1
 8008c72:	d10e      	bne.n	8008c92 <__gethex+0x33e>
 8008c74:	f045 0510 	orr.w	r5, r5, #16
 8008c78:	e032      	b.n	8008ce0 <__gethex+0x38c>
 8008c7a:	f04f 0901 	mov.w	r9, #1
 8008c7e:	e7d1      	b.n	8008c24 <__gethex+0x2d0>
 8008c80:	2501      	movs	r5, #1
 8008c82:	e7e2      	b.n	8008c4a <__gethex+0x2f6>
 8008c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c86:	f1c3 0301 	rsb	r3, r3, #1
 8008c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <__gethex+0x320>
 8008c92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c96:	f104 0314 	add.w	r3, r4, #20
 8008c9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ca2:	f04f 0c00 	mov.w	ip, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008cb0:	d01b      	beq.n	8008cea <__gethex+0x396>
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	6002      	str	r2, [r0, #0]
 8008cb6:	2d02      	cmp	r5, #2
 8008cb8:	f104 0314 	add.w	r3, r4, #20
 8008cbc:	d13c      	bne.n	8008d38 <__gethex+0x3e4>
 8008cbe:	f8d8 2000 	ldr.w	r2, [r8]
 8008cc2:	3a01      	subs	r2, #1
 8008cc4:	42b2      	cmp	r2, r6
 8008cc6:	d109      	bne.n	8008cdc <__gethex+0x388>
 8008cc8:	1171      	asrs	r1, r6, #5
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cd0:	f006 061f 	and.w	r6, r6, #31
 8008cd4:	fa02 f606 	lsl.w	r6, r2, r6
 8008cd8:	421e      	tst	r6, r3
 8008cda:	d13a      	bne.n	8008d52 <__gethex+0x3fe>
 8008cdc:	f045 0520 	orr.w	r5, r5, #32
 8008ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ce2:	601c      	str	r4, [r3, #0]
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	601f      	str	r7, [r3, #0]
 8008ce8:	e6b0      	b.n	8008a4c <__gethex+0xf8>
 8008cea:	4299      	cmp	r1, r3
 8008cec:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cf0:	d8d9      	bhi.n	8008ca6 <__gethex+0x352>
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	459b      	cmp	fp, r3
 8008cf6:	db17      	blt.n	8008d28 <__gethex+0x3d4>
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	9801      	ldr	r0, [sp, #4]
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	f000 f9bb 	bl	8009078 <_Balloc>
 8008d02:	4681      	mov	r9, r0
 8008d04:	b918      	cbnz	r0, 8008d0e <__gethex+0x3ba>
 8008d06:	4b1a      	ldr	r3, [pc, #104]	@ (8008d70 <__gethex+0x41c>)
 8008d08:	4602      	mov	r2, r0
 8008d0a:	2184      	movs	r1, #132	@ 0x84
 8008d0c:	e6c5      	b.n	8008a9a <__gethex+0x146>
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	3202      	adds	r2, #2
 8008d12:	f104 010c 	add.w	r1, r4, #12
 8008d16:	0092      	lsls	r2, r2, #2
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f7ff fd50 	bl	80087be <memcpy>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	9801      	ldr	r0, [sp, #4]
 8008d22:	f000 f9e9 	bl	80090f8 <_Bfree>
 8008d26:	464c      	mov	r4, r9
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d30:	6122      	str	r2, [r4, #16]
 8008d32:	2201      	movs	r2, #1
 8008d34:	615a      	str	r2, [r3, #20]
 8008d36:	e7be      	b.n	8008cb6 <__gethex+0x362>
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	455a      	cmp	r2, fp
 8008d3c:	dd0b      	ble.n	8008d56 <__gethex+0x402>
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff fd9f 	bl	8008884 <rshift>
 8008d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d4a:	3701      	adds	r7, #1
 8008d4c:	42bb      	cmp	r3, r7
 8008d4e:	f6ff aee0 	blt.w	8008b12 <__gethex+0x1be>
 8008d52:	2501      	movs	r5, #1
 8008d54:	e7c2      	b.n	8008cdc <__gethex+0x388>
 8008d56:	f016 061f 	ands.w	r6, r6, #31
 8008d5a:	d0fa      	beq.n	8008d52 <__gethex+0x3fe>
 8008d5c:	4453      	add	r3, sl
 8008d5e:	f1c6 0620 	rsb	r6, r6, #32
 8008d62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d66:	f000 fa79 	bl	800925c <__hi0bits>
 8008d6a:	42b0      	cmp	r0, r6
 8008d6c:	dbe7      	blt.n	8008d3e <__gethex+0x3ea>
 8008d6e:	e7f0      	b.n	8008d52 <__gethex+0x3fe>
 8008d70:	0800b408 	.word	0x0800b408

08008d74 <L_shift>:
 8008d74:	f1c2 0208 	rsb	r2, r2, #8
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	b570      	push	{r4, r5, r6, lr}
 8008d7c:	f1c2 0620 	rsb	r6, r2, #32
 8008d80:	6843      	ldr	r3, [r0, #4]
 8008d82:	6804      	ldr	r4, [r0, #0]
 8008d84:	fa03 f506 	lsl.w	r5, r3, r6
 8008d88:	432c      	orrs	r4, r5
 8008d8a:	40d3      	lsrs	r3, r2
 8008d8c:	6004      	str	r4, [r0, #0]
 8008d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d92:	4288      	cmp	r0, r1
 8008d94:	d3f4      	bcc.n	8008d80 <L_shift+0xc>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}

08008d98 <__match>:
 8008d98:	b530      	push	{r4, r5, lr}
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da2:	b914      	cbnz	r4, 8008daa <__match+0x12>
 8008da4:	6003      	str	r3, [r0, #0]
 8008da6:	2001      	movs	r0, #1
 8008da8:	bd30      	pop	{r4, r5, pc}
 8008daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008db2:	2d19      	cmp	r5, #25
 8008db4:	bf98      	it	ls
 8008db6:	3220      	addls	r2, #32
 8008db8:	42a2      	cmp	r2, r4
 8008dba:	d0f0      	beq.n	8008d9e <__match+0x6>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7f3      	b.n	8008da8 <__match+0x10>

08008dc0 <__hexnan>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	6801      	ldr	r1, [r0, #0]
 8008dc8:	115e      	asrs	r6, r3, #5
 8008dca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dce:	f013 031f 	ands.w	r3, r3, #31
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	bf18      	it	ne
 8008dd6:	3604      	addne	r6, #4
 8008dd8:	2500      	movs	r5, #0
 8008dda:	1f37      	subs	r7, r6, #4
 8008ddc:	4682      	mov	sl, r0
 8008dde:	4690      	mov	r8, r2
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008de6:	46b9      	mov	r9, r7
 8008de8:	463c      	mov	r4, r7
 8008dea:	9502      	str	r5, [sp, #8]
 8008dec:	46ab      	mov	fp, r5
 8008dee:	784a      	ldrb	r2, [r1, #1]
 8008df0:	1c4b      	adds	r3, r1, #1
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	b342      	cbz	r2, 8008e48 <__hexnan+0x88>
 8008df6:	4610      	mov	r0, r2
 8008df8:	9105      	str	r1, [sp, #20]
 8008dfa:	9204      	str	r2, [sp, #16]
 8008dfc:	f7ff fd94 	bl	8008928 <__hexdig_fun>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d151      	bne.n	8008ea8 <__hexnan+0xe8>
 8008e04:	9a04      	ldr	r2, [sp, #16]
 8008e06:	9905      	ldr	r1, [sp, #20]
 8008e08:	2a20      	cmp	r2, #32
 8008e0a:	d818      	bhi.n	8008e3e <__hexnan+0x7e>
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	459b      	cmp	fp, r3
 8008e10:	dd13      	ble.n	8008e3a <__hexnan+0x7a>
 8008e12:	454c      	cmp	r4, r9
 8008e14:	d206      	bcs.n	8008e24 <__hexnan+0x64>
 8008e16:	2d07      	cmp	r5, #7
 8008e18:	dc04      	bgt.n	8008e24 <__hexnan+0x64>
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff ffa8 	bl	8008d74 <L_shift>
 8008e24:	4544      	cmp	r4, r8
 8008e26:	d952      	bls.n	8008ece <__hexnan+0x10e>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8008e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e32:	f8cd b008 	str.w	fp, [sp, #8]
 8008e36:	464c      	mov	r4, r9
 8008e38:	461d      	mov	r5, r3
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	e7d7      	b.n	8008dee <__hexnan+0x2e>
 8008e3e:	2a29      	cmp	r2, #41	@ 0x29
 8008e40:	d157      	bne.n	8008ef2 <__hexnan+0x132>
 8008e42:	3102      	adds	r1, #2
 8008e44:	f8ca 1000 	str.w	r1, [sl]
 8008e48:	f1bb 0f00 	cmp.w	fp, #0
 8008e4c:	d051      	beq.n	8008ef2 <__hexnan+0x132>
 8008e4e:	454c      	cmp	r4, r9
 8008e50:	d206      	bcs.n	8008e60 <__hexnan+0xa0>
 8008e52:	2d07      	cmp	r5, #7
 8008e54:	dc04      	bgt.n	8008e60 <__hexnan+0xa0>
 8008e56:	462a      	mov	r2, r5
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f7ff ff8a 	bl	8008d74 <L_shift>
 8008e60:	4544      	cmp	r4, r8
 8008e62:	d936      	bls.n	8008ed2 <__hexnan+0x112>
 8008e64:	f1a8 0204 	sub.w	r2, r8, #4
 8008e68:	4623      	mov	r3, r4
 8008e6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e72:	429f      	cmp	r7, r3
 8008e74:	d2f9      	bcs.n	8008e6a <__hexnan+0xaa>
 8008e76:	1b3b      	subs	r3, r7, r4
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	3401      	adds	r4, #1
 8008e80:	3e03      	subs	r6, #3
 8008e82:	42b4      	cmp	r4, r6
 8008e84:	bf88      	it	hi
 8008e86:	2304      	movhi	r3, #4
 8008e88:	4443      	add	r3, r8
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f843 2b04 	str.w	r2, [r3], #4
 8008e90:	429f      	cmp	r7, r3
 8008e92:	d2fb      	bcs.n	8008e8c <__hexnan+0xcc>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	b91b      	cbnz	r3, 8008ea0 <__hexnan+0xe0>
 8008e98:	4547      	cmp	r7, r8
 8008e9a:	d128      	bne.n	8008eee <__hexnan+0x12e>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	2005      	movs	r0, #5
 8008ea2:	b007      	add	sp, #28
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	2d08      	cmp	r5, #8
 8008eac:	f10b 0b01 	add.w	fp, fp, #1
 8008eb0:	dd06      	ble.n	8008ec0 <__hexnan+0x100>
 8008eb2:	4544      	cmp	r4, r8
 8008eb4:	d9c1      	bls.n	8008e3a <__hexnan+0x7a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ebc:	2501      	movs	r5, #1
 8008ebe:	3c04      	subs	r4, #4
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	f000 000f 	and.w	r0, r0, #15
 8008ec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	e7b5      	b.n	8008e3a <__hexnan+0x7a>
 8008ece:	2508      	movs	r5, #8
 8008ed0:	e7b3      	b.n	8008e3a <__hexnan+0x7a>
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0dd      	beq.n	8008e94 <__hexnan+0xd4>
 8008ed8:	f1c3 0320 	rsb	r3, r3, #32
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	40da      	lsrs	r2, r3
 8008ee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008eec:	e7d2      	b.n	8008e94 <__hexnan+0xd4>
 8008eee:	3f04      	subs	r7, #4
 8008ef0:	e7d0      	b.n	8008e94 <__hexnan+0xd4>
 8008ef2:	2004      	movs	r0, #4
 8008ef4:	e7d5      	b.n	8008ea2 <__hexnan+0xe2>
	...

08008ef8 <sbrk_aligned>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	4e0f      	ldr	r6, [pc, #60]	@ (8008f38 <sbrk_aligned+0x40>)
 8008efc:	460c      	mov	r4, r1
 8008efe:	6831      	ldr	r1, [r6, #0]
 8008f00:	4605      	mov	r5, r0
 8008f02:	b911      	cbnz	r1, 8008f0a <sbrk_aligned+0x12>
 8008f04:	f000 fe24 	bl	8009b50 <_sbrk_r>
 8008f08:	6030      	str	r0, [r6, #0]
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f000 fe1f 	bl	8009b50 <_sbrk_r>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d103      	bne.n	8008f1e <sbrk_aligned+0x26>
 8008f16:	f04f 34ff 	mov.w	r4, #4294967295
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	1cc4      	adds	r4, r0, #3
 8008f20:	f024 0403 	bic.w	r4, r4, #3
 8008f24:	42a0      	cmp	r0, r4
 8008f26:	d0f8      	beq.n	8008f1a <sbrk_aligned+0x22>
 8008f28:	1a21      	subs	r1, r4, r0
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fe10 	bl	8009b50 <_sbrk_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1f2      	bne.n	8008f1a <sbrk_aligned+0x22>
 8008f34:	e7ef      	b.n	8008f16 <sbrk_aligned+0x1e>
 8008f36:	bf00      	nop
 8008f38:	200005d0 	.word	0x200005d0

08008f3c <_malloc_r>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	1ccd      	adds	r5, r1, #3
 8008f42:	f025 0503 	bic.w	r5, r5, #3
 8008f46:	3508      	adds	r5, #8
 8008f48:	2d0c      	cmp	r5, #12
 8008f4a:	bf38      	it	cc
 8008f4c:	250c      	movcc	r5, #12
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	4606      	mov	r6, r0
 8008f52:	db01      	blt.n	8008f58 <_malloc_r+0x1c>
 8008f54:	42a9      	cmp	r1, r5
 8008f56:	d904      	bls.n	8008f62 <_malloc_r+0x26>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009038 <_malloc_r+0xfc>
 8008f66:	f000 f87b 	bl	8009060 <__malloc_lock>
 8008f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6e:	461c      	mov	r4, r3
 8008f70:	bb44      	cbnz	r4, 8008fc4 <_malloc_r+0x88>
 8008f72:	4629      	mov	r1, r5
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff ffbf 	bl	8008ef8 <sbrk_aligned>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	d158      	bne.n	8009032 <_malloc_r+0xf6>
 8008f80:	f8d8 4000 	ldr.w	r4, [r8]
 8008f84:	4627      	mov	r7, r4
 8008f86:	2f00      	cmp	r7, #0
 8008f88:	d143      	bne.n	8009012 <_malloc_r+0xd6>
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	d04b      	beq.n	8009026 <_malloc_r+0xea>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	4639      	mov	r1, r7
 8008f92:	4630      	mov	r0, r6
 8008f94:	eb04 0903 	add.w	r9, r4, r3
 8008f98:	f000 fdda 	bl	8009b50 <_sbrk_r>
 8008f9c:	4581      	cmp	r9, r0
 8008f9e:	d142      	bne.n	8009026 <_malloc_r+0xea>
 8008fa0:	6821      	ldr	r1, [r4, #0]
 8008fa2:	1a6d      	subs	r5, r5, r1
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7ff ffa6 	bl	8008ef8 <sbrk_aligned>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d03a      	beq.n	8009026 <_malloc_r+0xea>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	442b      	add	r3, r5
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	bb62      	cbnz	r2, 8009018 <_malloc_r+0xdc>
 8008fbe:	f8c8 7000 	str.w	r7, [r8]
 8008fc2:	e00f      	b.n	8008fe4 <_malloc_r+0xa8>
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	1b52      	subs	r2, r2, r5
 8008fc8:	d420      	bmi.n	800900c <_malloc_r+0xd0>
 8008fca:	2a0b      	cmp	r2, #11
 8008fcc:	d917      	bls.n	8008ffe <_malloc_r+0xc2>
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	6025      	str	r5, [r4, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	6059      	strne	r1, [r3, #4]
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	bf08      	it	eq
 8008fdc:	f8c8 1000 	streq.w	r1, [r8]
 8008fe0:	5162      	str	r2, [r4, r5]
 8008fe2:	604b      	str	r3, [r1, #4]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f841 	bl	800906c <__malloc_unlock>
 8008fea:	f104 000b 	add.w	r0, r4, #11
 8008fee:	1d23      	adds	r3, r4, #4
 8008ff0:	f020 0007 	bic.w	r0, r0, #7
 8008ff4:	1ac2      	subs	r2, r0, r3
 8008ff6:	bf1c      	itt	ne
 8008ff8:	1a1b      	subne	r3, r3, r0
 8008ffa:	50a3      	strne	r3, [r4, r2]
 8008ffc:	e7af      	b.n	8008f5e <_malloc_r+0x22>
 8008ffe:	6862      	ldr	r2, [r4, #4]
 8009000:	42a3      	cmp	r3, r4
 8009002:	bf0c      	ite	eq
 8009004:	f8c8 2000 	streq.w	r2, [r8]
 8009008:	605a      	strne	r2, [r3, #4]
 800900a:	e7eb      	b.n	8008fe4 <_malloc_r+0xa8>
 800900c:	4623      	mov	r3, r4
 800900e:	6864      	ldr	r4, [r4, #4]
 8009010:	e7ae      	b.n	8008f70 <_malloc_r+0x34>
 8009012:	463c      	mov	r4, r7
 8009014:	687f      	ldr	r7, [r7, #4]
 8009016:	e7b6      	b.n	8008f86 <_malloc_r+0x4a>
 8009018:	461a      	mov	r2, r3
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	42a3      	cmp	r3, r4
 800901e:	d1fb      	bne.n	8009018 <_malloc_r+0xdc>
 8009020:	2300      	movs	r3, #0
 8009022:	6053      	str	r3, [r2, #4]
 8009024:	e7de      	b.n	8008fe4 <_malloc_r+0xa8>
 8009026:	230c      	movs	r3, #12
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	f000 f81e 	bl	800906c <__malloc_unlock>
 8009030:	e794      	b.n	8008f5c <_malloc_r+0x20>
 8009032:	6005      	str	r5, [r0, #0]
 8009034:	e7d6      	b.n	8008fe4 <_malloc_r+0xa8>
 8009036:	bf00      	nop
 8009038:	200005d4 	.word	0x200005d4

0800903c <__ascii_mbtowc>:
 800903c:	b082      	sub	sp, #8
 800903e:	b901      	cbnz	r1, 8009042 <__ascii_mbtowc+0x6>
 8009040:	a901      	add	r1, sp, #4
 8009042:	b142      	cbz	r2, 8009056 <__ascii_mbtowc+0x1a>
 8009044:	b14b      	cbz	r3, 800905a <__ascii_mbtowc+0x1e>
 8009046:	7813      	ldrb	r3, [r2, #0]
 8009048:	600b      	str	r3, [r1, #0]
 800904a:	7812      	ldrb	r2, [r2, #0]
 800904c:	1e10      	subs	r0, r2, #0
 800904e:	bf18      	it	ne
 8009050:	2001      	movne	r0, #1
 8009052:	b002      	add	sp, #8
 8009054:	4770      	bx	lr
 8009056:	4610      	mov	r0, r2
 8009058:	e7fb      	b.n	8009052 <__ascii_mbtowc+0x16>
 800905a:	f06f 0001 	mvn.w	r0, #1
 800905e:	e7f8      	b.n	8009052 <__ascii_mbtowc+0x16>

08009060 <__malloc_lock>:
 8009060:	4801      	ldr	r0, [pc, #4]	@ (8009068 <__malloc_lock+0x8>)
 8009062:	f7ff bbaa 	b.w	80087ba <__retarget_lock_acquire_recursive>
 8009066:	bf00      	nop
 8009068:	200005cc 	.word	0x200005cc

0800906c <__malloc_unlock>:
 800906c:	4801      	ldr	r0, [pc, #4]	@ (8009074 <__malloc_unlock+0x8>)
 800906e:	f7ff bba5 	b.w	80087bc <__retarget_lock_release_recursive>
 8009072:	bf00      	nop
 8009074:	200005cc 	.word	0x200005cc

08009078 <_Balloc>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	69c6      	ldr	r6, [r0, #28]
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
 8009080:	b976      	cbnz	r6, 80090a0 <_Balloc+0x28>
 8009082:	2010      	movs	r0, #16
 8009084:	f000 fda6 	bl	8009bd4 <malloc>
 8009088:	4602      	mov	r2, r0
 800908a:	61e0      	str	r0, [r4, #28]
 800908c:	b920      	cbnz	r0, 8009098 <_Balloc+0x20>
 800908e:	4b18      	ldr	r3, [pc, #96]	@ (80090f0 <_Balloc+0x78>)
 8009090:	4818      	ldr	r0, [pc, #96]	@ (80090f4 <_Balloc+0x7c>)
 8009092:	216b      	movs	r1, #107	@ 0x6b
 8009094:	f000 fd6c 	bl	8009b70 <__assert_func>
 8009098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800909c:	6006      	str	r6, [r0, #0]
 800909e:	60c6      	str	r6, [r0, #12]
 80090a0:	69e6      	ldr	r6, [r4, #28]
 80090a2:	68f3      	ldr	r3, [r6, #12]
 80090a4:	b183      	cbz	r3, 80090c8 <_Balloc+0x50>
 80090a6:	69e3      	ldr	r3, [r4, #28]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090ae:	b9b8      	cbnz	r0, 80090e0 <_Balloc+0x68>
 80090b0:	2101      	movs	r1, #1
 80090b2:	fa01 f605 	lsl.w	r6, r1, r5
 80090b6:	1d72      	adds	r2, r6, #5
 80090b8:	0092      	lsls	r2, r2, #2
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fd76 	bl	8009bac <_calloc_r>
 80090c0:	b160      	cbz	r0, 80090dc <_Balloc+0x64>
 80090c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090c6:	e00e      	b.n	80090e6 <_Balloc+0x6e>
 80090c8:	2221      	movs	r2, #33	@ 0x21
 80090ca:	2104      	movs	r1, #4
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fd6d 	bl	8009bac <_calloc_r>
 80090d2:	69e3      	ldr	r3, [r4, #28]
 80090d4:	60f0      	str	r0, [r6, #12]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e4      	bne.n	80090a6 <_Balloc+0x2e>
 80090dc:	2000      	movs	r0, #0
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	6802      	ldr	r2, [r0, #0]
 80090e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090e6:	2300      	movs	r3, #0
 80090e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090ec:	e7f7      	b.n	80090de <_Balloc+0x66>
 80090ee:	bf00      	nop
 80090f0:	0800b479 	.word	0x0800b479
 80090f4:	0800b490 	.word	0x0800b490

080090f8 <_Bfree>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	69c6      	ldr	r6, [r0, #28]
 80090fc:	4605      	mov	r5, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	b976      	cbnz	r6, 8009120 <_Bfree+0x28>
 8009102:	2010      	movs	r0, #16
 8009104:	f000 fd66 	bl	8009bd4 <malloc>
 8009108:	4602      	mov	r2, r0
 800910a:	61e8      	str	r0, [r5, #28]
 800910c:	b920      	cbnz	r0, 8009118 <_Bfree+0x20>
 800910e:	4b09      	ldr	r3, [pc, #36]	@ (8009134 <_Bfree+0x3c>)
 8009110:	4809      	ldr	r0, [pc, #36]	@ (8009138 <_Bfree+0x40>)
 8009112:	218f      	movs	r1, #143	@ 0x8f
 8009114:	f000 fd2c 	bl	8009b70 <__assert_func>
 8009118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800911c:	6006      	str	r6, [r0, #0]
 800911e:	60c6      	str	r6, [r0, #12]
 8009120:	b13c      	cbz	r4, 8009132 <_Bfree+0x3a>
 8009122:	69eb      	ldr	r3, [r5, #28]
 8009124:	6862      	ldr	r2, [r4, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800912c:	6021      	str	r1, [r4, #0]
 800912e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	0800b479 	.word	0x0800b479
 8009138:	0800b490 	.word	0x0800b490

0800913c <__multadd>:
 800913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009140:	690d      	ldr	r5, [r1, #16]
 8009142:	4607      	mov	r7, r0
 8009144:	460c      	mov	r4, r1
 8009146:	461e      	mov	r6, r3
 8009148:	f101 0c14 	add.w	ip, r1, #20
 800914c:	2000      	movs	r0, #0
 800914e:	f8dc 3000 	ldr.w	r3, [ip]
 8009152:	b299      	uxth	r1, r3
 8009154:	fb02 6101 	mla	r1, r2, r1, r6
 8009158:	0c1e      	lsrs	r6, r3, #16
 800915a:	0c0b      	lsrs	r3, r1, #16
 800915c:	fb02 3306 	mla	r3, r2, r6, r3
 8009160:	b289      	uxth	r1, r1
 8009162:	3001      	adds	r0, #1
 8009164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009168:	4285      	cmp	r5, r0
 800916a:	f84c 1b04 	str.w	r1, [ip], #4
 800916e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009172:	dcec      	bgt.n	800914e <__multadd+0x12>
 8009174:	b30e      	cbz	r6, 80091ba <__multadd+0x7e>
 8009176:	68a3      	ldr	r3, [r4, #8]
 8009178:	42ab      	cmp	r3, r5
 800917a:	dc19      	bgt.n	80091b0 <__multadd+0x74>
 800917c:	6861      	ldr	r1, [r4, #4]
 800917e:	4638      	mov	r0, r7
 8009180:	3101      	adds	r1, #1
 8009182:	f7ff ff79 	bl	8009078 <_Balloc>
 8009186:	4680      	mov	r8, r0
 8009188:	b928      	cbnz	r0, 8009196 <__multadd+0x5a>
 800918a:	4602      	mov	r2, r0
 800918c:	4b0c      	ldr	r3, [pc, #48]	@ (80091c0 <__multadd+0x84>)
 800918e:	480d      	ldr	r0, [pc, #52]	@ (80091c4 <__multadd+0x88>)
 8009190:	21ba      	movs	r1, #186	@ 0xba
 8009192:	f000 fced 	bl	8009b70 <__assert_func>
 8009196:	6922      	ldr	r2, [r4, #16]
 8009198:	3202      	adds	r2, #2
 800919a:	f104 010c 	add.w	r1, r4, #12
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	300c      	adds	r0, #12
 80091a2:	f7ff fb0c 	bl	80087be <memcpy>
 80091a6:	4621      	mov	r1, r4
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff ffa5 	bl	80090f8 <_Bfree>
 80091ae:	4644      	mov	r4, r8
 80091b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091b4:	3501      	adds	r5, #1
 80091b6:	615e      	str	r6, [r3, #20]
 80091b8:	6125      	str	r5, [r4, #16]
 80091ba:	4620      	mov	r0, r4
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	0800b408 	.word	0x0800b408
 80091c4:	0800b490 	.word	0x0800b490

080091c8 <__s2b>:
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	460c      	mov	r4, r1
 80091ce:	4615      	mov	r5, r2
 80091d0:	461f      	mov	r7, r3
 80091d2:	2209      	movs	r2, #9
 80091d4:	3308      	adds	r3, #8
 80091d6:	4606      	mov	r6, r0
 80091d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80091dc:	2100      	movs	r1, #0
 80091de:	2201      	movs	r2, #1
 80091e0:	429a      	cmp	r2, r3
 80091e2:	db09      	blt.n	80091f8 <__s2b+0x30>
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff ff47 	bl	8009078 <_Balloc>
 80091ea:	b940      	cbnz	r0, 80091fe <__s2b+0x36>
 80091ec:	4602      	mov	r2, r0
 80091ee:	4b19      	ldr	r3, [pc, #100]	@ (8009254 <__s2b+0x8c>)
 80091f0:	4819      	ldr	r0, [pc, #100]	@ (8009258 <__s2b+0x90>)
 80091f2:	21d3      	movs	r1, #211	@ 0xd3
 80091f4:	f000 fcbc 	bl	8009b70 <__assert_func>
 80091f8:	0052      	lsls	r2, r2, #1
 80091fa:	3101      	adds	r1, #1
 80091fc:	e7f0      	b.n	80091e0 <__s2b+0x18>
 80091fe:	9b08      	ldr	r3, [sp, #32]
 8009200:	6143      	str	r3, [r0, #20]
 8009202:	2d09      	cmp	r5, #9
 8009204:	f04f 0301 	mov.w	r3, #1
 8009208:	6103      	str	r3, [r0, #16]
 800920a:	dd16      	ble.n	800923a <__s2b+0x72>
 800920c:	f104 0909 	add.w	r9, r4, #9
 8009210:	46c8      	mov	r8, r9
 8009212:	442c      	add	r4, r5
 8009214:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009218:	4601      	mov	r1, r0
 800921a:	3b30      	subs	r3, #48	@ 0x30
 800921c:	220a      	movs	r2, #10
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ff8c 	bl	800913c <__multadd>
 8009224:	45a0      	cmp	r8, r4
 8009226:	d1f5      	bne.n	8009214 <__s2b+0x4c>
 8009228:	f1a5 0408 	sub.w	r4, r5, #8
 800922c:	444c      	add	r4, r9
 800922e:	1b2d      	subs	r5, r5, r4
 8009230:	1963      	adds	r3, r4, r5
 8009232:	42bb      	cmp	r3, r7
 8009234:	db04      	blt.n	8009240 <__s2b+0x78>
 8009236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923a:	340a      	adds	r4, #10
 800923c:	2509      	movs	r5, #9
 800923e:	e7f6      	b.n	800922e <__s2b+0x66>
 8009240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009244:	4601      	mov	r1, r0
 8009246:	3b30      	subs	r3, #48	@ 0x30
 8009248:	220a      	movs	r2, #10
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ff76 	bl	800913c <__multadd>
 8009250:	e7ee      	b.n	8009230 <__s2b+0x68>
 8009252:	bf00      	nop
 8009254:	0800b408 	.word	0x0800b408
 8009258:	0800b490 	.word	0x0800b490

0800925c <__hi0bits>:
 800925c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009260:	4603      	mov	r3, r0
 8009262:	bf36      	itet	cc
 8009264:	0403      	lslcc	r3, r0, #16
 8009266:	2000      	movcs	r0, #0
 8009268:	2010      	movcc	r0, #16
 800926a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800926e:	bf3c      	itt	cc
 8009270:	021b      	lslcc	r3, r3, #8
 8009272:	3008      	addcc	r0, #8
 8009274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009278:	bf3c      	itt	cc
 800927a:	011b      	lslcc	r3, r3, #4
 800927c:	3004      	addcc	r0, #4
 800927e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009282:	bf3c      	itt	cc
 8009284:	009b      	lslcc	r3, r3, #2
 8009286:	3002      	addcc	r0, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	db05      	blt.n	8009298 <__hi0bits+0x3c>
 800928c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009290:	f100 0001 	add.w	r0, r0, #1
 8009294:	bf08      	it	eq
 8009296:	2020      	moveq	r0, #32
 8009298:	4770      	bx	lr

0800929a <__lo0bits>:
 800929a:	6803      	ldr	r3, [r0, #0]
 800929c:	4602      	mov	r2, r0
 800929e:	f013 0007 	ands.w	r0, r3, #7
 80092a2:	d00b      	beq.n	80092bc <__lo0bits+0x22>
 80092a4:	07d9      	lsls	r1, r3, #31
 80092a6:	d421      	bmi.n	80092ec <__lo0bits+0x52>
 80092a8:	0798      	lsls	r0, r3, #30
 80092aa:	bf49      	itett	mi
 80092ac:	085b      	lsrmi	r3, r3, #1
 80092ae:	089b      	lsrpl	r3, r3, #2
 80092b0:	2001      	movmi	r0, #1
 80092b2:	6013      	strmi	r3, [r2, #0]
 80092b4:	bf5c      	itt	pl
 80092b6:	6013      	strpl	r3, [r2, #0]
 80092b8:	2002      	movpl	r0, #2
 80092ba:	4770      	bx	lr
 80092bc:	b299      	uxth	r1, r3
 80092be:	b909      	cbnz	r1, 80092c4 <__lo0bits+0x2a>
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	2010      	movs	r0, #16
 80092c4:	b2d9      	uxtb	r1, r3
 80092c6:	b909      	cbnz	r1, 80092cc <__lo0bits+0x32>
 80092c8:	3008      	adds	r0, #8
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	0719      	lsls	r1, r3, #28
 80092ce:	bf04      	itt	eq
 80092d0:	091b      	lsreq	r3, r3, #4
 80092d2:	3004      	addeq	r0, #4
 80092d4:	0799      	lsls	r1, r3, #30
 80092d6:	bf04      	itt	eq
 80092d8:	089b      	lsreq	r3, r3, #2
 80092da:	3002      	addeq	r0, #2
 80092dc:	07d9      	lsls	r1, r3, #31
 80092de:	d403      	bmi.n	80092e8 <__lo0bits+0x4e>
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	f100 0001 	add.w	r0, r0, #1
 80092e6:	d003      	beq.n	80092f0 <__lo0bits+0x56>
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4770      	bx	lr
 80092ec:	2000      	movs	r0, #0
 80092ee:	4770      	bx	lr
 80092f0:	2020      	movs	r0, #32
 80092f2:	4770      	bx	lr

080092f4 <__i2b>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	460c      	mov	r4, r1
 80092f8:	2101      	movs	r1, #1
 80092fa:	f7ff febd 	bl	8009078 <_Balloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	b928      	cbnz	r0, 800930e <__i2b+0x1a>
 8009302:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <__i2b+0x24>)
 8009304:	4805      	ldr	r0, [pc, #20]	@ (800931c <__i2b+0x28>)
 8009306:	f240 1145 	movw	r1, #325	@ 0x145
 800930a:	f000 fc31 	bl	8009b70 <__assert_func>
 800930e:	2301      	movs	r3, #1
 8009310:	6144      	str	r4, [r0, #20]
 8009312:	6103      	str	r3, [r0, #16]
 8009314:	bd10      	pop	{r4, pc}
 8009316:	bf00      	nop
 8009318:	0800b408 	.word	0x0800b408
 800931c:	0800b490 	.word	0x0800b490

08009320 <__multiply>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	4614      	mov	r4, r2
 8009326:	690a      	ldr	r2, [r1, #16]
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	429a      	cmp	r2, r3
 800932c:	bfa8      	it	ge
 800932e:	4623      	movge	r3, r4
 8009330:	460f      	mov	r7, r1
 8009332:	bfa4      	itt	ge
 8009334:	460c      	movge	r4, r1
 8009336:	461f      	movge	r7, r3
 8009338:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800933c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	6861      	ldr	r1, [r4, #4]
 8009344:	eb0a 0609 	add.w	r6, sl, r9
 8009348:	42b3      	cmp	r3, r6
 800934a:	b085      	sub	sp, #20
 800934c:	bfb8      	it	lt
 800934e:	3101      	addlt	r1, #1
 8009350:	f7ff fe92 	bl	8009078 <_Balloc>
 8009354:	b930      	cbnz	r0, 8009364 <__multiply+0x44>
 8009356:	4602      	mov	r2, r0
 8009358:	4b44      	ldr	r3, [pc, #272]	@ (800946c <__multiply+0x14c>)
 800935a:	4845      	ldr	r0, [pc, #276]	@ (8009470 <__multiply+0x150>)
 800935c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009360:	f000 fc06 	bl	8009b70 <__assert_func>
 8009364:	f100 0514 	add.w	r5, r0, #20
 8009368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800936c:	462b      	mov	r3, r5
 800936e:	2200      	movs	r2, #0
 8009370:	4543      	cmp	r3, r8
 8009372:	d321      	bcc.n	80093b8 <__multiply+0x98>
 8009374:	f107 0114 	add.w	r1, r7, #20
 8009378:	f104 0214 	add.w	r2, r4, #20
 800937c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009380:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	1b13      	subs	r3, r2, r4
 8009388:	3b15      	subs	r3, #21
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	3304      	adds	r3, #4
 8009390:	f104 0715 	add.w	r7, r4, #21
 8009394:	42ba      	cmp	r2, r7
 8009396:	bf38      	it	cc
 8009398:	2304      	movcc	r3, #4
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	9103      	str	r1, [sp, #12]
 80093a0:	428b      	cmp	r3, r1
 80093a2:	d80c      	bhi.n	80093be <__multiply+0x9e>
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	dd03      	ble.n	80093b0 <__multiply+0x90>
 80093a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d05b      	beq.n	8009468 <__multiply+0x148>
 80093b0:	6106      	str	r6, [r0, #16]
 80093b2:	b005      	add	sp, #20
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	f843 2b04 	str.w	r2, [r3], #4
 80093bc:	e7d8      	b.n	8009370 <__multiply+0x50>
 80093be:	f8b1 a000 	ldrh.w	sl, [r1]
 80093c2:	f1ba 0f00 	cmp.w	sl, #0
 80093c6:	d024      	beq.n	8009412 <__multiply+0xf2>
 80093c8:	f104 0e14 	add.w	lr, r4, #20
 80093cc:	46a9      	mov	r9, r5
 80093ce:	f04f 0c00 	mov.w	ip, #0
 80093d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093d6:	f8d9 3000 	ldr.w	r3, [r9]
 80093da:	fa1f fb87 	uxth.w	fp, r7
 80093de:	b29b      	uxth	r3, r3
 80093e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80093e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093e8:	f8d9 7000 	ldr.w	r7, [r9]
 80093ec:	4463      	add	r3, ip
 80093ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80093f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009400:	4572      	cmp	r2, lr
 8009402:	f849 3b04 	str.w	r3, [r9], #4
 8009406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800940a:	d8e2      	bhi.n	80093d2 <__multiply+0xb2>
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	f845 c003 	str.w	ip, [r5, r3]
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009418:	3104      	adds	r1, #4
 800941a:	f1b9 0f00 	cmp.w	r9, #0
 800941e:	d021      	beq.n	8009464 <__multiply+0x144>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	f104 0c14 	add.w	ip, r4, #20
 8009426:	46ae      	mov	lr, r5
 8009428:	f04f 0a00 	mov.w	sl, #0
 800942c:	f8bc b000 	ldrh.w	fp, [ip]
 8009430:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009434:	fb09 770b 	mla	r7, r9, fp, r7
 8009438:	4457      	add	r7, sl
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009440:	f84e 3b04 	str.w	r3, [lr], #4
 8009444:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009448:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800944c:	f8be 3000 	ldrh.w	r3, [lr]
 8009450:	fb09 330a 	mla	r3, r9, sl, r3
 8009454:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009458:	4562      	cmp	r2, ip
 800945a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800945e:	d8e5      	bhi.n	800942c <__multiply+0x10c>
 8009460:	9f01      	ldr	r7, [sp, #4]
 8009462:	51eb      	str	r3, [r5, r7]
 8009464:	3504      	adds	r5, #4
 8009466:	e799      	b.n	800939c <__multiply+0x7c>
 8009468:	3e01      	subs	r6, #1
 800946a:	e79b      	b.n	80093a4 <__multiply+0x84>
 800946c:	0800b408 	.word	0x0800b408
 8009470:	0800b490 	.word	0x0800b490

08009474 <__pow5mult>:
 8009474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009478:	4615      	mov	r5, r2
 800947a:	f012 0203 	ands.w	r2, r2, #3
 800947e:	4607      	mov	r7, r0
 8009480:	460e      	mov	r6, r1
 8009482:	d007      	beq.n	8009494 <__pow5mult+0x20>
 8009484:	4c25      	ldr	r4, [pc, #148]	@ (800951c <__pow5mult+0xa8>)
 8009486:	3a01      	subs	r2, #1
 8009488:	2300      	movs	r3, #0
 800948a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800948e:	f7ff fe55 	bl	800913c <__multadd>
 8009492:	4606      	mov	r6, r0
 8009494:	10ad      	asrs	r5, r5, #2
 8009496:	d03d      	beq.n	8009514 <__pow5mult+0xa0>
 8009498:	69fc      	ldr	r4, [r7, #28]
 800949a:	b97c      	cbnz	r4, 80094bc <__pow5mult+0x48>
 800949c:	2010      	movs	r0, #16
 800949e:	f000 fb99 	bl	8009bd4 <malloc>
 80094a2:	4602      	mov	r2, r0
 80094a4:	61f8      	str	r0, [r7, #28]
 80094a6:	b928      	cbnz	r0, 80094b4 <__pow5mult+0x40>
 80094a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009520 <__pow5mult+0xac>)
 80094aa:	481e      	ldr	r0, [pc, #120]	@ (8009524 <__pow5mult+0xb0>)
 80094ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094b0:	f000 fb5e 	bl	8009b70 <__assert_func>
 80094b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094b8:	6004      	str	r4, [r0, #0]
 80094ba:	60c4      	str	r4, [r0, #12]
 80094bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094c4:	b94c      	cbnz	r4, 80094da <__pow5mult+0x66>
 80094c6:	f240 2171 	movw	r1, #625	@ 0x271
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7ff ff12 	bl	80092f4 <__i2b>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80094d6:	4604      	mov	r4, r0
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	f04f 0900 	mov.w	r9, #0
 80094de:	07eb      	lsls	r3, r5, #31
 80094e0:	d50a      	bpl.n	80094f8 <__pow5mult+0x84>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4622      	mov	r2, r4
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7ff ff1a 	bl	8009320 <__multiply>
 80094ec:	4631      	mov	r1, r6
 80094ee:	4680      	mov	r8, r0
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff fe01 	bl	80090f8 <_Bfree>
 80094f6:	4646      	mov	r6, r8
 80094f8:	106d      	asrs	r5, r5, #1
 80094fa:	d00b      	beq.n	8009514 <__pow5mult+0xa0>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	b938      	cbnz	r0, 8009510 <__pow5mult+0x9c>
 8009500:	4622      	mov	r2, r4
 8009502:	4621      	mov	r1, r4
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff ff0b 	bl	8009320 <__multiply>
 800950a:	6020      	str	r0, [r4, #0]
 800950c:	f8c0 9000 	str.w	r9, [r0]
 8009510:	4604      	mov	r4, r0
 8009512:	e7e4      	b.n	80094de <__pow5mult+0x6a>
 8009514:	4630      	mov	r0, r6
 8009516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951a:	bf00      	nop
 800951c:	0800b4ec 	.word	0x0800b4ec
 8009520:	0800b479 	.word	0x0800b479
 8009524:	0800b490 	.word	0x0800b490

08009528 <__lshift>:
 8009528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	6849      	ldr	r1, [r1, #4]
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	4607      	mov	r7, r0
 800953a:	4691      	mov	r9, r2
 800953c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009540:	f108 0601 	add.w	r6, r8, #1
 8009544:	42b3      	cmp	r3, r6
 8009546:	db0b      	blt.n	8009560 <__lshift+0x38>
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff fd95 	bl	8009078 <_Balloc>
 800954e:	4605      	mov	r5, r0
 8009550:	b948      	cbnz	r0, 8009566 <__lshift+0x3e>
 8009552:	4602      	mov	r2, r0
 8009554:	4b28      	ldr	r3, [pc, #160]	@ (80095f8 <__lshift+0xd0>)
 8009556:	4829      	ldr	r0, [pc, #164]	@ (80095fc <__lshift+0xd4>)
 8009558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800955c:	f000 fb08 	bl	8009b70 <__assert_func>
 8009560:	3101      	adds	r1, #1
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	e7ee      	b.n	8009544 <__lshift+0x1c>
 8009566:	2300      	movs	r3, #0
 8009568:	f100 0114 	add.w	r1, r0, #20
 800956c:	f100 0210 	add.w	r2, r0, #16
 8009570:	4618      	mov	r0, r3
 8009572:	4553      	cmp	r3, sl
 8009574:	db33      	blt.n	80095de <__lshift+0xb6>
 8009576:	6920      	ldr	r0, [r4, #16]
 8009578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800957c:	f104 0314 	add.w	r3, r4, #20
 8009580:	f019 091f 	ands.w	r9, r9, #31
 8009584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800958c:	d02b      	beq.n	80095e6 <__lshift+0xbe>
 800958e:	f1c9 0e20 	rsb	lr, r9, #32
 8009592:	468a      	mov	sl, r1
 8009594:	2200      	movs	r2, #0
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	fa00 f009 	lsl.w	r0, r0, r9
 800959c:	4310      	orrs	r0, r2
 800959e:	f84a 0b04 	str.w	r0, [sl], #4
 80095a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a6:	459c      	cmp	ip, r3
 80095a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80095ac:	d8f3      	bhi.n	8009596 <__lshift+0x6e>
 80095ae:	ebac 0304 	sub.w	r3, ip, r4
 80095b2:	3b15      	subs	r3, #21
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	3304      	adds	r3, #4
 80095ba:	f104 0015 	add.w	r0, r4, #21
 80095be:	4584      	cmp	ip, r0
 80095c0:	bf38      	it	cc
 80095c2:	2304      	movcc	r3, #4
 80095c4:	50ca      	str	r2, [r1, r3]
 80095c6:	b10a      	cbz	r2, 80095cc <__lshift+0xa4>
 80095c8:	f108 0602 	add.w	r6, r8, #2
 80095cc:	3e01      	subs	r6, #1
 80095ce:	4638      	mov	r0, r7
 80095d0:	612e      	str	r6, [r5, #16]
 80095d2:	4621      	mov	r1, r4
 80095d4:	f7ff fd90 	bl	80090f8 <_Bfree>
 80095d8:	4628      	mov	r0, r5
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	f842 0f04 	str.w	r0, [r2, #4]!
 80095e2:	3301      	adds	r3, #1
 80095e4:	e7c5      	b.n	8009572 <__lshift+0x4a>
 80095e6:	3904      	subs	r1, #4
 80095e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80095f0:	459c      	cmp	ip, r3
 80095f2:	d8f9      	bhi.n	80095e8 <__lshift+0xc0>
 80095f4:	e7ea      	b.n	80095cc <__lshift+0xa4>
 80095f6:	bf00      	nop
 80095f8:	0800b408 	.word	0x0800b408
 80095fc:	0800b490 	.word	0x0800b490

08009600 <__mcmp>:
 8009600:	690a      	ldr	r2, [r1, #16]
 8009602:	4603      	mov	r3, r0
 8009604:	6900      	ldr	r0, [r0, #16]
 8009606:	1a80      	subs	r0, r0, r2
 8009608:	b530      	push	{r4, r5, lr}
 800960a:	d10e      	bne.n	800962a <__mcmp+0x2a>
 800960c:	3314      	adds	r3, #20
 800960e:	3114      	adds	r1, #20
 8009610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800961c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009620:	4295      	cmp	r5, r2
 8009622:	d003      	beq.n	800962c <__mcmp+0x2c>
 8009624:	d205      	bcs.n	8009632 <__mcmp+0x32>
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	bd30      	pop	{r4, r5, pc}
 800962c:	42a3      	cmp	r3, r4
 800962e:	d3f3      	bcc.n	8009618 <__mcmp+0x18>
 8009630:	e7fb      	b.n	800962a <__mcmp+0x2a>
 8009632:	2001      	movs	r0, #1
 8009634:	e7f9      	b.n	800962a <__mcmp+0x2a>
	...

08009638 <__mdiff>:
 8009638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4689      	mov	r9, r1
 800963e:	4606      	mov	r6, r0
 8009640:	4611      	mov	r1, r2
 8009642:	4648      	mov	r0, r9
 8009644:	4614      	mov	r4, r2
 8009646:	f7ff ffdb 	bl	8009600 <__mcmp>
 800964a:	1e05      	subs	r5, r0, #0
 800964c:	d112      	bne.n	8009674 <__mdiff+0x3c>
 800964e:	4629      	mov	r1, r5
 8009650:	4630      	mov	r0, r6
 8009652:	f7ff fd11 	bl	8009078 <_Balloc>
 8009656:	4602      	mov	r2, r0
 8009658:	b928      	cbnz	r0, 8009666 <__mdiff+0x2e>
 800965a:	4b3f      	ldr	r3, [pc, #252]	@ (8009758 <__mdiff+0x120>)
 800965c:	f240 2137 	movw	r1, #567	@ 0x237
 8009660:	483e      	ldr	r0, [pc, #248]	@ (800975c <__mdiff+0x124>)
 8009662:	f000 fa85 	bl	8009b70 <__assert_func>
 8009666:	2301      	movs	r3, #1
 8009668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800966c:	4610      	mov	r0, r2
 800966e:	b003      	add	sp, #12
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	bfbc      	itt	lt
 8009676:	464b      	movlt	r3, r9
 8009678:	46a1      	movlt	r9, r4
 800967a:	4630      	mov	r0, r6
 800967c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009680:	bfba      	itte	lt
 8009682:	461c      	movlt	r4, r3
 8009684:	2501      	movlt	r5, #1
 8009686:	2500      	movge	r5, #0
 8009688:	f7ff fcf6 	bl	8009078 <_Balloc>
 800968c:	4602      	mov	r2, r0
 800968e:	b918      	cbnz	r0, 8009698 <__mdiff+0x60>
 8009690:	4b31      	ldr	r3, [pc, #196]	@ (8009758 <__mdiff+0x120>)
 8009692:	f240 2145 	movw	r1, #581	@ 0x245
 8009696:	e7e3      	b.n	8009660 <__mdiff+0x28>
 8009698:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800969c:	6926      	ldr	r6, [r4, #16]
 800969e:	60c5      	str	r5, [r0, #12]
 80096a0:	f109 0310 	add.w	r3, r9, #16
 80096a4:	f109 0514 	add.w	r5, r9, #20
 80096a8:	f104 0e14 	add.w	lr, r4, #20
 80096ac:	f100 0b14 	add.w	fp, r0, #20
 80096b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	46d9      	mov	r9, fp
 80096bc:	f04f 0c00 	mov.w	ip, #0
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	fa1f f38a 	uxth.w	r3, sl
 80096d0:	4619      	mov	r1, r3
 80096d2:	b283      	uxth	r3, r0
 80096d4:	1acb      	subs	r3, r1, r3
 80096d6:	0c00      	lsrs	r0, r0, #16
 80096d8:	4463      	add	r3, ip
 80096da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096e8:	4576      	cmp	r6, lr
 80096ea:	f849 3b04 	str.w	r3, [r9], #4
 80096ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096f2:	d8e5      	bhi.n	80096c0 <__mdiff+0x88>
 80096f4:	1b33      	subs	r3, r6, r4
 80096f6:	3b15      	subs	r3, #21
 80096f8:	f023 0303 	bic.w	r3, r3, #3
 80096fc:	3415      	adds	r4, #21
 80096fe:	3304      	adds	r3, #4
 8009700:	42a6      	cmp	r6, r4
 8009702:	bf38      	it	cc
 8009704:	2304      	movcc	r3, #4
 8009706:	441d      	add	r5, r3
 8009708:	445b      	add	r3, fp
 800970a:	461e      	mov	r6, r3
 800970c:	462c      	mov	r4, r5
 800970e:	4544      	cmp	r4, r8
 8009710:	d30e      	bcc.n	8009730 <__mdiff+0xf8>
 8009712:	f108 0103 	add.w	r1, r8, #3
 8009716:	1b49      	subs	r1, r1, r5
 8009718:	f021 0103 	bic.w	r1, r1, #3
 800971c:	3d03      	subs	r5, #3
 800971e:	45a8      	cmp	r8, r5
 8009720:	bf38      	it	cc
 8009722:	2100      	movcc	r1, #0
 8009724:	440b      	add	r3, r1
 8009726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800972a:	b191      	cbz	r1, 8009752 <__mdiff+0x11a>
 800972c:	6117      	str	r7, [r2, #16]
 800972e:	e79d      	b.n	800966c <__mdiff+0x34>
 8009730:	f854 1b04 	ldr.w	r1, [r4], #4
 8009734:	46e6      	mov	lr, ip
 8009736:	0c08      	lsrs	r0, r1, #16
 8009738:	fa1c fc81 	uxtah	ip, ip, r1
 800973c:	4471      	add	r1, lr
 800973e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009742:	b289      	uxth	r1, r1
 8009744:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009748:	f846 1b04 	str.w	r1, [r6], #4
 800974c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009750:	e7dd      	b.n	800970e <__mdiff+0xd6>
 8009752:	3f01      	subs	r7, #1
 8009754:	e7e7      	b.n	8009726 <__mdiff+0xee>
 8009756:	bf00      	nop
 8009758:	0800b408 	.word	0x0800b408
 800975c:	0800b490 	.word	0x0800b490

08009760 <__ulp>:
 8009760:	b082      	sub	sp, #8
 8009762:	ed8d 0b00 	vstr	d0, [sp]
 8009766:	9a01      	ldr	r2, [sp, #4]
 8009768:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <__ulp+0x48>)
 800976a:	4013      	ands	r3, r2
 800976c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009770:	2b00      	cmp	r3, #0
 8009772:	dc08      	bgt.n	8009786 <__ulp+0x26>
 8009774:	425b      	negs	r3, r3
 8009776:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800977a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800977e:	da04      	bge.n	800978a <__ulp+0x2a>
 8009780:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009784:	4113      	asrs	r3, r2
 8009786:	2200      	movs	r2, #0
 8009788:	e008      	b.n	800979c <__ulp+0x3c>
 800978a:	f1a2 0314 	sub.w	r3, r2, #20
 800978e:	2b1e      	cmp	r3, #30
 8009790:	bfda      	itte	le
 8009792:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009796:	40da      	lsrle	r2, r3
 8009798:	2201      	movgt	r2, #1
 800979a:	2300      	movs	r3, #0
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	ec41 0b10 	vmov	d0, r0, r1
 80097a4:	b002      	add	sp, #8
 80097a6:	4770      	bx	lr
 80097a8:	7ff00000 	.word	0x7ff00000

080097ac <__b2d>:
 80097ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	6906      	ldr	r6, [r0, #16]
 80097b2:	f100 0814 	add.w	r8, r0, #20
 80097b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80097ba:	1f37      	subs	r7, r6, #4
 80097bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7ff fd4b 	bl	800925c <__hi0bits>
 80097c6:	f1c0 0320 	rsb	r3, r0, #32
 80097ca:	280a      	cmp	r0, #10
 80097cc:	600b      	str	r3, [r1, #0]
 80097ce:	491b      	ldr	r1, [pc, #108]	@ (800983c <__b2d+0x90>)
 80097d0:	dc15      	bgt.n	80097fe <__b2d+0x52>
 80097d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80097d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80097da:	45b8      	cmp	r8, r7
 80097dc:	ea43 0501 	orr.w	r5, r3, r1
 80097e0:	bf34      	ite	cc
 80097e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097e6:	2300      	movcs	r3, #0
 80097e8:	3015      	adds	r0, #21
 80097ea:	fa02 f000 	lsl.w	r0, r2, r0
 80097ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80097f2:	4303      	orrs	r3, r0
 80097f4:	461c      	mov	r4, r3
 80097f6:	ec45 4b10 	vmov	d0, r4, r5
 80097fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fe:	45b8      	cmp	r8, r7
 8009800:	bf3a      	itte	cc
 8009802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009806:	f1a6 0708 	subcc.w	r7, r6, #8
 800980a:	2300      	movcs	r3, #0
 800980c:	380b      	subs	r0, #11
 800980e:	d012      	beq.n	8009836 <__b2d+0x8a>
 8009810:	f1c0 0120 	rsb	r1, r0, #32
 8009814:	fa23 f401 	lsr.w	r4, r3, r1
 8009818:	4082      	lsls	r2, r0
 800981a:	4322      	orrs	r2, r4
 800981c:	4547      	cmp	r7, r8
 800981e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009822:	bf8c      	ite	hi
 8009824:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009828:	2200      	movls	r2, #0
 800982a:	4083      	lsls	r3, r0
 800982c:	40ca      	lsrs	r2, r1
 800982e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009832:	4313      	orrs	r3, r2
 8009834:	e7de      	b.n	80097f4 <__b2d+0x48>
 8009836:	ea42 0501 	orr.w	r5, r2, r1
 800983a:	e7db      	b.n	80097f4 <__b2d+0x48>
 800983c:	3ff00000 	.word	0x3ff00000

08009840 <__d2b>:
 8009840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009844:	460f      	mov	r7, r1
 8009846:	2101      	movs	r1, #1
 8009848:	ec59 8b10 	vmov	r8, r9, d0
 800984c:	4616      	mov	r6, r2
 800984e:	f7ff fc13 	bl	8009078 <_Balloc>
 8009852:	4604      	mov	r4, r0
 8009854:	b930      	cbnz	r0, 8009864 <__d2b+0x24>
 8009856:	4602      	mov	r2, r0
 8009858:	4b23      	ldr	r3, [pc, #140]	@ (80098e8 <__d2b+0xa8>)
 800985a:	4824      	ldr	r0, [pc, #144]	@ (80098ec <__d2b+0xac>)
 800985c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009860:	f000 f986 	bl	8009b70 <__assert_func>
 8009864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800986c:	b10d      	cbz	r5, 8009872 <__d2b+0x32>
 800986e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	f1b8 0300 	subs.w	r3, r8, #0
 8009878:	d023      	beq.n	80098c2 <__d2b+0x82>
 800987a:	4668      	mov	r0, sp
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	f7ff fd0c 	bl	800929a <__lo0bits>
 8009882:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009886:	b1d0      	cbz	r0, 80098be <__d2b+0x7e>
 8009888:	f1c0 0320 	rsb	r3, r0, #32
 800988c:	fa02 f303 	lsl.w	r3, r2, r3
 8009890:	430b      	orrs	r3, r1
 8009892:	40c2      	lsrs	r2, r0
 8009894:	6163      	str	r3, [r4, #20]
 8009896:	9201      	str	r2, [sp, #4]
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	61a3      	str	r3, [r4, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	bf0c      	ite	eq
 80098a0:	2201      	moveq	r2, #1
 80098a2:	2202      	movne	r2, #2
 80098a4:	6122      	str	r2, [r4, #16]
 80098a6:	b1a5      	cbz	r5, 80098d2 <__d2b+0x92>
 80098a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098ac:	4405      	add	r5, r0
 80098ae:	603d      	str	r5, [r7, #0]
 80098b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098b4:	6030      	str	r0, [r6, #0]
 80098b6:	4620      	mov	r0, r4
 80098b8:	b003      	add	sp, #12
 80098ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098be:	6161      	str	r1, [r4, #20]
 80098c0:	e7ea      	b.n	8009898 <__d2b+0x58>
 80098c2:	a801      	add	r0, sp, #4
 80098c4:	f7ff fce9 	bl	800929a <__lo0bits>
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	6163      	str	r3, [r4, #20]
 80098cc:	3020      	adds	r0, #32
 80098ce:	2201      	movs	r2, #1
 80098d0:	e7e8      	b.n	80098a4 <__d2b+0x64>
 80098d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098da:	6038      	str	r0, [r7, #0]
 80098dc:	6918      	ldr	r0, [r3, #16]
 80098de:	f7ff fcbd 	bl	800925c <__hi0bits>
 80098e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098e6:	e7e5      	b.n	80098b4 <__d2b+0x74>
 80098e8:	0800b408 	.word	0x0800b408
 80098ec:	0800b490 	.word	0x0800b490

080098f0 <__ratio>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	b085      	sub	sp, #20
 80098f6:	e9cd 1000 	strd	r1, r0, [sp]
 80098fa:	a902      	add	r1, sp, #8
 80098fc:	f7ff ff56 	bl	80097ac <__b2d>
 8009900:	9800      	ldr	r0, [sp, #0]
 8009902:	a903      	add	r1, sp, #12
 8009904:	ec55 4b10 	vmov	r4, r5, d0
 8009908:	f7ff ff50 	bl	80097ac <__b2d>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	6919      	ldr	r1, [r3, #16]
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	1ac9      	subs	r1, r1, r3
 8009916:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	ec5b ab10 	vmov	sl, fp, d0
 8009920:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfce      	itee	gt
 8009928:	462a      	movgt	r2, r5
 800992a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800992e:	465a      	movle	r2, fp
 8009930:	462f      	mov	r7, r5
 8009932:	46d9      	mov	r9, fp
 8009934:	bfcc      	ite	gt
 8009936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800993a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800993e:	464b      	mov	r3, r9
 8009940:	4652      	mov	r2, sl
 8009942:	4620      	mov	r0, r4
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 ff79 	bl	800083c <__aeabi_ddiv>
 800994a:	ec41 0b10 	vmov	d0, r0, r1
 800994e:	b005      	add	sp, #20
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009954 <__copybits>:
 8009954:	3901      	subs	r1, #1
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	1149      	asrs	r1, r1, #5
 800995a:	6914      	ldr	r4, [r2, #16]
 800995c:	3101      	adds	r1, #1
 800995e:	f102 0314 	add.w	r3, r2, #20
 8009962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800996a:	1f05      	subs	r5, r0, #4
 800996c:	42a3      	cmp	r3, r4
 800996e:	d30c      	bcc.n	800998a <__copybits+0x36>
 8009970:	1aa3      	subs	r3, r4, r2
 8009972:	3b11      	subs	r3, #17
 8009974:	f023 0303 	bic.w	r3, r3, #3
 8009978:	3211      	adds	r2, #17
 800997a:	42a2      	cmp	r2, r4
 800997c:	bf88      	it	hi
 800997e:	2300      	movhi	r3, #0
 8009980:	4418      	add	r0, r3
 8009982:	2300      	movs	r3, #0
 8009984:	4288      	cmp	r0, r1
 8009986:	d305      	bcc.n	8009994 <__copybits+0x40>
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	f853 6b04 	ldr.w	r6, [r3], #4
 800998e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009992:	e7eb      	b.n	800996c <__copybits+0x18>
 8009994:	f840 3b04 	str.w	r3, [r0], #4
 8009998:	e7f4      	b.n	8009984 <__copybits+0x30>

0800999a <__any_on>:
 800999a:	f100 0214 	add.w	r2, r0, #20
 800999e:	6900      	ldr	r0, [r0, #16]
 80099a0:	114b      	asrs	r3, r1, #5
 80099a2:	4298      	cmp	r0, r3
 80099a4:	b510      	push	{r4, lr}
 80099a6:	db11      	blt.n	80099cc <__any_on+0x32>
 80099a8:	dd0a      	ble.n	80099c0 <__any_on+0x26>
 80099aa:	f011 011f 	ands.w	r1, r1, #31
 80099ae:	d007      	beq.n	80099c0 <__any_on+0x26>
 80099b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099b4:	fa24 f001 	lsr.w	r0, r4, r1
 80099b8:	fa00 f101 	lsl.w	r1, r0, r1
 80099bc:	428c      	cmp	r4, r1
 80099be:	d10b      	bne.n	80099d8 <__any_on+0x3e>
 80099c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d803      	bhi.n	80099d0 <__any_on+0x36>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bd10      	pop	{r4, pc}
 80099cc:	4603      	mov	r3, r0
 80099ce:	e7f7      	b.n	80099c0 <__any_on+0x26>
 80099d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d0f5      	beq.n	80099c4 <__any_on+0x2a>
 80099d8:	2001      	movs	r0, #1
 80099da:	e7f6      	b.n	80099ca <__any_on+0x30>

080099dc <__ascii_wctomb>:
 80099dc:	4603      	mov	r3, r0
 80099de:	4608      	mov	r0, r1
 80099e0:	b141      	cbz	r1, 80099f4 <__ascii_wctomb+0x18>
 80099e2:	2aff      	cmp	r2, #255	@ 0xff
 80099e4:	d904      	bls.n	80099f0 <__ascii_wctomb+0x14>
 80099e6:	228a      	movs	r2, #138	@ 0x8a
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	f04f 30ff 	mov.w	r0, #4294967295
 80099ee:	4770      	bx	lr
 80099f0:	700a      	strb	r2, [r1, #0]
 80099f2:	2001      	movs	r0, #1
 80099f4:	4770      	bx	lr
	...

080099f8 <__sflush_r>:
 80099f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	0716      	lsls	r6, r2, #28
 8009a02:	4605      	mov	r5, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	d454      	bmi.n	8009ab2 <__sflush_r+0xba>
 8009a08:	684b      	ldr	r3, [r1, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dc02      	bgt.n	8009a14 <__sflush_r+0x1c>
 8009a0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd48      	ble.n	8009aa6 <__sflush_r+0xae>
 8009a14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a16:	2e00      	cmp	r6, #0
 8009a18:	d045      	beq.n	8009aa6 <__sflush_r+0xae>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a20:	682f      	ldr	r7, [r5, #0]
 8009a22:	6a21      	ldr	r1, [r4, #32]
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	d030      	beq.n	8009a8a <__sflush_r+0x92>
 8009a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	0759      	lsls	r1, r3, #29
 8009a2e:	d505      	bpl.n	8009a3c <__sflush_r+0x44>
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	1ad2      	subs	r2, r2, r3
 8009a34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a36:	b10b      	cbz	r3, 8009a3c <__sflush_r+0x44>
 8009a38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a40:	6a21      	ldr	r1, [r4, #32]
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b0      	blx	r6
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	d106      	bne.n	8009a5a <__sflush_r+0x62>
 8009a4c:	6829      	ldr	r1, [r5, #0]
 8009a4e:	291d      	cmp	r1, #29
 8009a50:	d82b      	bhi.n	8009aaa <__sflush_r+0xb2>
 8009a52:	4a2a      	ldr	r2, [pc, #168]	@ (8009afc <__sflush_r+0x104>)
 8009a54:	410a      	asrs	r2, r1
 8009a56:	07d6      	lsls	r6, r2, #31
 8009a58:	d427      	bmi.n	8009aaa <__sflush_r+0xb2>
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	6062      	str	r2, [r4, #4]
 8009a5e:	04d9      	lsls	r1, r3, #19
 8009a60:	6922      	ldr	r2, [r4, #16]
 8009a62:	6022      	str	r2, [r4, #0]
 8009a64:	d504      	bpl.n	8009a70 <__sflush_r+0x78>
 8009a66:	1c42      	adds	r2, r0, #1
 8009a68:	d101      	bne.n	8009a6e <__sflush_r+0x76>
 8009a6a:	682b      	ldr	r3, [r5, #0]
 8009a6c:	b903      	cbnz	r3, 8009a70 <__sflush_r+0x78>
 8009a6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a72:	602f      	str	r7, [r5, #0]
 8009a74:	b1b9      	cbz	r1, 8009aa6 <__sflush_r+0xae>
 8009a76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d002      	beq.n	8009a84 <__sflush_r+0x8c>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f7fe feb6 	bl	80087f0 <_free_r>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a88:	e00d      	b.n	8009aa6 <__sflush_r+0xae>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b0      	blx	r6
 8009a90:	4602      	mov	r2, r0
 8009a92:	1c50      	adds	r0, r2, #1
 8009a94:	d1c9      	bne.n	8009a2a <__sflush_r+0x32>
 8009a96:	682b      	ldr	r3, [r5, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0c6      	beq.n	8009a2a <__sflush_r+0x32>
 8009a9c:	2b1d      	cmp	r3, #29
 8009a9e:	d001      	beq.n	8009aa4 <__sflush_r+0xac>
 8009aa0:	2b16      	cmp	r3, #22
 8009aa2:	d11e      	bne.n	8009ae2 <__sflush_r+0xea>
 8009aa4:	602f      	str	r7, [r5, #0]
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	e022      	b.n	8009af0 <__sflush_r+0xf8>
 8009aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aae:	b21b      	sxth	r3, r3
 8009ab0:	e01b      	b.n	8009aea <__sflush_r+0xf2>
 8009ab2:	690f      	ldr	r7, [r1, #16]
 8009ab4:	2f00      	cmp	r7, #0
 8009ab6:	d0f6      	beq.n	8009aa6 <__sflush_r+0xae>
 8009ab8:	0793      	lsls	r3, r2, #30
 8009aba:	680e      	ldr	r6, [r1, #0]
 8009abc:	bf08      	it	eq
 8009abe:	694b      	ldreq	r3, [r1, #20]
 8009ac0:	600f      	str	r7, [r1, #0]
 8009ac2:	bf18      	it	ne
 8009ac4:	2300      	movne	r3, #0
 8009ac6:	eba6 0807 	sub.w	r8, r6, r7
 8009aca:	608b      	str	r3, [r1, #8]
 8009acc:	f1b8 0f00 	cmp.w	r8, #0
 8009ad0:	dde9      	ble.n	8009aa6 <__sflush_r+0xae>
 8009ad2:	6a21      	ldr	r1, [r4, #32]
 8009ad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ad6:	4643      	mov	r3, r8
 8009ad8:	463a      	mov	r2, r7
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b0      	blx	r6
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	dc08      	bgt.n	8009af4 <__sflush_r+0xfc>
 8009ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	4407      	add	r7, r0
 8009af6:	eba8 0800 	sub.w	r8, r8, r0
 8009afa:	e7e7      	b.n	8009acc <__sflush_r+0xd4>
 8009afc:	dfbffffe 	.word	0xdfbffffe

08009b00 <_fflush_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	690b      	ldr	r3, [r1, #16]
 8009b04:	4605      	mov	r5, r0
 8009b06:	460c      	mov	r4, r1
 8009b08:	b913      	cbnz	r3, 8009b10 <_fflush_r+0x10>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	b118      	cbz	r0, 8009b1a <_fflush_r+0x1a>
 8009b12:	6a03      	ldr	r3, [r0, #32]
 8009b14:	b90b      	cbnz	r3, 8009b1a <_fflush_r+0x1a>
 8009b16:	f7fe fd4b 	bl	80085b0 <__sinit>
 8009b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0f3      	beq.n	8009b0a <_fflush_r+0xa>
 8009b22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b24:	07d0      	lsls	r0, r2, #31
 8009b26:	d404      	bmi.n	8009b32 <_fflush_r+0x32>
 8009b28:	0599      	lsls	r1, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_fflush_r+0x32>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b2e:	f7fe fe44 	bl	80087ba <__retarget_lock_acquire_recursive>
 8009b32:	4628      	mov	r0, r5
 8009b34:	4621      	mov	r1, r4
 8009b36:	f7ff ff5f 	bl	80099f8 <__sflush_r>
 8009b3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b3c:	07da      	lsls	r2, r3, #31
 8009b3e:	4605      	mov	r5, r0
 8009b40:	d4e4      	bmi.n	8009b0c <_fflush_r+0xc>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	059b      	lsls	r3, r3, #22
 8009b46:	d4e1      	bmi.n	8009b0c <_fflush_r+0xc>
 8009b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b4a:	f7fe fe37 	bl	80087bc <__retarget_lock_release_recursive>
 8009b4e:	e7dd      	b.n	8009b0c <_fflush_r+0xc>

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	@ (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f8 f9ac 	bl	8001eb8 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200005c8 	.word	0x200005c8

08009b70 <__assert_func>:
 8009b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b72:	4614      	mov	r4, r2
 8009b74:	461a      	mov	r2, r3
 8009b76:	4b09      	ldr	r3, [pc, #36]	@ (8009b9c <__assert_func+0x2c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	68d8      	ldr	r0, [r3, #12]
 8009b7e:	b954      	cbnz	r4, 8009b96 <__assert_func+0x26>
 8009b80:	4b07      	ldr	r3, [pc, #28]	@ (8009ba0 <__assert_func+0x30>)
 8009b82:	461c      	mov	r4, r3
 8009b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b88:	9100      	str	r1, [sp, #0]
 8009b8a:	462b      	mov	r3, r5
 8009b8c:	4905      	ldr	r1, [pc, #20]	@ (8009ba4 <__assert_func+0x34>)
 8009b8e:	f000 f829 	bl	8009be4 <fiprintf>
 8009b92:	f000 f839 	bl	8009c08 <abort>
 8009b96:	4b04      	ldr	r3, [pc, #16]	@ (8009ba8 <__assert_func+0x38>)
 8009b98:	e7f4      	b.n	8009b84 <__assert_func+0x14>
 8009b9a:	bf00      	nop
 8009b9c:	20000188 	.word	0x20000188
 8009ba0:	0800b724 	.word	0x0800b724
 8009ba4:	0800b6f6 	.word	0x0800b6f6
 8009ba8:	0800b6e9 	.word	0x0800b6e9

08009bac <_calloc_r>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	fba1 5402 	umull	r5, r4, r1, r2
 8009bb2:	b93c      	cbnz	r4, 8009bc4 <_calloc_r+0x18>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7ff f9c1 	bl	8008f3c <_malloc_r>
 8009bba:	4606      	mov	r6, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <_calloc_r+0x1e>
 8009bbe:	2600      	movs	r6, #0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	220c      	movs	r2, #12
 8009bc6:	6002      	str	r2, [r0, #0]
 8009bc8:	e7f9      	b.n	8009bbe <_calloc_r+0x12>
 8009bca:	462a      	mov	r2, r5
 8009bcc:	4621      	mov	r1, r4
 8009bce:	f7fe fd68 	bl	80086a2 <memset>
 8009bd2:	e7f5      	b.n	8009bc0 <_calloc_r+0x14>

08009bd4 <malloc>:
 8009bd4:	4b02      	ldr	r3, [pc, #8]	@ (8009be0 <malloc+0xc>)
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	f7ff b9af 	b.w	8008f3c <_malloc_r>
 8009bde:	bf00      	nop
 8009be0:	20000188 	.word	0x20000188

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	4601      	mov	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4805      	ldr	r0, [pc, #20]	@ (8009c04 <fiprintf+0x20>)
 8009bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f837 	bl	8009c68 <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	20000188 	.word	0x20000188

08009c08 <abort>:
 8009c08:	b508      	push	{r3, lr}
 8009c0a:	2006      	movs	r0, #6
 8009c0c:	f000 fb8e 	bl	800a32c <raise>
 8009c10:	2001      	movs	r0, #1
 8009c12:	f7f8 f8d9 	bl	8001dc8 <_exit>

08009c16 <__sfputc_r>:
 8009c16:	6893      	ldr	r3, [r2, #8]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	b410      	push	{r4}
 8009c1e:	6093      	str	r3, [r2, #8]
 8009c20:	da08      	bge.n	8009c34 <__sfputc_r+0x1e>
 8009c22:	6994      	ldr	r4, [r2, #24]
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	db01      	blt.n	8009c2c <__sfputc_r+0x16>
 8009c28:	290a      	cmp	r1, #10
 8009c2a:	d103      	bne.n	8009c34 <__sfputc_r+0x1e>
 8009c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c30:	f000 bac0 	b.w	800a1b4 <__swbuf_r>
 8009c34:	6813      	ldr	r3, [r2, #0]
 8009c36:	1c58      	adds	r0, r3, #1
 8009c38:	6010      	str	r0, [r2, #0]
 8009c3a:	7019      	strb	r1, [r3, #0]
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <__sfputs_r>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	18d5      	adds	r5, r2, r3
 8009c4e:	42ac      	cmp	r4, r5
 8009c50:	d101      	bne.n	8009c56 <__sfputs_r+0x12>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e007      	b.n	8009c66 <__sfputs_r+0x22>
 8009c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5a:	463a      	mov	r2, r7
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff ffda 	bl	8009c16 <__sfputc_r>
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	d1f3      	bne.n	8009c4e <__sfputs_r+0xa>
 8009c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c68 <_vfiprintf_r>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	b09d      	sub	sp, #116	@ 0x74
 8009c70:	4614      	mov	r4, r2
 8009c72:	4698      	mov	r8, r3
 8009c74:	4606      	mov	r6, r0
 8009c76:	b118      	cbz	r0, 8009c80 <_vfiprintf_r+0x18>
 8009c78:	6a03      	ldr	r3, [r0, #32]
 8009c7a:	b90b      	cbnz	r3, 8009c80 <_vfiprintf_r+0x18>
 8009c7c:	f7fe fc98 	bl	80085b0 <__sinit>
 8009c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c82:	07d9      	lsls	r1, r3, #31
 8009c84:	d405      	bmi.n	8009c92 <_vfiprintf_r+0x2a>
 8009c86:	89ab      	ldrh	r3, [r5, #12]
 8009c88:	059a      	lsls	r2, r3, #22
 8009c8a:	d402      	bmi.n	8009c92 <_vfiprintf_r+0x2a>
 8009c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c8e:	f7fe fd94 	bl	80087ba <__retarget_lock_acquire_recursive>
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	071b      	lsls	r3, r3, #28
 8009c96:	d501      	bpl.n	8009c9c <_vfiprintf_r+0x34>
 8009c98:	692b      	ldr	r3, [r5, #16]
 8009c9a:	b99b      	cbnz	r3, 8009cc4 <_vfiprintf_r+0x5c>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f000 fac6 	bl	800a230 <__swsetup_r>
 8009ca4:	b170      	cbz	r0, 8009cc4 <_vfiprintf_r+0x5c>
 8009ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ca8:	07dc      	lsls	r4, r3, #31
 8009caa:	d504      	bpl.n	8009cb6 <_vfiprintf_r+0x4e>
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	b01d      	add	sp, #116	@ 0x74
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	89ab      	ldrh	r3, [r5, #12]
 8009cb8:	0598      	lsls	r0, r3, #22
 8009cba:	d4f7      	bmi.n	8009cac <_vfiprintf_r+0x44>
 8009cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cbe:	f7fe fd7d 	bl	80087bc <__retarget_lock_release_recursive>
 8009cc2:	e7f3      	b.n	8009cac <_vfiprintf_r+0x44>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc8:	2320      	movs	r3, #32
 8009cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd2:	2330      	movs	r3, #48	@ 0x30
 8009cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e84 <_vfiprintf_r+0x21c>
 8009cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cdc:	f04f 0901 	mov.w	r9, #1
 8009ce0:	4623      	mov	r3, r4
 8009ce2:	469a      	mov	sl, r3
 8009ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce8:	b10a      	cbz	r2, 8009cee <_vfiprintf_r+0x86>
 8009cea:	2a25      	cmp	r2, #37	@ 0x25
 8009cec:	d1f9      	bne.n	8009ce2 <_vfiprintf_r+0x7a>
 8009cee:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf2:	d00b      	beq.n	8009d0c <_vfiprintf_r+0xa4>
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7ff ffa2 	bl	8009c44 <__sfputs_r>
 8009d00:	3001      	adds	r0, #1
 8009d02:	f000 80a7 	beq.w	8009e54 <_vfiprintf_r+0x1ec>
 8009d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d08:	445a      	add	r2, fp
 8009d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 809f 	beq.w	8009e54 <_vfiprintf_r+0x1ec>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d20:	f10a 0a01 	add.w	sl, sl, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d2e:	4654      	mov	r4, sl
 8009d30:	2205      	movs	r2, #5
 8009d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d36:	4853      	ldr	r0, [pc, #332]	@ (8009e84 <_vfiprintf_r+0x21c>)
 8009d38:	f7f6 fa4a 	bl	80001d0 <memchr>
 8009d3c:	9a04      	ldr	r2, [sp, #16]
 8009d3e:	b9d8      	cbnz	r0, 8009d78 <_vfiprintf_r+0x110>
 8009d40:	06d1      	lsls	r1, r2, #27
 8009d42:	bf44      	itt	mi
 8009d44:	2320      	movmi	r3, #32
 8009d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d4a:	0713      	lsls	r3, r2, #28
 8009d4c:	bf44      	itt	mi
 8009d4e:	232b      	movmi	r3, #43	@ 0x2b
 8009d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d54:	f89a 3000 	ldrb.w	r3, [sl]
 8009d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d5a:	d015      	beq.n	8009d88 <_vfiprintf_r+0x120>
 8009d5c:	9a07      	ldr	r2, [sp, #28]
 8009d5e:	4654      	mov	r4, sl
 8009d60:	2000      	movs	r0, #0
 8009d62:	f04f 0c0a 	mov.w	ip, #10
 8009d66:	4621      	mov	r1, r4
 8009d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6c:	3b30      	subs	r3, #48	@ 0x30
 8009d6e:	2b09      	cmp	r3, #9
 8009d70:	d94b      	bls.n	8009e0a <_vfiprintf_r+0x1a2>
 8009d72:	b1b0      	cbz	r0, 8009da2 <_vfiprintf_r+0x13a>
 8009d74:	9207      	str	r2, [sp, #28]
 8009d76:	e014      	b.n	8009da2 <_vfiprintf_r+0x13a>
 8009d78:	eba0 0308 	sub.w	r3, r0, r8
 8009d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d80:	4313      	orrs	r3, r2
 8009d82:	9304      	str	r3, [sp, #16]
 8009d84:	46a2      	mov	sl, r4
 8009d86:	e7d2      	b.n	8009d2e <_vfiprintf_r+0xc6>
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	1d19      	adds	r1, r3, #4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	9103      	str	r1, [sp, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfbb      	ittet	lt
 8009d94:	425b      	neglt	r3, r3
 8009d96:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9a:	9307      	strge	r3, [sp, #28]
 8009d9c:	9307      	strlt	r3, [sp, #28]
 8009d9e:	bfb8      	it	lt
 8009da0:	9204      	strlt	r2, [sp, #16]
 8009da2:	7823      	ldrb	r3, [r4, #0]
 8009da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009da6:	d10a      	bne.n	8009dbe <_vfiprintf_r+0x156>
 8009da8:	7863      	ldrb	r3, [r4, #1]
 8009daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dac:	d132      	bne.n	8009e14 <_vfiprintf_r+0x1ac>
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	1d1a      	adds	r2, r3, #4
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	9203      	str	r2, [sp, #12]
 8009db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dba:	3402      	adds	r4, #2
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e94 <_vfiprintf_r+0x22c>
 8009dc2:	7821      	ldrb	r1, [r4, #0]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	f7f6 fa02 	bl	80001d0 <memchr>
 8009dcc:	b138      	cbz	r0, 8009dde <_vfiprintf_r+0x176>
 8009dce:	9b04      	ldr	r3, [sp, #16]
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	2240      	movs	r2, #64	@ 0x40
 8009dd6:	4082      	lsls	r2, r0
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	3401      	adds	r4, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de2:	4829      	ldr	r0, [pc, #164]	@ (8009e88 <_vfiprintf_r+0x220>)
 8009de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009de8:	2206      	movs	r2, #6
 8009dea:	f7f6 f9f1 	bl	80001d0 <memchr>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d03f      	beq.n	8009e72 <_vfiprintf_r+0x20a>
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <_vfiprintf_r+0x224>)
 8009df4:	bb1b      	cbnz	r3, 8009e3e <_vfiprintf_r+0x1d6>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	3307      	adds	r3, #7
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	3308      	adds	r3, #8
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e04:	443b      	add	r3, r7
 8009e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e08:	e76a      	b.n	8009ce0 <_vfiprintf_r+0x78>
 8009e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0e:	460c      	mov	r4, r1
 8009e10:	2001      	movs	r0, #1
 8009e12:	e7a8      	b.n	8009d66 <_vfiprintf_r+0xfe>
 8009e14:	2300      	movs	r3, #0
 8009e16:	3401      	adds	r4, #1
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f04f 0c0a 	mov.w	ip, #10
 8009e20:	4620      	mov	r0, r4
 8009e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e26:	3a30      	subs	r2, #48	@ 0x30
 8009e28:	2a09      	cmp	r2, #9
 8009e2a:	d903      	bls.n	8009e34 <_vfiprintf_r+0x1cc>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0c6      	beq.n	8009dbe <_vfiprintf_r+0x156>
 8009e30:	9105      	str	r1, [sp, #20]
 8009e32:	e7c4      	b.n	8009dbe <_vfiprintf_r+0x156>
 8009e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e38:	4604      	mov	r4, r0
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e7f0      	b.n	8009e20 <_vfiprintf_r+0x1b8>
 8009e3e:	ab03      	add	r3, sp, #12
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	462a      	mov	r2, r5
 8009e44:	4b12      	ldr	r3, [pc, #72]	@ (8009e90 <_vfiprintf_r+0x228>)
 8009e46:	a904      	add	r1, sp, #16
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f3af 8000 	nop.w
 8009e4e:	4607      	mov	r7, r0
 8009e50:	1c78      	adds	r0, r7, #1
 8009e52:	d1d6      	bne.n	8009e02 <_vfiprintf_r+0x19a>
 8009e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d405      	bmi.n	8009e66 <_vfiprintf_r+0x1fe>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_vfiprintf_r+0x1fe>
 8009e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e62:	f7fe fcab 	bl	80087bc <__retarget_lock_release_recursive>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	065b      	lsls	r3, r3, #25
 8009e6a:	f53f af1f 	bmi.w	8009cac <_vfiprintf_r+0x44>
 8009e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e70:	e71e      	b.n	8009cb0 <_vfiprintf_r+0x48>
 8009e72:	ab03      	add	r3, sp, #12
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	462a      	mov	r2, r5
 8009e78:	4b05      	ldr	r3, [pc, #20]	@ (8009e90 <_vfiprintf_r+0x228>)
 8009e7a:	a904      	add	r1, sp, #16
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f000 f879 	bl	8009f74 <_printf_i>
 8009e82:	e7e4      	b.n	8009e4e <_vfiprintf_r+0x1e6>
 8009e84:	0800b725 	.word	0x0800b725
 8009e88:	0800b72f 	.word	0x0800b72f
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009c45 	.word	0x08009c45
 8009e94:	0800b72b 	.word	0x0800b72b

08009e98 <_printf_common>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	4616      	mov	r6, r2
 8009e9e:	4698      	mov	r8, r3
 8009ea0:	688a      	ldr	r2, [r1, #8]
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfb8      	it	lt
 8009eac:	4613      	movlt	r3, r2
 8009eae:	6033      	str	r3, [r6, #0]
 8009eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_printf_common+0x26>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	0699      	lsls	r1, r3, #26
 8009ec2:	bf42      	ittt	mi
 8009ec4:	6833      	ldrmi	r3, [r6, #0]
 8009ec6:	3302      	addmi	r3, #2
 8009ec8:	6033      	strmi	r3, [r6, #0]
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	f015 0506 	ands.w	r5, r5, #6
 8009ed0:	d106      	bne.n	8009ee0 <_printf_common+0x48>
 8009ed2:	f104 0a19 	add.w	sl, r4, #25
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	6832      	ldr	r2, [r6, #0]
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dc26      	bgt.n	8009f2e <_printf_common+0x96>
 8009ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	3b00      	subs	r3, #0
 8009ee8:	bf18      	it	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	0692      	lsls	r2, r2, #26
 8009eee:	d42b      	bmi.n	8009f48 <_printf_common+0xb0>
 8009ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ef4:	4641      	mov	r1, r8
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	47c8      	blx	r9
 8009efa:	3001      	adds	r0, #1
 8009efc:	d01e      	beq.n	8009f3c <_printf_common+0xa4>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	6922      	ldr	r2, [r4, #16]
 8009f02:	f003 0306 	and.w	r3, r3, #6
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	bf02      	ittt	eq
 8009f0a:	68e5      	ldreq	r5, [r4, #12]
 8009f0c:	6833      	ldreq	r3, [r6, #0]
 8009f0e:	1aed      	subeq	r5, r5, r3
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	bf0c      	ite	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	2500      	movne	r5, #0
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bfc4      	itt	gt
 8009f1e:	1a9b      	subgt	r3, r3, r2
 8009f20:	18ed      	addgt	r5, r5, r3
 8009f22:	2600      	movs	r6, #0
 8009f24:	341a      	adds	r4, #26
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	d11a      	bne.n	8009f60 <_printf_common+0xc8>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e008      	b.n	8009f40 <_printf_common+0xa8>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4652      	mov	r2, sl
 8009f32:	4641      	mov	r1, r8
 8009f34:	4638      	mov	r0, r7
 8009f36:	47c8      	blx	r9
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_printf_common+0xac>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	3501      	adds	r5, #1
 8009f46:	e7c6      	b.n	8009ed6 <_printf_common+0x3e>
 8009f48:	18e1      	adds	r1, r4, r3
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	2030      	movs	r0, #48	@ 0x30
 8009f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f52:	4422      	add	r2, r4
 8009f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	e7c7      	b.n	8009ef0 <_printf_common+0x58>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4622      	mov	r2, r4
 8009f64:	4641      	mov	r1, r8
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c8      	blx	r9
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d0e6      	beq.n	8009f3c <_printf_common+0xa4>
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7d9      	b.n	8009f26 <_printf_common+0x8e>
	...

08009f74 <_printf_i>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	7e0f      	ldrb	r7, [r1, #24]
 8009f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f7c:	2f78      	cmp	r7, #120	@ 0x78
 8009f7e:	4691      	mov	r9, r2
 8009f80:	4680      	mov	r8, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	469a      	mov	sl, r3
 8009f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f8a:	d807      	bhi.n	8009f9c <_printf_i+0x28>
 8009f8c:	2f62      	cmp	r7, #98	@ 0x62
 8009f8e:	d80a      	bhi.n	8009fa6 <_printf_i+0x32>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f000 80d2 	beq.w	800a13a <_printf_i+0x1c6>
 8009f96:	2f58      	cmp	r7, #88	@ 0x58
 8009f98:	f000 80b9 	beq.w	800a10e <_printf_i+0x19a>
 8009f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fa4:	e03a      	b.n	800a01c <_printf_i+0xa8>
 8009fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009faa:	2b15      	cmp	r3, #21
 8009fac:	d8f6      	bhi.n	8009f9c <_printf_i+0x28>
 8009fae:	a101      	add	r1, pc, #4	@ (adr r1, 8009fb4 <_printf_i+0x40>)
 8009fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	08009f9d 	.word	0x08009f9d
 8009fc0:	08009f9d 	.word	0x08009f9d
 8009fc4:	08009f9d 	.word	0x08009f9d
 8009fc8:	08009f9d 	.word	0x08009f9d
 8009fcc:	0800a021 	.word	0x0800a021
 8009fd0:	08009f9d 	.word	0x08009f9d
 8009fd4:	08009f9d 	.word	0x08009f9d
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	0800a121 	.word	0x0800a121
 8009fe4:	0800a04b 	.word	0x0800a04b
 8009fe8:	0800a0db 	.word	0x0800a0db
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a143 	.word	0x0800a143
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	0800a04b 	.word	0x0800a04b
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a0e3 	.word	0x0800a0e3
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6032      	str	r2, [r6, #0]
 800a014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a01c:	2301      	movs	r3, #1
 800a01e:	e09d      	b.n	800a15c <_printf_i+0x1e8>
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	6820      	ldr	r0, [r4, #0]
 800a024:	1d19      	adds	r1, r3, #4
 800a026:	6031      	str	r1, [r6, #0]
 800a028:	0606      	lsls	r6, r0, #24
 800a02a:	d501      	bpl.n	800a030 <_printf_i+0xbc>
 800a02c:	681d      	ldr	r5, [r3, #0]
 800a02e:	e003      	b.n	800a038 <_printf_i+0xc4>
 800a030:	0645      	lsls	r5, r0, #25
 800a032:	d5fb      	bpl.n	800a02c <_printf_i+0xb8>
 800a034:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a038:	2d00      	cmp	r5, #0
 800a03a:	da03      	bge.n	800a044 <_printf_i+0xd0>
 800a03c:	232d      	movs	r3, #45	@ 0x2d
 800a03e:	426d      	negs	r5, r5
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a044:	4859      	ldr	r0, [pc, #356]	@ (800a1ac <_printf_i+0x238>)
 800a046:	230a      	movs	r3, #10
 800a048:	e011      	b.n	800a06e <_printf_i+0xfa>
 800a04a:	6821      	ldr	r1, [r4, #0]
 800a04c:	6833      	ldr	r3, [r6, #0]
 800a04e:	0608      	lsls	r0, r1, #24
 800a050:	f853 5b04 	ldr.w	r5, [r3], #4
 800a054:	d402      	bmi.n	800a05c <_printf_i+0xe8>
 800a056:	0649      	lsls	r1, r1, #25
 800a058:	bf48      	it	mi
 800a05a:	b2ad      	uxthmi	r5, r5
 800a05c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a05e:	4853      	ldr	r0, [pc, #332]	@ (800a1ac <_printf_i+0x238>)
 800a060:	6033      	str	r3, [r6, #0]
 800a062:	bf14      	ite	ne
 800a064:	230a      	movne	r3, #10
 800a066:	2308      	moveq	r3, #8
 800a068:	2100      	movs	r1, #0
 800a06a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a06e:	6866      	ldr	r6, [r4, #4]
 800a070:	60a6      	str	r6, [r4, #8]
 800a072:	2e00      	cmp	r6, #0
 800a074:	bfa2      	ittt	ge
 800a076:	6821      	ldrge	r1, [r4, #0]
 800a078:	f021 0104 	bicge.w	r1, r1, #4
 800a07c:	6021      	strge	r1, [r4, #0]
 800a07e:	b90d      	cbnz	r5, 800a084 <_printf_i+0x110>
 800a080:	2e00      	cmp	r6, #0
 800a082:	d04b      	beq.n	800a11c <_printf_i+0x1a8>
 800a084:	4616      	mov	r6, r2
 800a086:	fbb5 f1f3 	udiv	r1, r5, r3
 800a08a:	fb03 5711 	mls	r7, r3, r1, r5
 800a08e:	5dc7      	ldrb	r7, [r0, r7]
 800a090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a094:	462f      	mov	r7, r5
 800a096:	42bb      	cmp	r3, r7
 800a098:	460d      	mov	r5, r1
 800a09a:	d9f4      	bls.n	800a086 <_printf_i+0x112>
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d10b      	bne.n	800a0b8 <_printf_i+0x144>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	07df      	lsls	r7, r3, #31
 800a0a4:	d508      	bpl.n	800a0b8 <_printf_i+0x144>
 800a0a6:	6923      	ldr	r3, [r4, #16]
 800a0a8:	6861      	ldr	r1, [r4, #4]
 800a0aa:	4299      	cmp	r1, r3
 800a0ac:	bfde      	ittt	le
 800a0ae:	2330      	movle	r3, #48	@ 0x30
 800a0b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0b8:	1b92      	subs	r2, r2, r6
 800a0ba:	6122      	str	r2, [r4, #16]
 800a0bc:	f8cd a000 	str.w	sl, [sp]
 800a0c0:	464b      	mov	r3, r9
 800a0c2:	aa03      	add	r2, sp, #12
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7ff fee6 	bl	8009e98 <_printf_common>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d14a      	bne.n	800a166 <_printf_i+0x1f2>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	b004      	add	sp, #16
 800a0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	f043 0320 	orr.w	r3, r3, #32
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	4833      	ldr	r0, [pc, #204]	@ (800a1b0 <_printf_i+0x23c>)
 800a0e4:	2778      	movs	r7, #120	@ 0x78
 800a0e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	6831      	ldr	r1, [r6, #0]
 800a0ee:	061f      	lsls	r7, r3, #24
 800a0f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0f4:	d402      	bmi.n	800a0fc <_printf_i+0x188>
 800a0f6:	065f      	lsls	r7, r3, #25
 800a0f8:	bf48      	it	mi
 800a0fa:	b2ad      	uxthmi	r5, r5
 800a0fc:	6031      	str	r1, [r6, #0]
 800a0fe:	07d9      	lsls	r1, r3, #31
 800a100:	bf44      	itt	mi
 800a102:	f043 0320 	orrmi.w	r3, r3, #32
 800a106:	6023      	strmi	r3, [r4, #0]
 800a108:	b11d      	cbz	r5, 800a112 <_printf_i+0x19e>
 800a10a:	2310      	movs	r3, #16
 800a10c:	e7ac      	b.n	800a068 <_printf_i+0xf4>
 800a10e:	4827      	ldr	r0, [pc, #156]	@ (800a1ac <_printf_i+0x238>)
 800a110:	e7e9      	b.n	800a0e6 <_printf_i+0x172>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	f023 0320 	bic.w	r3, r3, #32
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	e7f6      	b.n	800a10a <_printf_i+0x196>
 800a11c:	4616      	mov	r6, r2
 800a11e:	e7bd      	b.n	800a09c <_printf_i+0x128>
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	6825      	ldr	r5, [r4, #0]
 800a124:	6961      	ldr	r1, [r4, #20]
 800a126:	1d18      	adds	r0, r3, #4
 800a128:	6030      	str	r0, [r6, #0]
 800a12a:	062e      	lsls	r6, r5, #24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0x1c0>
 800a130:	6019      	str	r1, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0x1c6>
 800a134:	0668      	lsls	r0, r5, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0x1bc>
 800a138:	8019      	strh	r1, [r3, #0]
 800a13a:	2300      	movs	r3, #0
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	4616      	mov	r6, r2
 800a140:	e7bc      	b.n	800a0bc <_printf_i+0x148>
 800a142:	6833      	ldr	r3, [r6, #0]
 800a144:	1d1a      	adds	r2, r3, #4
 800a146:	6032      	str	r2, [r6, #0]
 800a148:	681e      	ldr	r6, [r3, #0]
 800a14a:	6862      	ldr	r2, [r4, #4]
 800a14c:	2100      	movs	r1, #0
 800a14e:	4630      	mov	r0, r6
 800a150:	f7f6 f83e 	bl	80001d0 <memchr>
 800a154:	b108      	cbz	r0, 800a15a <_printf_i+0x1e6>
 800a156:	1b80      	subs	r0, r0, r6
 800a158:	6060      	str	r0, [r4, #4]
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	2300      	movs	r3, #0
 800a160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a164:	e7aa      	b.n	800a0bc <_printf_i+0x148>
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	4632      	mov	r2, r6
 800a16a:	4649      	mov	r1, r9
 800a16c:	4640      	mov	r0, r8
 800a16e:	47d0      	blx	sl
 800a170:	3001      	adds	r0, #1
 800a172:	d0ad      	beq.n	800a0d0 <_printf_i+0x15c>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	079b      	lsls	r3, r3, #30
 800a178:	d413      	bmi.n	800a1a2 <_printf_i+0x22e>
 800a17a:	68e0      	ldr	r0, [r4, #12]
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	4298      	cmp	r0, r3
 800a180:	bfb8      	it	lt
 800a182:	4618      	movlt	r0, r3
 800a184:	e7a6      	b.n	800a0d4 <_printf_i+0x160>
 800a186:	2301      	movs	r3, #1
 800a188:	4632      	mov	r2, r6
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	47d0      	blx	sl
 800a190:	3001      	adds	r0, #1
 800a192:	d09d      	beq.n	800a0d0 <_printf_i+0x15c>
 800a194:	3501      	adds	r5, #1
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	9903      	ldr	r1, [sp, #12]
 800a19a:	1a5b      	subs	r3, r3, r1
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dcf2      	bgt.n	800a186 <_printf_i+0x212>
 800a1a0:	e7eb      	b.n	800a17a <_printf_i+0x206>
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	f104 0619 	add.w	r6, r4, #25
 800a1a8:	e7f5      	b.n	800a196 <_printf_i+0x222>
 800a1aa:	bf00      	nop
 800a1ac:	0800b736 	.word	0x0800b736
 800a1b0:	0800b747 	.word	0x0800b747

0800a1b4 <__swbuf_r>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	460e      	mov	r6, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b118      	cbz	r0, 800a1c6 <__swbuf_r+0x12>
 800a1be:	6a03      	ldr	r3, [r0, #32]
 800a1c0:	b90b      	cbnz	r3, 800a1c6 <__swbuf_r+0x12>
 800a1c2:	f7fe f9f5 	bl	80085b0 <__sinit>
 800a1c6:	69a3      	ldr	r3, [r4, #24]
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	071a      	lsls	r2, r3, #28
 800a1ce:	d501      	bpl.n	800a1d4 <__swbuf_r+0x20>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	b943      	cbnz	r3, 800a1e6 <__swbuf_r+0x32>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f82a 	bl	800a230 <__swsetup_r>
 800a1dc:	b118      	cbz	r0, 800a1e6 <__swbuf_r+0x32>
 800a1de:	f04f 37ff 	mov.w	r7, #4294967295
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	1a98      	subs	r0, r3, r2
 800a1ec:	6963      	ldr	r3, [r4, #20]
 800a1ee:	b2f6      	uxtb	r6, r6
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	4637      	mov	r7, r6
 800a1f4:	dc05      	bgt.n	800a202 <__swbuf_r+0x4e>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7ff fc81 	bl	8009b00 <_fflush_r>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d1ed      	bne.n	800a1de <__swbuf_r+0x2a>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	3b01      	subs	r3, #1
 800a206:	60a3      	str	r3, [r4, #8]
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	6022      	str	r2, [r4, #0]
 800a20e:	701e      	strb	r6, [r3, #0]
 800a210:	6962      	ldr	r2, [r4, #20]
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	429a      	cmp	r2, r3
 800a216:	d004      	beq.n	800a222 <__swbuf_r+0x6e>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d5e1      	bpl.n	800a1e2 <__swbuf_r+0x2e>
 800a21e:	2e0a      	cmp	r6, #10
 800a220:	d1df      	bne.n	800a1e2 <__swbuf_r+0x2e>
 800a222:	4621      	mov	r1, r4
 800a224:	4628      	mov	r0, r5
 800a226:	f7ff fc6b 	bl	8009b00 <_fflush_r>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d0d9      	beq.n	800a1e2 <__swbuf_r+0x2e>
 800a22e:	e7d6      	b.n	800a1de <__swbuf_r+0x2a>

0800a230 <__swsetup_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4b29      	ldr	r3, [pc, #164]	@ (800a2d8 <__swsetup_r+0xa8>)
 800a234:	4605      	mov	r5, r0
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	460c      	mov	r4, r1
 800a23a:	b118      	cbz	r0, 800a244 <__swsetup_r+0x14>
 800a23c:	6a03      	ldr	r3, [r0, #32]
 800a23e:	b90b      	cbnz	r3, 800a244 <__swsetup_r+0x14>
 800a240:	f7fe f9b6 	bl	80085b0 <__sinit>
 800a244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a248:	0719      	lsls	r1, r3, #28
 800a24a:	d422      	bmi.n	800a292 <__swsetup_r+0x62>
 800a24c:	06da      	lsls	r2, r3, #27
 800a24e:	d407      	bmi.n	800a260 <__swsetup_r+0x30>
 800a250:	2209      	movs	r2, #9
 800a252:	602a      	str	r2, [r5, #0]
 800a254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	e033      	b.n	800a2c8 <__swsetup_r+0x98>
 800a260:	0758      	lsls	r0, r3, #29
 800a262:	d512      	bpl.n	800a28a <__swsetup_r+0x5a>
 800a264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a266:	b141      	cbz	r1, 800a27a <__swsetup_r+0x4a>
 800a268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d002      	beq.n	800a276 <__swsetup_r+0x46>
 800a270:	4628      	mov	r0, r5
 800a272:	f7fe fabd 	bl	80087f0 <_free_r>
 800a276:	2300      	movs	r3, #0
 800a278:	6363      	str	r3, [r4, #52]	@ 0x34
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0308 	orr.w	r3, r3, #8
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b94b      	cbnz	r3, 800a2aa <__swsetup_r+0x7a>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a0:	d003      	beq.n	800a2aa <__swsetup_r+0x7a>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f000 f883 	bl	800a3b0 <__smakebuf_r>
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	f013 0201 	ands.w	r2, r3, #1
 800a2b2:	d00a      	beq.n	800a2ca <__swsetup_r+0x9a>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60a2      	str	r2, [r4, #8]
 800a2b8:	6962      	ldr	r2, [r4, #20]
 800a2ba:	4252      	negs	r2, r2
 800a2bc:	61a2      	str	r2, [r4, #24]
 800a2be:	6922      	ldr	r2, [r4, #16]
 800a2c0:	b942      	cbnz	r2, 800a2d4 <__swsetup_r+0xa4>
 800a2c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2c6:	d1c5      	bne.n	800a254 <__swsetup_r+0x24>
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	0799      	lsls	r1, r3, #30
 800a2cc:	bf58      	it	pl
 800a2ce:	6962      	ldrpl	r2, [r4, #20]
 800a2d0:	60a2      	str	r2, [r4, #8]
 800a2d2:	e7f4      	b.n	800a2be <__swsetup_r+0x8e>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e7f7      	b.n	800a2c8 <__swsetup_r+0x98>
 800a2d8:	20000188 	.word	0x20000188

0800a2dc <_raise_r>:
 800a2dc:	291f      	cmp	r1, #31
 800a2de:	b538      	push	{r3, r4, r5, lr}
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	d904      	bls.n	800a2f0 <_raise_r+0x14>
 800a2e6:	2316      	movs	r3, #22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2f2:	b112      	cbz	r2, 800a2fa <_raise_r+0x1e>
 800a2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2f8:	b94b      	cbnz	r3, 800a30e <_raise_r+0x32>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f830 	bl	800a360 <_getpid_r>
 800a300:	4622      	mov	r2, r4
 800a302:	4601      	mov	r1, r0
 800a304:	4628      	mov	r0, r5
 800a306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a30a:	f000 b817 	b.w	800a33c <_kill_r>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d00a      	beq.n	800a328 <_raise_r+0x4c>
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	d103      	bne.n	800a31e <_raise_r+0x42>
 800a316:	2316      	movs	r3, #22
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	e7e7      	b.n	800a2ee <_raise_r+0x12>
 800a31e:	2100      	movs	r1, #0
 800a320:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a324:	4620      	mov	r0, r4
 800a326:	4798      	blx	r3
 800a328:	2000      	movs	r0, #0
 800a32a:	e7e0      	b.n	800a2ee <_raise_r+0x12>

0800a32c <raise>:
 800a32c:	4b02      	ldr	r3, [pc, #8]	@ (800a338 <raise+0xc>)
 800a32e:	4601      	mov	r1, r0
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f7ff bfd3 	b.w	800a2dc <_raise_r>
 800a336:	bf00      	nop
 800a338:	20000188 	.word	0x20000188

0800a33c <_kill_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d07      	ldr	r5, [pc, #28]	@ (800a35c <_kill_r+0x20>)
 800a340:	2300      	movs	r3, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	602b      	str	r3, [r5, #0]
 800a34a:	f7f7 fd2d 	bl	8001da8 <_kill>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	d102      	bne.n	800a358 <_kill_r+0x1c>
 800a352:	682b      	ldr	r3, [r5, #0]
 800a354:	b103      	cbz	r3, 800a358 <_kill_r+0x1c>
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	bd38      	pop	{r3, r4, r5, pc}
 800a35a:	bf00      	nop
 800a35c:	200005c8 	.word	0x200005c8

0800a360 <_getpid_r>:
 800a360:	f7f7 bd1a 	b.w	8001d98 <_getpid>

0800a364 <__swhatbuf_r>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	460c      	mov	r4, r1
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	2900      	cmp	r1, #0
 800a36e:	b096      	sub	sp, #88	@ 0x58
 800a370:	4615      	mov	r5, r2
 800a372:	461e      	mov	r6, r3
 800a374:	da0d      	bge.n	800a392 <__swhatbuf_r+0x2e>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a37c:	f04f 0100 	mov.w	r1, #0
 800a380:	bf14      	ite	ne
 800a382:	2340      	movne	r3, #64	@ 0x40
 800a384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a388:	2000      	movs	r0, #0
 800a38a:	6031      	str	r1, [r6, #0]
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	b016      	add	sp, #88	@ 0x58
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	466a      	mov	r2, sp
 800a394:	f000 f848 	bl	800a428 <_fstat_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	dbec      	blt.n	800a376 <__swhatbuf_r+0x12>
 800a39c:	9901      	ldr	r1, [sp, #4]
 800a39e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3a6:	4259      	negs	r1, r3
 800a3a8:	4159      	adcs	r1, r3
 800a3aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3ae:	e7eb      	b.n	800a388 <__swhatbuf_r+0x24>

0800a3b0 <__smakebuf_r>:
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3b4:	079d      	lsls	r5, r3, #30
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	d507      	bpl.n	800a3cc <__smakebuf_r+0x1c>
 800a3bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	6123      	str	r3, [r4, #16]
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	6163      	str	r3, [r4, #20]
 800a3c8:	b003      	add	sp, #12
 800a3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3cc:	ab01      	add	r3, sp, #4
 800a3ce:	466a      	mov	r2, sp
 800a3d0:	f7ff ffc8 	bl	800a364 <__swhatbuf_r>
 800a3d4:	9f00      	ldr	r7, [sp, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	4639      	mov	r1, r7
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7fe fdae 	bl	8008f3c <_malloc_r>
 800a3e0:	b948      	cbnz	r0, 800a3f6 <__smakebuf_r+0x46>
 800a3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e6:	059a      	lsls	r2, r3, #22
 800a3e8:	d4ee      	bmi.n	800a3c8 <__smakebuf_r+0x18>
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	f043 0302 	orr.w	r3, r3, #2
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	e7e2      	b.n	800a3bc <__smakebuf_r+0xc>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	6020      	str	r0, [r4, #0]
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a406:	b15b      	cbz	r3, 800a420 <__smakebuf_r+0x70>
 800a408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a40c:	4630      	mov	r0, r6
 800a40e:	f000 f81d 	bl	800a44c <_isatty_r>
 800a412:	b128      	cbz	r0, 800a420 <__smakebuf_r+0x70>
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	f023 0303 	bic.w	r3, r3, #3
 800a41a:	f043 0301 	orr.w	r3, r3, #1
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	431d      	orrs	r5, r3
 800a424:	81a5      	strh	r5, [r4, #12]
 800a426:	e7cf      	b.n	800a3c8 <__smakebuf_r+0x18>

0800a428 <_fstat_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	@ (800a448 <_fstat_r+0x20>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	4611      	mov	r1, r2
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	f7f7 fd17 	bl	8001e68 <_fstat>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d102      	bne.n	800a444 <_fstat_r+0x1c>
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	b103      	cbz	r3, 800a444 <_fstat_r+0x1c>
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	bf00      	nop
 800a448:	200005c8 	.word	0x200005c8

0800a44c <_isatty_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d06      	ldr	r5, [pc, #24]	@ (800a468 <_isatty_r+0x1c>)
 800a450:	2300      	movs	r3, #0
 800a452:	4604      	mov	r4, r0
 800a454:	4608      	mov	r0, r1
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	f7f7 fd16 	bl	8001e88 <_isatty>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_isatty_r+0x1a>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_isatty_r+0x1a>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	200005c8 	.word	0x200005c8

0800a46c <pow>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	ed2d 8b02 	vpush	{d8}
 800a472:	eeb0 8a40 	vmov.f32	s16, s0
 800a476:	eef0 8a60 	vmov.f32	s17, s1
 800a47a:	ec55 4b11 	vmov	r4, r5, d1
 800a47e:	f000 f94b 	bl	800a718 <__ieee754_pow>
 800a482:	4622      	mov	r2, r4
 800a484:	462b      	mov	r3, r5
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	ec57 6b10 	vmov	r6, r7, d0
 800a48e:	f7f6 fb45 	bl	8000b1c <__aeabi_dcmpun>
 800a492:	2800      	cmp	r0, #0
 800a494:	d13b      	bne.n	800a50e <pow+0xa2>
 800a496:	ec51 0b18 	vmov	r0, r1, d8
 800a49a:	2200      	movs	r2, #0
 800a49c:	2300      	movs	r3, #0
 800a49e:	f7f6 fb0b 	bl	8000ab8 <__aeabi_dcmpeq>
 800a4a2:	b1b8      	cbz	r0, 800a4d4 <pow+0x68>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f6 fb04 	bl	8000ab8 <__aeabi_dcmpeq>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d146      	bne.n	800a542 <pow+0xd6>
 800a4b4:	ec45 4b10 	vmov	d0, r4, r5
 800a4b8:	f000 f848 	bl	800a54c <finite>
 800a4bc:	b338      	cbz	r0, 800a50e <pow+0xa2>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	f7f6 fb01 	bl	8000acc <__aeabi_dcmplt>
 800a4ca:	b300      	cbz	r0, 800a50e <pow+0xa2>
 800a4cc:	f7fe f94a 	bl	8008764 <__errno>
 800a4d0:	2322      	movs	r3, #34	@ 0x22
 800a4d2:	e01b      	b.n	800a50c <pow+0xa0>
 800a4d4:	ec47 6b10 	vmov	d0, r6, r7
 800a4d8:	f000 f838 	bl	800a54c <finite>
 800a4dc:	b9e0      	cbnz	r0, 800a518 <pow+0xac>
 800a4de:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e2:	eef0 0a68 	vmov.f32	s1, s17
 800a4e6:	f000 f831 	bl	800a54c <finite>
 800a4ea:	b1a8      	cbz	r0, 800a518 <pow+0xac>
 800a4ec:	ec45 4b10 	vmov	d0, r4, r5
 800a4f0:	f000 f82c 	bl	800a54c <finite>
 800a4f4:	b180      	cbz	r0, 800a518 <pow+0xac>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	f7f6 fb0d 	bl	8000b1c <__aeabi_dcmpun>
 800a502:	2800      	cmp	r0, #0
 800a504:	d0e2      	beq.n	800a4cc <pow+0x60>
 800a506:	f7fe f92d 	bl	8008764 <__errno>
 800a50a:	2321      	movs	r3, #33	@ 0x21
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	ecbd 8b02 	vpop	{d8}
 800a512:	ec47 6b10 	vmov	d0, r6, r7
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a518:	2200      	movs	r2, #0
 800a51a:	2300      	movs	r3, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 faca 	bl	8000ab8 <__aeabi_dcmpeq>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0f2      	beq.n	800a50e <pow+0xa2>
 800a528:	eeb0 0a48 	vmov.f32	s0, s16
 800a52c:	eef0 0a68 	vmov.f32	s1, s17
 800a530:	f000 f80c 	bl	800a54c <finite>
 800a534:	2800      	cmp	r0, #0
 800a536:	d0ea      	beq.n	800a50e <pow+0xa2>
 800a538:	ec45 4b10 	vmov	d0, r4, r5
 800a53c:	f000 f806 	bl	800a54c <finite>
 800a540:	e7c3      	b.n	800a4ca <pow+0x5e>
 800a542:	4f01      	ldr	r7, [pc, #4]	@ (800a548 <pow+0xdc>)
 800a544:	2600      	movs	r6, #0
 800a546:	e7e2      	b.n	800a50e <pow+0xa2>
 800a548:	3ff00000 	.word	0x3ff00000

0800a54c <finite>:
 800a54c:	b082      	sub	sp, #8
 800a54e:	ed8d 0b00 	vstr	d0, [sp]
 800a552:	9801      	ldr	r0, [sp, #4]
 800a554:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a558:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a55c:	0fc0      	lsrs	r0, r0, #31
 800a55e:	b002      	add	sp, #8
 800a560:	4770      	bx	lr
	...

0800a564 <__ieee754_sqrt>:
 800a564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a568:	4a68      	ldr	r2, [pc, #416]	@ (800a70c <__ieee754_sqrt+0x1a8>)
 800a56a:	ec55 4b10 	vmov	r4, r5, d0
 800a56e:	43aa      	bics	r2, r5
 800a570:	462b      	mov	r3, r5
 800a572:	4621      	mov	r1, r4
 800a574:	d110      	bne.n	800a598 <__ieee754_sqrt+0x34>
 800a576:	4622      	mov	r2, r4
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f6 f834 	bl	80005e8 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f5 fe78 	bl	800027c <__adddf3>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	ec45 4b10 	vmov	d0, r4, r5
 800a594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	2d00      	cmp	r5, #0
 800a59a:	dc0e      	bgt.n	800a5ba <__ieee754_sqrt+0x56>
 800a59c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a5a0:	4322      	orrs	r2, r4
 800a5a2:	d0f5      	beq.n	800a590 <__ieee754_sqrt+0x2c>
 800a5a4:	b19d      	cbz	r5, 800a5ce <__ieee754_sqrt+0x6a>
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f5 fe64 	bl	8000278 <__aeabi_dsub>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f7f6 f942 	bl	800083c <__aeabi_ddiv>
 800a5b8:	e7e8      	b.n	800a58c <__ieee754_sqrt+0x28>
 800a5ba:	152a      	asrs	r2, r5, #20
 800a5bc:	d115      	bne.n	800a5ea <__ieee754_sqrt+0x86>
 800a5be:	2000      	movs	r0, #0
 800a5c0:	e009      	b.n	800a5d6 <__ieee754_sqrt+0x72>
 800a5c2:	0acb      	lsrs	r3, r1, #11
 800a5c4:	3a15      	subs	r2, #21
 800a5c6:	0549      	lsls	r1, r1, #21
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0fa      	beq.n	800a5c2 <__ieee754_sqrt+0x5e>
 800a5cc:	e7f7      	b.n	800a5be <__ieee754_sqrt+0x5a>
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	e7fa      	b.n	800a5c8 <__ieee754_sqrt+0x64>
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	02dc      	lsls	r4, r3, #11
 800a5d8:	d5fb      	bpl.n	800a5d2 <__ieee754_sqrt+0x6e>
 800a5da:	1e44      	subs	r4, r0, #1
 800a5dc:	1b12      	subs	r2, r2, r4
 800a5de:	f1c0 0420 	rsb	r4, r0, #32
 800a5e2:	fa21 f404 	lsr.w	r4, r1, r4
 800a5e6:	4323      	orrs	r3, r4
 800a5e8:	4081      	lsls	r1, r0
 800a5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a5f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5f6:	07d2      	lsls	r2, r2, #31
 800a5f8:	bf5c      	itt	pl
 800a5fa:	005b      	lslpl	r3, r3, #1
 800a5fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a600:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a604:	bf58      	it	pl
 800a606:	0049      	lslpl	r1, r1, #1
 800a608:	2600      	movs	r6, #0
 800a60a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a60e:	106d      	asrs	r5, r5, #1
 800a610:	0049      	lsls	r1, r1, #1
 800a612:	2016      	movs	r0, #22
 800a614:	4632      	mov	r2, r6
 800a616:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a61a:	1917      	adds	r7, r2, r4
 800a61c:	429f      	cmp	r7, r3
 800a61e:	bfde      	ittt	le
 800a620:	193a      	addle	r2, r7, r4
 800a622:	1bdb      	suble	r3, r3, r7
 800a624:	1936      	addle	r6, r6, r4
 800a626:	0fcf      	lsrs	r7, r1, #31
 800a628:	3801      	subs	r0, #1
 800a62a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a62e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a632:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a636:	d1f0      	bne.n	800a61a <__ieee754_sqrt+0xb6>
 800a638:	4604      	mov	r4, r0
 800a63a:	2720      	movs	r7, #32
 800a63c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a640:	429a      	cmp	r2, r3
 800a642:	eb00 0e0c 	add.w	lr, r0, ip
 800a646:	db02      	blt.n	800a64e <__ieee754_sqrt+0xea>
 800a648:	d113      	bne.n	800a672 <__ieee754_sqrt+0x10e>
 800a64a:	458e      	cmp	lr, r1
 800a64c:	d811      	bhi.n	800a672 <__ieee754_sqrt+0x10e>
 800a64e:	f1be 0f00 	cmp.w	lr, #0
 800a652:	eb0e 000c 	add.w	r0, lr, ip
 800a656:	da42      	bge.n	800a6de <__ieee754_sqrt+0x17a>
 800a658:	2800      	cmp	r0, #0
 800a65a:	db40      	blt.n	800a6de <__ieee754_sqrt+0x17a>
 800a65c:	f102 0801 	add.w	r8, r2, #1
 800a660:	1a9b      	subs	r3, r3, r2
 800a662:	458e      	cmp	lr, r1
 800a664:	bf88      	it	hi
 800a666:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a66a:	eba1 010e 	sub.w	r1, r1, lr
 800a66e:	4464      	add	r4, ip
 800a670:	4642      	mov	r2, r8
 800a672:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a676:	3f01      	subs	r7, #1
 800a678:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a67c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a680:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a684:	d1dc      	bne.n	800a640 <__ieee754_sqrt+0xdc>
 800a686:	4319      	orrs	r1, r3
 800a688:	d01b      	beq.n	800a6c2 <__ieee754_sqrt+0x15e>
 800a68a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a710 <__ieee754_sqrt+0x1ac>
 800a68e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a714 <__ieee754_sqrt+0x1b0>
 800a692:	e9da 0100 	ldrd	r0, r1, [sl]
 800a696:	e9db 2300 	ldrd	r2, r3, [fp]
 800a69a:	f7f5 fded 	bl	8000278 <__aeabi_dsub>
 800a69e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f6 fa19 	bl	8000ae0 <__aeabi_dcmple>
 800a6ae:	b140      	cbz	r0, 800a6c2 <__ieee754_sqrt+0x15e>
 800a6b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a6b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6bc:	d111      	bne.n	800a6e2 <__ieee754_sqrt+0x17e>
 800a6be:	3601      	adds	r6, #1
 800a6c0:	463c      	mov	r4, r7
 800a6c2:	1072      	asrs	r2, r6, #1
 800a6c4:	0863      	lsrs	r3, r4, #1
 800a6c6:	07f1      	lsls	r1, r6, #31
 800a6c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a6cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a6d0:	bf48      	it	mi
 800a6d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a6d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a6da:	4618      	mov	r0, r3
 800a6dc:	e756      	b.n	800a58c <__ieee754_sqrt+0x28>
 800a6de:	4690      	mov	r8, r2
 800a6e0:	e7be      	b.n	800a660 <__ieee754_sqrt+0xfc>
 800a6e2:	f7f5 fdcb 	bl	800027c <__adddf3>
 800a6e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f6 f9eb 	bl	8000acc <__aeabi_dcmplt>
 800a6f6:	b120      	cbz	r0, 800a702 <__ieee754_sqrt+0x19e>
 800a6f8:	1ca0      	adds	r0, r4, #2
 800a6fa:	bf08      	it	eq
 800a6fc:	3601      	addeq	r6, #1
 800a6fe:	3402      	adds	r4, #2
 800a700:	e7df      	b.n	800a6c2 <__ieee754_sqrt+0x15e>
 800a702:	1c63      	adds	r3, r4, #1
 800a704:	f023 0401 	bic.w	r4, r3, #1
 800a708:	e7db      	b.n	800a6c2 <__ieee754_sqrt+0x15e>
 800a70a:	bf00      	nop
 800a70c:	7ff00000 	.word	0x7ff00000
 800a710:	200001e0 	.word	0x200001e0
 800a714:	200001d8 	.word	0x200001d8

0800a718 <__ieee754_pow>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	b091      	sub	sp, #68	@ 0x44
 800a71e:	ed8d 1b00 	vstr	d1, [sp]
 800a722:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a726:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a72a:	ea5a 0001 	orrs.w	r0, sl, r1
 800a72e:	ec57 6b10 	vmov	r6, r7, d0
 800a732:	d113      	bne.n	800a75c <__ieee754_pow+0x44>
 800a734:	19b3      	adds	r3, r6, r6
 800a736:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a73a:	4152      	adcs	r2, r2
 800a73c:	4298      	cmp	r0, r3
 800a73e:	4b98      	ldr	r3, [pc, #608]	@ (800a9a0 <__ieee754_pow+0x288>)
 800a740:	4193      	sbcs	r3, r2
 800a742:	f080 84ea 	bcs.w	800b11a <__ieee754_pow+0xa02>
 800a746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f5 fd95 	bl	800027c <__adddf3>
 800a752:	ec41 0b10 	vmov	d0, r0, r1
 800a756:	b011      	add	sp, #68	@ 0x44
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	4a91      	ldr	r2, [pc, #580]	@ (800a9a4 <__ieee754_pow+0x28c>)
 800a75e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a762:	4590      	cmp	r8, r2
 800a764:	463d      	mov	r5, r7
 800a766:	4633      	mov	r3, r6
 800a768:	d806      	bhi.n	800a778 <__ieee754_pow+0x60>
 800a76a:	d101      	bne.n	800a770 <__ieee754_pow+0x58>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	d1ea      	bne.n	800a746 <__ieee754_pow+0x2e>
 800a770:	4592      	cmp	sl, r2
 800a772:	d801      	bhi.n	800a778 <__ieee754_pow+0x60>
 800a774:	d10e      	bne.n	800a794 <__ieee754_pow+0x7c>
 800a776:	b169      	cbz	r1, 800a794 <__ieee754_pow+0x7c>
 800a778:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a77c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a780:	431d      	orrs	r5, r3
 800a782:	d1e0      	bne.n	800a746 <__ieee754_pow+0x2e>
 800a784:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a788:	18db      	adds	r3, r3, r3
 800a78a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a78e:	4152      	adcs	r2, r2
 800a790:	429d      	cmp	r5, r3
 800a792:	e7d4      	b.n	800a73e <__ieee754_pow+0x26>
 800a794:	2d00      	cmp	r5, #0
 800a796:	46c3      	mov	fp, r8
 800a798:	da3a      	bge.n	800a810 <__ieee754_pow+0xf8>
 800a79a:	4a83      	ldr	r2, [pc, #524]	@ (800a9a8 <__ieee754_pow+0x290>)
 800a79c:	4592      	cmp	sl, r2
 800a79e:	d84d      	bhi.n	800a83c <__ieee754_pow+0x124>
 800a7a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a7a4:	4592      	cmp	sl, r2
 800a7a6:	f240 84c7 	bls.w	800b138 <__ieee754_pow+0xa20>
 800a7aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a7ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a7b2:	2a14      	cmp	r2, #20
 800a7b4:	dd0f      	ble.n	800a7d6 <__ieee754_pow+0xbe>
 800a7b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a7ba:	fa21 f402 	lsr.w	r4, r1, r2
 800a7be:	fa04 f202 	lsl.w	r2, r4, r2
 800a7c2:	428a      	cmp	r2, r1
 800a7c4:	f040 84b8 	bne.w	800b138 <__ieee754_pow+0xa20>
 800a7c8:	f004 0401 	and.w	r4, r4, #1
 800a7cc:	f1c4 0402 	rsb	r4, r4, #2
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d158      	bne.n	800a886 <__ieee754_pow+0x16e>
 800a7d4:	e00e      	b.n	800a7f4 <__ieee754_pow+0xdc>
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	d154      	bne.n	800a884 <__ieee754_pow+0x16c>
 800a7da:	f1c2 0214 	rsb	r2, r2, #20
 800a7de:	fa4a f402 	asr.w	r4, sl, r2
 800a7e2:	fa04 f202 	lsl.w	r2, r4, r2
 800a7e6:	4552      	cmp	r2, sl
 800a7e8:	f040 84a3 	bne.w	800b132 <__ieee754_pow+0xa1a>
 800a7ec:	f004 0401 	and.w	r4, r4, #1
 800a7f0:	f1c4 0402 	rsb	r4, r4, #2
 800a7f4:	4a6d      	ldr	r2, [pc, #436]	@ (800a9ac <__ieee754_pow+0x294>)
 800a7f6:	4592      	cmp	sl, r2
 800a7f8:	d12e      	bne.n	800a858 <__ieee754_pow+0x140>
 800a7fa:	f1b9 0f00 	cmp.w	r9, #0
 800a7fe:	f280 8494 	bge.w	800b12a <__ieee754_pow+0xa12>
 800a802:	496a      	ldr	r1, [pc, #424]	@ (800a9ac <__ieee754_pow+0x294>)
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	2000      	movs	r0, #0
 800a80a:	f7f6 f817 	bl	800083c <__aeabi_ddiv>
 800a80e:	e7a0      	b.n	800a752 <__ieee754_pow+0x3a>
 800a810:	2400      	movs	r4, #0
 800a812:	bbc1      	cbnz	r1, 800a886 <__ieee754_pow+0x16e>
 800a814:	4a63      	ldr	r2, [pc, #396]	@ (800a9a4 <__ieee754_pow+0x28c>)
 800a816:	4592      	cmp	sl, r2
 800a818:	d1ec      	bne.n	800a7f4 <__ieee754_pow+0xdc>
 800a81a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a81e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a822:	431a      	orrs	r2, r3
 800a824:	f000 8479 	beq.w	800b11a <__ieee754_pow+0xa02>
 800a828:	4b61      	ldr	r3, [pc, #388]	@ (800a9b0 <__ieee754_pow+0x298>)
 800a82a:	4598      	cmp	r8, r3
 800a82c:	d908      	bls.n	800a840 <__ieee754_pow+0x128>
 800a82e:	f1b9 0f00 	cmp.w	r9, #0
 800a832:	f2c0 8476 	blt.w	800b122 <__ieee754_pow+0xa0a>
 800a836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a83a:	e78a      	b.n	800a752 <__ieee754_pow+0x3a>
 800a83c:	2402      	movs	r4, #2
 800a83e:	e7e8      	b.n	800a812 <__ieee754_pow+0xfa>
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f04f 0100 	mov.w	r1, #0
 800a84c:	da81      	bge.n	800a752 <__ieee754_pow+0x3a>
 800a84e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a852:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a856:	e77c      	b.n	800a752 <__ieee754_pow+0x3a>
 800a858:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a85c:	d106      	bne.n	800a86c <__ieee754_pow+0x154>
 800a85e:	4632      	mov	r2, r6
 800a860:	463b      	mov	r3, r7
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 febf 	bl	80005e8 <__aeabi_dmul>
 800a86a:	e772      	b.n	800a752 <__ieee754_pow+0x3a>
 800a86c:	4a51      	ldr	r2, [pc, #324]	@ (800a9b4 <__ieee754_pow+0x29c>)
 800a86e:	4591      	cmp	r9, r2
 800a870:	d109      	bne.n	800a886 <__ieee754_pow+0x16e>
 800a872:	2d00      	cmp	r5, #0
 800a874:	db07      	blt.n	800a886 <__ieee754_pow+0x16e>
 800a876:	ec47 6b10 	vmov	d0, r6, r7
 800a87a:	b011      	add	sp, #68	@ 0x44
 800a87c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	f7ff be70 	b.w	800a564 <__ieee754_sqrt>
 800a884:	2400      	movs	r4, #0
 800a886:	ec47 6b10 	vmov	d0, r6, r7
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	f000 fc88 	bl	800b1a0 <fabs>
 800a890:	9b02      	ldr	r3, [sp, #8]
 800a892:	ec51 0b10 	vmov	r0, r1, d0
 800a896:	bb53      	cbnz	r3, 800a8ee <__ieee754_pow+0x1d6>
 800a898:	4b44      	ldr	r3, [pc, #272]	@ (800a9ac <__ieee754_pow+0x294>)
 800a89a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d002      	beq.n	800a8a8 <__ieee754_pow+0x190>
 800a8a2:	f1b8 0f00 	cmp.w	r8, #0
 800a8a6:	d122      	bne.n	800a8ee <__ieee754_pow+0x1d6>
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	da05      	bge.n	800a8ba <__ieee754_pow+0x1a2>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	493d      	ldr	r1, [pc, #244]	@ (800a9ac <__ieee754_pow+0x294>)
 800a8b6:	f7f5 ffc1 	bl	800083c <__aeabi_ddiv>
 800a8ba:	2d00      	cmp	r5, #0
 800a8bc:	f6bf af49 	bge.w	800a752 <__ieee754_pow+0x3a>
 800a8c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a8c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a8c8:	ea58 0804 	orrs.w	r8, r8, r4
 800a8cc:	d108      	bne.n	800a8e0 <__ieee754_pow+0x1c8>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f7f5 fccf 	bl	8000278 <__aeabi_dsub>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	e794      	b.n	800a80a <__ieee754_pow+0xf2>
 800a8e0:	2c01      	cmp	r4, #1
 800a8e2:	f47f af36 	bne.w	800a752 <__ieee754_pow+0x3a>
 800a8e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	e731      	b.n	800a752 <__ieee754_pow+0x3a>
 800a8ee:	0feb      	lsrs	r3, r5, #31
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	ea53 0204 	orrs.w	r2, r3, r4
 800a8f6:	d102      	bne.n	800a8fe <__ieee754_pow+0x1e6>
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	e7e9      	b.n	800a8d2 <__ieee754_pow+0x1ba>
 800a8fe:	3c01      	subs	r4, #1
 800a900:	431c      	orrs	r4, r3
 800a902:	d016      	beq.n	800a932 <__ieee754_pow+0x21a>
 800a904:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a990 <__ieee754_pow+0x278>
 800a908:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a90c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a910:	f240 8112 	bls.w	800ab38 <__ieee754_pow+0x420>
 800a914:	4b28      	ldr	r3, [pc, #160]	@ (800a9b8 <__ieee754_pow+0x2a0>)
 800a916:	459a      	cmp	sl, r3
 800a918:	4b25      	ldr	r3, [pc, #148]	@ (800a9b0 <__ieee754_pow+0x298>)
 800a91a:	d916      	bls.n	800a94a <__ieee754_pow+0x232>
 800a91c:	4598      	cmp	r8, r3
 800a91e:	d80b      	bhi.n	800a938 <__ieee754_pow+0x220>
 800a920:	f1b9 0f00 	cmp.w	r9, #0
 800a924:	da0b      	bge.n	800a93e <__ieee754_pow+0x226>
 800a926:	2000      	movs	r0, #0
 800a928:	b011      	add	sp, #68	@ 0x44
 800a92a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92e:	f000 bcf3 	b.w	800b318 <__math_oflow>
 800a932:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a998 <__ieee754_pow+0x280>
 800a936:	e7e7      	b.n	800a908 <__ieee754_pow+0x1f0>
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	dcf3      	bgt.n	800a926 <__ieee754_pow+0x20e>
 800a93e:	2000      	movs	r0, #0
 800a940:	b011      	add	sp, #68	@ 0x44
 800a942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a946:	f000 bcdf 	b.w	800b308 <__math_uflow>
 800a94a:	4598      	cmp	r8, r3
 800a94c:	d20c      	bcs.n	800a968 <__ieee754_pow+0x250>
 800a94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a952:	2200      	movs	r2, #0
 800a954:	2300      	movs	r3, #0
 800a956:	f7f6 f8b9 	bl	8000acc <__aeabi_dcmplt>
 800a95a:	3800      	subs	r0, #0
 800a95c:	bf18      	it	ne
 800a95e:	2001      	movne	r0, #1
 800a960:	f1b9 0f00 	cmp.w	r9, #0
 800a964:	daec      	bge.n	800a940 <__ieee754_pow+0x228>
 800a966:	e7df      	b.n	800a928 <__ieee754_pow+0x210>
 800a968:	4b10      	ldr	r3, [pc, #64]	@ (800a9ac <__ieee754_pow+0x294>)
 800a96a:	4598      	cmp	r8, r3
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	d924      	bls.n	800a9bc <__ieee754_pow+0x2a4>
 800a972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a976:	2300      	movs	r3, #0
 800a978:	f7f6 f8a8 	bl	8000acc <__aeabi_dcmplt>
 800a97c:	3800      	subs	r0, #0
 800a97e:	bf18      	it	ne
 800a980:	2001      	movne	r0, #1
 800a982:	f1b9 0f00 	cmp.w	r9, #0
 800a986:	dccf      	bgt.n	800a928 <__ieee754_pow+0x210>
 800a988:	e7da      	b.n	800a940 <__ieee754_pow+0x228>
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w
 800a990:	00000000 	.word	0x00000000
 800a994:	3ff00000 	.word	0x3ff00000
 800a998:	00000000 	.word	0x00000000
 800a99c:	bff00000 	.word	0xbff00000
 800a9a0:	fff00000 	.word	0xfff00000
 800a9a4:	7ff00000 	.word	0x7ff00000
 800a9a8:	433fffff 	.word	0x433fffff
 800a9ac:	3ff00000 	.word	0x3ff00000
 800a9b0:	3fefffff 	.word	0x3fefffff
 800a9b4:	3fe00000 	.word	0x3fe00000
 800a9b8:	43f00000 	.word	0x43f00000
 800a9bc:	4b5a      	ldr	r3, [pc, #360]	@ (800ab28 <__ieee754_pow+0x410>)
 800a9be:	f7f5 fc5b 	bl	8000278 <__aeabi_dsub>
 800a9c2:	a351      	add	r3, pc, #324	@ (adr r3, 800ab08 <__ieee754_pow+0x3f0>)
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	f7f5 fe0c 	bl	80005e8 <__aeabi_dmul>
 800a9d0:	a34f      	add	r3, pc, #316	@ (adr r3, 800ab10 <__ieee754_pow+0x3f8>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f5 fe03 	bl	80005e8 <__aeabi_dmul>
 800a9e2:	4b52      	ldr	r3, [pc, #328]	@ (800ab2c <__ieee754_pow+0x414>)
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	468b      	mov	fp, r1
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7f5 fdfb 	bl	80005e8 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	a148      	add	r1, pc, #288	@ (adr r1, 800ab18 <__ieee754_pow+0x400>)
 800a9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9fc:	f7f5 fc3c 	bl	8000278 <__aeabi_dsub>
 800aa00:	4622      	mov	r2, r4
 800aa02:	462b      	mov	r3, r5
 800aa04:	f7f5 fdf0 	bl	80005e8 <__aeabi_dmul>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	4948      	ldr	r1, [pc, #288]	@ (800ab30 <__ieee754_pow+0x418>)
 800aa10:	f7f5 fc32 	bl	8000278 <__aeabi_dsub>
 800aa14:	4622      	mov	r2, r4
 800aa16:	4680      	mov	r8, r0
 800aa18:	4689      	mov	r9, r1
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fde2 	bl	80005e8 <__aeabi_dmul>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f5 fddc 	bl	80005e8 <__aeabi_dmul>
 800aa30:	a33b      	add	r3, pc, #236	@ (adr r3, 800ab20 <__ieee754_pow+0x408>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f7f5 fdd7 	bl	80005e8 <__aeabi_dmul>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4650      	mov	r0, sl
 800aa40:	4659      	mov	r1, fp
 800aa42:	f7f5 fc19 	bl	8000278 <__aeabi_dsub>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4680      	mov	r8, r0
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	4630      	mov	r0, r6
 800aa50:	4639      	mov	r1, r7
 800aa52:	f7f5 fc13 	bl	800027c <__adddf3>
 800aa56:	2400      	movs	r4, #0
 800aa58:	4632      	mov	r2, r6
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	460d      	mov	r5, r1
 800aa60:	f7f5 fc0a 	bl	8000278 <__aeabi_dsub>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f5 fc04 	bl	8000278 <__aeabi_dsub>
 800aa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9304      	str	r3, [sp, #16]
 800aa7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa80:	4606      	mov	r6, r0
 800aa82:	460f      	mov	r7, r1
 800aa84:	4652      	mov	r2, sl
 800aa86:	465b      	mov	r3, fp
 800aa88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa8c:	f7f5 fbf4 	bl	8000278 <__aeabi_dsub>
 800aa90:	4622      	mov	r2, r4
 800aa92:	462b      	mov	r3, r5
 800aa94:	f7f5 fda8 	bl	80005e8 <__aeabi_dmul>
 800aa98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f5 fda0 	bl	80005e8 <__aeabi_dmul>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f5 fbe4 	bl	800027c <__adddf3>
 800aab4:	4652      	mov	r2, sl
 800aab6:	465b      	mov	r3, fp
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f5 fd92 	bl	80005e8 <__aeabi_dmul>
 800aac4:	460b      	mov	r3, r1
 800aac6:	4602      	mov	r2, r0
 800aac8:	4680      	mov	r8, r0
 800aaca:	4689      	mov	r9, r1
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f5 fbd4 	bl	800027c <__adddf3>
 800aad4:	4b17      	ldr	r3, [pc, #92]	@ (800ab34 <__ieee754_pow+0x41c>)
 800aad6:	4299      	cmp	r1, r3
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	468a      	mov	sl, r1
 800aade:	468b      	mov	fp, r1
 800aae0:	f340 82ef 	ble.w	800b0c2 <__ieee754_pow+0x9aa>
 800aae4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800aae8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800aaec:	4303      	orrs	r3, r0
 800aaee:	f000 81e8 	beq.w	800aec2 <__ieee754_pow+0x7aa>
 800aaf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f7f5 ffe7 	bl	8000acc <__aeabi_dcmplt>
 800aafe:	3800      	subs	r0, #0
 800ab00:	bf18      	it	ne
 800ab02:	2001      	movne	r0, #1
 800ab04:	e710      	b.n	800a928 <__ieee754_pow+0x210>
 800ab06:	bf00      	nop
 800ab08:	60000000 	.word	0x60000000
 800ab0c:	3ff71547 	.word	0x3ff71547
 800ab10:	f85ddf44 	.word	0xf85ddf44
 800ab14:	3e54ae0b 	.word	0x3e54ae0b
 800ab18:	55555555 	.word	0x55555555
 800ab1c:	3fd55555 	.word	0x3fd55555
 800ab20:	652b82fe 	.word	0x652b82fe
 800ab24:	3ff71547 	.word	0x3ff71547
 800ab28:	3ff00000 	.word	0x3ff00000
 800ab2c:	3fd00000 	.word	0x3fd00000
 800ab30:	3fe00000 	.word	0x3fe00000
 800ab34:	408fffff 	.word	0x408fffff
 800ab38:	4bd5      	ldr	r3, [pc, #852]	@ (800ae90 <__ieee754_pow+0x778>)
 800ab3a:	402b      	ands	r3, r5
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	b92b      	cbnz	r3, 800ab4c <__ieee754_pow+0x434>
 800ab40:	4bd4      	ldr	r3, [pc, #848]	@ (800ae94 <__ieee754_pow+0x77c>)
 800ab42:	f7f5 fd51 	bl	80005e8 <__aeabi_dmul>
 800ab46:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ab50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ab54:	4413      	add	r3, r2
 800ab56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab58:	4bcf      	ldr	r3, [pc, #828]	@ (800ae98 <__ieee754_pow+0x780>)
 800ab5a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ab5e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ab62:	459b      	cmp	fp, r3
 800ab64:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab68:	dd08      	ble.n	800ab7c <__ieee754_pow+0x464>
 800ab6a:	4bcc      	ldr	r3, [pc, #816]	@ (800ae9c <__ieee754_pow+0x784>)
 800ab6c:	459b      	cmp	fp, r3
 800ab6e:	f340 81a5 	ble.w	800aebc <__ieee754_pow+0x7a4>
 800ab72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab74:	3301      	adds	r3, #1
 800ab76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab78:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ab7c:	f04f 0a00 	mov.w	sl, #0
 800ab80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ab84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab86:	4bc6      	ldr	r3, [pc, #792]	@ (800aea0 <__ieee754_pow+0x788>)
 800ab88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab8c:	ed93 7b00 	vldr	d7, [r3]
 800ab90:	4629      	mov	r1, r5
 800ab92:	ec53 2b17 	vmov	r2, r3, d7
 800ab96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab9e:	f7f5 fb6b 	bl	8000278 <__aeabi_dsub>
 800aba2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aba6:	4606      	mov	r6, r0
 800aba8:	460f      	mov	r7, r1
 800abaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abae:	f7f5 fb65 	bl	800027c <__adddf3>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	2000      	movs	r0, #0
 800abb8:	49ba      	ldr	r1, [pc, #744]	@ (800aea4 <__ieee754_pow+0x78c>)
 800abba:	f7f5 fe3f 	bl	800083c <__aeabi_ddiv>
 800abbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 fd0d 	bl	80005e8 <__aeabi_dmul>
 800abce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abd2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800abd6:	106d      	asrs	r5, r5, #1
 800abd8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800abdc:	f04f 0b00 	mov.w	fp, #0
 800abe0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800abe4:	4661      	mov	r1, ip
 800abe6:	2200      	movs	r2, #0
 800abe8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800abec:	4658      	mov	r0, fp
 800abee:	46e1      	mov	r9, ip
 800abf0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800abf4:	4614      	mov	r4, r2
 800abf6:	461d      	mov	r5, r3
 800abf8:	f7f5 fcf6 	bl	80005e8 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 fb38 	bl	8000278 <__aeabi_dsub>
 800ac08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 fb30 	bl	8000278 <__aeabi_dsub>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac20:	f7f5 fb2a 	bl	8000278 <__aeabi_dsub>
 800ac24:	465a      	mov	r2, fp
 800ac26:	464b      	mov	r3, r9
 800ac28:	f7f5 fcde 	bl	80005e8 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fb20 	bl	8000278 <__aeabi_dsub>
 800ac38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac3c:	f7f5 fcd4 	bl	80005e8 <__aeabi_dmul>
 800ac40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	f7f5 fccc 	bl	80005e8 <__aeabi_dmul>
 800ac50:	a37d      	add	r3, pc, #500	@ (adr r3, 800ae48 <__ieee754_pow+0x730>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	f7f5 fcc5 	bl	80005e8 <__aeabi_dmul>
 800ac5e:	a37c      	add	r3, pc, #496	@ (adr r3, 800ae50 <__ieee754_pow+0x738>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fb0a 	bl	800027c <__adddf3>
 800ac68:	4622      	mov	r2, r4
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f7f5 fcbc 	bl	80005e8 <__aeabi_dmul>
 800ac70:	a379      	add	r3, pc, #484	@ (adr r3, 800ae58 <__ieee754_pow+0x740>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fb01 	bl	800027c <__adddf3>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fcb3 	bl	80005e8 <__aeabi_dmul>
 800ac82:	a377      	add	r3, pc, #476	@ (adr r3, 800ae60 <__ieee754_pow+0x748>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	f7f5 faf8 	bl	800027c <__adddf3>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	462b      	mov	r3, r5
 800ac90:	f7f5 fcaa 	bl	80005e8 <__aeabi_dmul>
 800ac94:	a374      	add	r3, pc, #464	@ (adr r3, 800ae68 <__ieee754_pow+0x750>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f7f5 faef 	bl	800027c <__adddf3>
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	f7f5 fca1 	bl	80005e8 <__aeabi_dmul>
 800aca6:	a372      	add	r3, pc, #456	@ (adr r3, 800ae70 <__ieee754_pow+0x758>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fae6 	bl	800027c <__adddf3>
 800acb0:	4622      	mov	r2, r4
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	462b      	mov	r3, r5
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 fc94 	bl	80005e8 <__aeabi_dmul>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4630      	mov	r0, r6
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f5 fc8e 	bl	80005e8 <__aeabi_dmul>
 800accc:	465a      	mov	r2, fp
 800acce:	4604      	mov	r4, r0
 800acd0:	460d      	mov	r5, r1
 800acd2:	464b      	mov	r3, r9
 800acd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acd8:	f7f5 fad0 	bl	800027c <__adddf3>
 800acdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace0:	f7f5 fc82 	bl	80005e8 <__aeabi_dmul>
 800ace4:	4622      	mov	r2, r4
 800ace6:	462b      	mov	r3, r5
 800ace8:	f7f5 fac8 	bl	800027c <__adddf3>
 800acec:	465a      	mov	r2, fp
 800acee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acf2:	464b      	mov	r3, r9
 800acf4:	4658      	mov	r0, fp
 800acf6:	4649      	mov	r1, r9
 800acf8:	f7f5 fc76 	bl	80005e8 <__aeabi_dmul>
 800acfc:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <__ieee754_pow+0x790>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	4606      	mov	r6, r0
 800ad02:	460f      	mov	r7, r1
 800ad04:	f7f5 faba 	bl	800027c <__adddf3>
 800ad08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad0c:	f7f5 fab6 	bl	800027c <__adddf3>
 800ad10:	46d8      	mov	r8, fp
 800ad12:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ad16:	460d      	mov	r5, r1
 800ad18:	465a      	mov	r2, fp
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ad24:	f7f5 fc60 	bl	80005e8 <__aeabi_dmul>
 800ad28:	465c      	mov	r4, fp
 800ad2a:	4680      	mov	r8, r0
 800ad2c:	4689      	mov	r9, r1
 800ad2e:	4b5e      	ldr	r3, [pc, #376]	@ (800aea8 <__ieee754_pow+0x790>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fa9f 	bl	8000278 <__aeabi_dsub>
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	f7f5 fa9b 	bl	8000278 <__aeabi_dsub>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad4a:	f7f5 fa95 	bl	8000278 <__aeabi_dsub>
 800ad4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad52:	f7f5 fc49 	bl	80005e8 <__aeabi_dmul>
 800ad56:	4622      	mov	r2, r4
 800ad58:	4606      	mov	r6, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	462b      	mov	r3, r5
 800ad5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad62:	f7f5 fc41 	bl	80005e8 <__aeabi_dmul>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 fa85 	bl	800027c <__adddf3>
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 fa7d 	bl	800027c <__adddf3>
 800ad82:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ad86:	a33c      	add	r3, pc, #240	@ (adr r3, 800ae78 <__ieee754_pow+0x760>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ad92:	460d      	mov	r5, r1
 800ad94:	f7f5 fc28 	bl	80005e8 <__aeabi_dmul>
 800ad98:	465c      	mov	r4, fp
 800ad9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	4620      	mov	r0, r4
 800ada4:	4629      	mov	r1, r5
 800ada6:	f7f5 fa67 	bl	8000278 <__aeabi_dsub>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 fa61 	bl	8000278 <__aeabi_dsub>
 800adb6:	a332      	add	r3, pc, #200	@ (adr r3, 800ae80 <__ieee754_pow+0x768>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	f7f5 fc14 	bl	80005e8 <__aeabi_dmul>
 800adc0:	a331      	add	r3, pc, #196	@ (adr r3, 800ae88 <__ieee754_pow+0x770>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	4606      	mov	r6, r0
 800adc8:	460f      	mov	r7, r1
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	f7f5 fc0b 	bl	80005e8 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4630      	mov	r0, r6
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 fa4f 	bl	800027c <__adddf3>
 800adde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ade0:	4b32      	ldr	r3, [pc, #200]	@ (800aeac <__ieee754_pow+0x794>)
 800ade2:	4413      	add	r3, r2
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f7f5 fa48 	bl	800027c <__adddf3>
 800adec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800adf2:	f7f5 fb8f 	bl	8000514 <__aeabi_i2d>
 800adf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800adf8:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb0 <__ieee754_pow+0x798>)
 800adfa:	4413      	add	r3, r2
 800adfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae00:	4606      	mov	r6, r0
 800ae02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae06:	460f      	mov	r7, r1
 800ae08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae0c:	f7f5 fa36 	bl	800027c <__adddf3>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	f7f5 fa32 	bl	800027c <__adddf3>
 800ae18:	4632      	mov	r2, r6
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	f7f5 fa2e 	bl	800027c <__adddf3>
 800ae20:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ae24:	4632      	mov	r2, r6
 800ae26:	463b      	mov	r3, r7
 800ae28:	4658      	mov	r0, fp
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	f7f5 fa24 	bl	8000278 <__aeabi_dsub>
 800ae30:	4642      	mov	r2, r8
 800ae32:	464b      	mov	r3, r9
 800ae34:	f7f5 fa20 	bl	8000278 <__aeabi_dsub>
 800ae38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae3c:	f7f5 fa1c 	bl	8000278 <__aeabi_dsub>
 800ae40:	465c      	mov	r4, fp
 800ae42:	4602      	mov	r2, r0
 800ae44:	e036      	b.n	800aeb4 <__ieee754_pow+0x79c>
 800ae46:	bf00      	nop
 800ae48:	4a454eef 	.word	0x4a454eef
 800ae4c:	3fca7e28 	.word	0x3fca7e28
 800ae50:	93c9db65 	.word	0x93c9db65
 800ae54:	3fcd864a 	.word	0x3fcd864a
 800ae58:	a91d4101 	.word	0xa91d4101
 800ae5c:	3fd17460 	.word	0x3fd17460
 800ae60:	518f264d 	.word	0x518f264d
 800ae64:	3fd55555 	.word	0x3fd55555
 800ae68:	db6fabff 	.word	0xdb6fabff
 800ae6c:	3fdb6db6 	.word	0x3fdb6db6
 800ae70:	33333303 	.word	0x33333303
 800ae74:	3fe33333 	.word	0x3fe33333
 800ae78:	e0000000 	.word	0xe0000000
 800ae7c:	3feec709 	.word	0x3feec709
 800ae80:	dc3a03fd 	.word	0xdc3a03fd
 800ae84:	3feec709 	.word	0x3feec709
 800ae88:	145b01f5 	.word	0x145b01f5
 800ae8c:	be3e2fe0 	.word	0xbe3e2fe0
 800ae90:	7ff00000 	.word	0x7ff00000
 800ae94:	43400000 	.word	0x43400000
 800ae98:	0003988e 	.word	0x0003988e
 800ae9c:	000bb679 	.word	0x000bb679
 800aea0:	0800b778 	.word	0x0800b778
 800aea4:	3ff00000 	.word	0x3ff00000
 800aea8:	40080000 	.word	0x40080000
 800aeac:	0800b758 	.word	0x0800b758
 800aeb0:	0800b768 	.word	0x0800b768
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeba:	e5d7      	b.n	800aa6c <__ieee754_pow+0x354>
 800aebc:	f04f 0a01 	mov.w	sl, #1
 800aec0:	e65e      	b.n	800ab80 <__ieee754_pow+0x468>
 800aec2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b194 <__ieee754_pow+0xa7c>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 f9d6 	bl	800027c <__adddf3>
 800aed0:	4642      	mov	r2, r8
 800aed2:	e9cd 0100 	strd	r0, r1, [sp]
 800aed6:	464b      	mov	r3, r9
 800aed8:	4620      	mov	r0, r4
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7f5 f9cc 	bl	8000278 <__aeabi_dsub>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aee8:	f7f5 fe0e 	bl	8000b08 <__aeabi_dcmpgt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f47f ae00 	bne.w	800aaf2 <__ieee754_pow+0x3da>
 800aef2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800aef6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aefa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800aefe:	fa43 fa0a 	asr.w	sl, r3, sl
 800af02:	44da      	add	sl, fp
 800af04:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800af08:	489d      	ldr	r0, [pc, #628]	@ (800b180 <__ieee754_pow+0xa68>)
 800af0a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800af0e:	4108      	asrs	r0, r1
 800af10:	ea00 030a 	and.w	r3, r0, sl
 800af14:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800af18:	f1c1 0114 	rsb	r1, r1, #20
 800af1c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800af20:	fa4a fa01 	asr.w	sl, sl, r1
 800af24:	f1bb 0f00 	cmp.w	fp, #0
 800af28:	4640      	mov	r0, r8
 800af2a:	4649      	mov	r1, r9
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	bfb8      	it	lt
 800af32:	f1ca 0a00 	rsblt	sl, sl, #0
 800af36:	f7f5 f99f 	bl	8000278 <__aeabi_dsub>
 800af3a:	4680      	mov	r8, r0
 800af3c:	4689      	mov	r9, r1
 800af3e:	4632      	mov	r2, r6
 800af40:	463b      	mov	r3, r7
 800af42:	4640      	mov	r0, r8
 800af44:	4649      	mov	r1, r9
 800af46:	f7f5 f999 	bl	800027c <__adddf3>
 800af4a:	2400      	movs	r4, #0
 800af4c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b140 <__ieee754_pow+0xa28>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	4620      	mov	r0, r4
 800af54:	460d      	mov	r5, r1
 800af56:	f7f5 fb47 	bl	80005e8 <__aeabi_dmul>
 800af5a:	4642      	mov	r2, r8
 800af5c:	e9cd 0100 	strd	r0, r1, [sp]
 800af60:	464b      	mov	r3, r9
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f987 	bl	8000278 <__aeabi_dsub>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 f981 	bl	8000278 <__aeabi_dsub>
 800af76:	a374      	add	r3, pc, #464	@ (adr r3, 800b148 <__ieee754_pow+0xa30>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f7f5 fb34 	bl	80005e8 <__aeabi_dmul>
 800af80:	a373      	add	r3, pc, #460	@ (adr r3, 800b150 <__ieee754_pow+0xa38>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	4680      	mov	r8, r0
 800af88:	4689      	mov	r9, r1
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 fb2b 	bl	80005e8 <__aeabi_dmul>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 f96f 	bl	800027c <__adddf3>
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afaa:	f7f5 f967 	bl	800027c <__adddf3>
 800afae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb2:	4680      	mov	r8, r0
 800afb4:	4689      	mov	r9, r1
 800afb6:	f7f5 f95f 	bl	8000278 <__aeabi_dsub>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 f959 	bl	8000278 <__aeabi_dsub>
 800afc6:	4642      	mov	r2, r8
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	464b      	mov	r3, r9
 800afce:	4640      	mov	r0, r8
 800afd0:	4649      	mov	r1, r9
 800afd2:	f7f5 fb09 	bl	80005e8 <__aeabi_dmul>
 800afd6:	a360      	add	r3, pc, #384	@ (adr r3, 800b158 <__ieee754_pow+0xa40>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	4604      	mov	r4, r0
 800afde:	460d      	mov	r5, r1
 800afe0:	f7f5 fb02 	bl	80005e8 <__aeabi_dmul>
 800afe4:	a35e      	add	r3, pc, #376	@ (adr r3, 800b160 <__ieee754_pow+0xa48>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f945 	bl	8000278 <__aeabi_dsub>
 800afee:	4622      	mov	r2, r4
 800aff0:	462b      	mov	r3, r5
 800aff2:	f7f5 faf9 	bl	80005e8 <__aeabi_dmul>
 800aff6:	a35c      	add	r3, pc, #368	@ (adr r3, 800b168 <__ieee754_pow+0xa50>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 f93e 	bl	800027c <__adddf3>
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	f7f5 faf0 	bl	80005e8 <__aeabi_dmul>
 800b008:	a359      	add	r3, pc, #356	@ (adr r3, 800b170 <__ieee754_pow+0xa58>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 f933 	bl	8000278 <__aeabi_dsub>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fae7 	bl	80005e8 <__aeabi_dmul>
 800b01a:	a357      	add	r3, pc, #348	@ (adr r3, 800b178 <__ieee754_pow+0xa60>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f92c 	bl	800027c <__adddf3>
 800b024:	4622      	mov	r2, r4
 800b026:	462b      	mov	r3, r5
 800b028:	f7f5 fade 	bl	80005e8 <__aeabi_dmul>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 f920 	bl	8000278 <__aeabi_dsub>
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	f7f5 fad0 	bl	80005e8 <__aeabi_dmul>
 800b048:	2200      	movs	r2, #0
 800b04a:	e9cd 0100 	strd	r0, r1, [sp]
 800b04e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 f90f 	bl	8000278 <__aeabi_dsub>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b062:	f7f5 fbeb 	bl	800083c <__aeabi_ddiv>
 800b066:	4632      	mov	r2, r6
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	463b      	mov	r3, r7
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fab9 	bl	80005e8 <__aeabi_dmul>
 800b076:	4632      	mov	r2, r6
 800b078:	463b      	mov	r3, r7
 800b07a:	f7f5 f8ff 	bl	800027c <__adddf3>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4620      	mov	r0, r4
 800b084:	4629      	mov	r1, r5
 800b086:	f7f5 f8f7 	bl	8000278 <__aeabi_dsub>
 800b08a:	4642      	mov	r2, r8
 800b08c:	464b      	mov	r3, r9
 800b08e:	f7f5 f8f3 	bl	8000278 <__aeabi_dsub>
 800b092:	460b      	mov	r3, r1
 800b094:	4602      	mov	r2, r0
 800b096:	493b      	ldr	r1, [pc, #236]	@ (800b184 <__ieee754_pow+0xa6c>)
 800b098:	2000      	movs	r0, #0
 800b09a:	f7f5 f8ed 	bl	8000278 <__aeabi_dsub>
 800b09e:	ec41 0b10 	vmov	d0, r0, r1
 800b0a2:	ee10 3a90 	vmov	r3, s1
 800b0a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0ae:	da30      	bge.n	800b112 <__ieee754_pow+0x9fa>
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	f000 f87d 	bl	800b1b0 <scalbn>
 800b0b6:	ec51 0b10 	vmov	r0, r1, d0
 800b0ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0be:	f7ff bbd2 	b.w	800a866 <__ieee754_pow+0x14e>
 800b0c2:	4c31      	ldr	r4, [pc, #196]	@ (800b188 <__ieee754_pow+0xa70>)
 800b0c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d91a      	bls.n	800b102 <__ieee754_pow+0x9ea>
 800b0cc:	4b2f      	ldr	r3, [pc, #188]	@ (800b18c <__ieee754_pow+0xa74>)
 800b0ce:	440b      	add	r3, r1
 800b0d0:	4303      	orrs	r3, r0
 800b0d2:	d009      	beq.n	800b0e8 <__ieee754_pow+0x9d0>
 800b0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f7f5 fcf6 	bl	8000acc <__aeabi_dcmplt>
 800b0e0:	3800      	subs	r0, #0
 800b0e2:	bf18      	it	ne
 800b0e4:	2001      	movne	r0, #1
 800b0e6:	e42b      	b.n	800a940 <__ieee754_pow+0x228>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	f7f5 f8c4 	bl	8000278 <__aeabi_dsub>
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	463b      	mov	r3, r7
 800b0f4:	f7f5 fcfe 	bl	8000af4 <__aeabi_dcmpge>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d1eb      	bne.n	800b0d4 <__ieee754_pow+0x9bc>
 800b0fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b19c <__ieee754_pow+0xa84>
 800b100:	e6f7      	b.n	800aef2 <__ieee754_pow+0x7da>
 800b102:	469a      	mov	sl, r3
 800b104:	4b22      	ldr	r3, [pc, #136]	@ (800b190 <__ieee754_pow+0xa78>)
 800b106:	459a      	cmp	sl, r3
 800b108:	f63f aef3 	bhi.w	800aef2 <__ieee754_pow+0x7da>
 800b10c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b110:	e715      	b.n	800af3e <__ieee754_pow+0x826>
 800b112:	ec51 0b10 	vmov	r0, r1, d0
 800b116:	4619      	mov	r1, r3
 800b118:	e7cf      	b.n	800b0ba <__ieee754_pow+0x9a2>
 800b11a:	491a      	ldr	r1, [pc, #104]	@ (800b184 <__ieee754_pow+0xa6c>)
 800b11c:	2000      	movs	r0, #0
 800b11e:	f7ff bb18 	b.w	800a752 <__ieee754_pow+0x3a>
 800b122:	2000      	movs	r0, #0
 800b124:	2100      	movs	r1, #0
 800b126:	f7ff bb14 	b.w	800a752 <__ieee754_pow+0x3a>
 800b12a:	4630      	mov	r0, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7ff bb10 	b.w	800a752 <__ieee754_pow+0x3a>
 800b132:	460c      	mov	r4, r1
 800b134:	f7ff bb5e 	b.w	800a7f4 <__ieee754_pow+0xdc>
 800b138:	2400      	movs	r4, #0
 800b13a:	f7ff bb49 	b.w	800a7d0 <__ieee754_pow+0xb8>
 800b13e:	bf00      	nop
 800b140:	00000000 	.word	0x00000000
 800b144:	3fe62e43 	.word	0x3fe62e43
 800b148:	fefa39ef 	.word	0xfefa39ef
 800b14c:	3fe62e42 	.word	0x3fe62e42
 800b150:	0ca86c39 	.word	0x0ca86c39
 800b154:	be205c61 	.word	0xbe205c61
 800b158:	72bea4d0 	.word	0x72bea4d0
 800b15c:	3e663769 	.word	0x3e663769
 800b160:	c5d26bf1 	.word	0xc5d26bf1
 800b164:	3ebbbd41 	.word	0x3ebbbd41
 800b168:	af25de2c 	.word	0xaf25de2c
 800b16c:	3f11566a 	.word	0x3f11566a
 800b170:	16bebd93 	.word	0x16bebd93
 800b174:	3f66c16c 	.word	0x3f66c16c
 800b178:	5555553e 	.word	0x5555553e
 800b17c:	3fc55555 	.word	0x3fc55555
 800b180:	fff00000 	.word	0xfff00000
 800b184:	3ff00000 	.word	0x3ff00000
 800b188:	4090cbff 	.word	0x4090cbff
 800b18c:	3f6f3400 	.word	0x3f6f3400
 800b190:	3fe00000 	.word	0x3fe00000
 800b194:	652b82fe 	.word	0x652b82fe
 800b198:	3c971547 	.word	0x3c971547
 800b19c:	4090cc00 	.word	0x4090cc00

0800b1a0 <fabs>:
 800b1a0:	ec51 0b10 	vmov	r0, r1, d0
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b1aa:	ec43 2b10 	vmov	d0, r2, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <scalbn>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	ec55 4b10 	vmov	r4, r5, d0
 800b1b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	462b      	mov	r3, r5
 800b1be:	b991      	cbnz	r1, 800b1e6 <scalbn+0x36>
 800b1c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b1c4:	4323      	orrs	r3, r4
 800b1c6:	d03d      	beq.n	800b244 <scalbn+0x94>
 800b1c8:	4b35      	ldr	r3, [pc, #212]	@ (800b2a0 <scalbn+0xf0>)
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 fa0a 	bl	80005e8 <__aeabi_dmul>
 800b1d4:	4b33      	ldr	r3, [pc, #204]	@ (800b2a4 <scalbn+0xf4>)
 800b1d6:	429e      	cmp	r6, r3
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	da0f      	bge.n	800b1fe <scalbn+0x4e>
 800b1de:	a328      	add	r3, pc, #160	@ (adr r3, 800b280 <scalbn+0xd0>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	e01e      	b.n	800b224 <scalbn+0x74>
 800b1e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	d10b      	bne.n	800b206 <scalbn+0x56>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f7f5 f842 	bl	800027c <__adddf3>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	e022      	b.n	800b244 <scalbn+0x94>
 800b1fe:	460b      	mov	r3, r1
 800b200:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b204:	3936      	subs	r1, #54	@ 0x36
 800b206:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b20a:	4296      	cmp	r6, r2
 800b20c:	dd0d      	ble.n	800b22a <scalbn+0x7a>
 800b20e:	2d00      	cmp	r5, #0
 800b210:	a11d      	add	r1, pc, #116	@ (adr r1, 800b288 <scalbn+0xd8>)
 800b212:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b216:	da02      	bge.n	800b21e <scalbn+0x6e>
 800b218:	a11d      	add	r1, pc, #116	@ (adr r1, 800b290 <scalbn+0xe0>)
 800b21a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b21e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b288 <scalbn+0xd8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f9e0 	bl	80005e8 <__aeabi_dmul>
 800b228:	e7e6      	b.n	800b1f8 <scalbn+0x48>
 800b22a:	1872      	adds	r2, r6, r1
 800b22c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b230:	428a      	cmp	r2, r1
 800b232:	dcec      	bgt.n	800b20e <scalbn+0x5e>
 800b234:	2a00      	cmp	r2, #0
 800b236:	dd08      	ble.n	800b24a <scalbn+0x9a>
 800b238:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b23c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b240:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b244:	ec45 4b10 	vmov	d0, r4, r5
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b24e:	da08      	bge.n	800b262 <scalbn+0xb2>
 800b250:	2d00      	cmp	r5, #0
 800b252:	a10b      	add	r1, pc, #44	@ (adr r1, 800b280 <scalbn+0xd0>)
 800b254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b258:	dac1      	bge.n	800b1de <scalbn+0x2e>
 800b25a:	a10f      	add	r1, pc, #60	@ (adr r1, 800b298 <scalbn+0xe8>)
 800b25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b260:	e7bd      	b.n	800b1de <scalbn+0x2e>
 800b262:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b266:	3236      	adds	r2, #54	@ 0x36
 800b268:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b26c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b270:	4620      	mov	r0, r4
 800b272:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a8 <scalbn+0xf8>)
 800b274:	4629      	mov	r1, r5
 800b276:	2200      	movs	r2, #0
 800b278:	e7d4      	b.n	800b224 <scalbn+0x74>
 800b27a:	bf00      	nop
 800b27c:	f3af 8000 	nop.w
 800b280:	c2f8f359 	.word	0xc2f8f359
 800b284:	01a56e1f 	.word	0x01a56e1f
 800b288:	8800759c 	.word	0x8800759c
 800b28c:	7e37e43c 	.word	0x7e37e43c
 800b290:	8800759c 	.word	0x8800759c
 800b294:	fe37e43c 	.word	0xfe37e43c
 800b298:	c2f8f359 	.word	0xc2f8f359
 800b29c:	81a56e1f 	.word	0x81a56e1f
 800b2a0:	43500000 	.word	0x43500000
 800b2a4:	ffff3cb0 	.word	0xffff3cb0
 800b2a8:	3c900000 	.word	0x3c900000

0800b2ac <with_errno>:
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	ed2d 8b02 	vpush	{d8}
 800b2b2:	eeb0 8a40 	vmov.f32	s16, s0
 800b2b6:	eef0 8a60 	vmov.f32	s17, s1
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	f7fd fa52 	bl	8008764 <__errno>
 800b2c0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c4:	eef0 0a68 	vmov.f32	s1, s17
 800b2c8:	ecbd 8b02 	vpop	{d8}
 800b2cc:	6004      	str	r4, [r0, #0]
 800b2ce:	bd10      	pop	{r4, pc}

0800b2d0 <xflow>:
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	b507      	push	{r0, r1, r2, lr}
 800b2d4:	ec51 0b10 	vmov	r0, r1, d0
 800b2d8:	b183      	cbz	r3, 800b2fc <xflow+0x2c>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2e0:	e9cd 2300 	strd	r2, r3, [sp]
 800b2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e8:	f7f5 f97e 	bl	80005e8 <__aeabi_dmul>
 800b2ec:	ec41 0b10 	vmov	d0, r0, r1
 800b2f0:	2022      	movs	r0, #34	@ 0x22
 800b2f2:	b003      	add	sp, #12
 800b2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f8:	f7ff bfd8 	b.w	800b2ac <with_errno>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	e7ee      	b.n	800b2e0 <xflow+0x10>
 800b302:	0000      	movs	r0, r0
 800b304:	0000      	movs	r0, r0
	...

0800b308 <__math_uflow>:
 800b308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b310 <__math_uflow+0x8>
 800b30c:	f7ff bfe0 	b.w	800b2d0 <xflow>
 800b310:	00000000 	.word	0x00000000
 800b314:	10000000 	.word	0x10000000

0800b318 <__math_oflow>:
 800b318:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b320 <__math_oflow+0x8>
 800b31c:	f7ff bfd8 	b.w	800b2d0 <xflow>
 800b320:	00000000 	.word	0x00000000
 800b324:	70000000 	.word	0x70000000

0800b328 <_init>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr

0800b334 <_fini>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr
